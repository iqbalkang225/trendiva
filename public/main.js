/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={"./app/animations/Button.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js"),i=s("./app/utils/easings.js"),o=s("./app/utils/text.js");class a extends n.default{constructor({element:t}){super({element:t}),this.createText(),this.createPath()}createText(){const t=this.element.textContent;this.elements.wrapper=this.element.querySelector("span"),this.elements.text=document.createElement("div"),this.elements.text.innerHTML=t,this.elements.textSpans=(0,o.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=t,this.elements.hoverSpans=(0,o.split)({append:!1,element:this.elements.hover,expression:""}),this.elements.wrapper.innerHTML="",this.elements.wrapper.appendChild(this.elements.text),this.elements.wrapper.appendChild(this.elements.hover),r.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=r.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:i.DEFAULT,transform:"rotate3d(1, 0.1, 0, -90deg)",stagger:.01},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.1, 0, 90deg)"},{duration:.5,ease:i.DEFAULT,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.01},.05)}createPath(){this.path=this.element.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.pathValue=this.pathLength,r.default.set(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.pathValue-=this.pathLength,r.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.play()}onMouseLeave(){this.pathValue-=this.pathLength,r.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/animations/Link.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Animation.js"),i=s("./app/utils/easings.js"),o=s("./app/utils/text.js");const a=class extends n.default{constructor({element:t,elements:e}){super({element:t,elements:{}});const{innerHTML:s}=this.element.querySelector("span");this.elements.text=document.createElement("div"),this.elements.text.innerHTML=s,this.elements.textSpans=(0,o.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=s,this.elements.hoverSpans=(0,o.split)({append:!1,element:this.elements.hover,expression:""}),this.element.innerHTML="",this.element.appendChild(this.elements.text),this.element.appendChild(this.elements.hover),"center"===this.element.getAttribute("data-animation-position")?r.default.set(this.elements.hover,{left:"50%",position:"absolute",top:"50%",x:"-50%",y:"-50%"}):r.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=r.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:i.IMAGE,transform:"rotate3d(1, 0.2, 0, -90deg)",stagger:.02},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.2, 0, 90deg)"},{duration:.5,ease:i.IMAGE,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.02},.05),this.animateOut(),this.addEventListener()}animateIn(){}animateOut(){}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mouseleave",this.onMouseLeave)}removeEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mouseleave",this.onMouseLeave)}}},"./app/animations/Magnetic.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Animation.js");s("./app/utils/easings.js"),s("./app/utils/text.js");const i=class extends n.default{constructor({element:t,elements:e}){super({element:t,elements:{text:t.querySelector("span")}}),this.x={current:0,target:0},this.y={current:0,target:0},this.addEventListener()}animateIn(){}animateOut(){}onResize(){this.height=this.element.clientHeight}onMouseEnter(){this.updatePosition()}onMouseMove({clientX:t,clientY:e,target:s}){const{clientHeight:r,clientWidth:n}=this.elements.text,{left:i,top:o}=s.getBoundingClientRect(),a=(t-i)/n-.5,l=(e-o)/r-.5;this.x.target=a*n*.2,this.y.target=l*r*.2}onMouseLeave(){r.default.to([this.x,this.y],{current:0,duration:.2,onComplete:t=>window.cancelAnimationFrame(this.frame),target:0})}updatePosition(){this.x.current=r.default.utils.interpolate(this.x.current,this.x.target,.1),this.y.current=r.default.utils.interpolate(this.y.current,this.y.target,.1),r.default.set(this.elements.text,{x:this.x.current,y:this.y.current}),this.frame=window.requestAnimationFrame(this.updatePosition.bind(this))}addEventListener(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mousemove",this.onMouseMove),this.element.addEventListener("mouseleave",this.onMouseLeave)}removeEventListener(){this.element.removeEventListener("mouseenter",this.onMouseEnter),this.element.removeEventListener("mousemove",this.onMouseMove),this.element.removeEventListener("mouseleave",this.onMouseLeave)}}},"./app/animations/Paragraph.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/lodash/each.js"),n=s.n(r),i=s("./app/classes/Animation.js"),o=s("./app/utils/easings.js"),a=s("./app/utils/text.js");const l=class extends i.default{constructor({element:t}){const e=[],s=t.querySelectorAll("h1, h2, p");0!==s.length?n()(s,(t=>{(0,a.split)({element:t}),(0,a.split)({element:t}),e.push(...t.querySelectorAll("span span"))})):((0,a.split)({element:t}),(0,a.split)({element:t}),e.push(...t.querySelectorAll("span span"))),super({element:t,elements:{lines:e}}),this.onResize(),"IntersectionObserver"in window&&this.animateOut()}animateIn(){super.animateIn(),n()(this.lines,((t,e)=>{n()(t,(t=>{t.style.transition=`transform 1.5s ${.1*e}s ${o.CSS}`,t.style[this.transformPrefix]="translateY(0)"}))}))}animateOut(){super.animateOut(),n()(this.lines,(t=>{n()(t,(t=>{t.style[this.transformPrefix]="translateY(100%)"}))}))}onResize(){this.lines=(0,a.calculate)(this.elements.lines)}}},"./app/animations/Parallax.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/prefix/index.js"),n=s.n(r),i=s("./app/utils/breakpoints.js"),o=s("./app/utils/dom.js"),a=s("./app/utils/math.js");const l=class{constructor({element:t}){this.transform=n()("transform"),this.element=t,this.media=t.querySelector("img"),this.media.onload=t=>{this.onResize()},this.isVisible=!1,this.parallax={current:-this.amount,target:-this.amount},this.scale={current:1.15,target:1.15},this.onResize()}onResize(){console.log("onResize"),this.amount=window.innerWidth<i.BREAKPOINT_TABLET?10:150,this.offset=(0,o.getOffset)(this.element)}update(t){if(!this.offset)return;const{innerHeight:e}=window;t.current+e>=this.offset.top?(this.parallax=(0,a.clamp)(-this.amount,this.amount,(0,a.map)(this.offset.top-t.current,-this.offset.height,e,this.amount,-this.amount)),this.scale=(0,a.clamp)(1,1.15,(0,a.map)(this.offset.top-t.current,-this.offset.height,e,1,1.15)),this.media.style[this.transform]=`translate3d(0, ${this.parallax}px, 0) scale(${this.scale})`):this.media.style[this.transform]=`translate3d(0, -${this.amount}px, 0) scale(1.15)`}}},"./app/animations/Rotation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Animation.js");const n=class extends r.default{constructor({element:t}){super({element:t})}update(t){this.element.style[this.transformPrefix]=`rotate(${.25*t.current}deg)`}}},"./app/animations/Translate.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/prefix/index.js"),n=s.n(r),i=s("./app/utils/breakpoints.js"),o=s("./app/utils/dom.js"),a=s("./app/utils/math.js");const l=class{constructor({element:t}){this.transform=n()("transform"),this.element=t,this.targetElement=this.element.getAttribute("data-animation-target"),this.target=this.targetElement?t.parentNode.querySelector(this.targetElement):t,this.direction=this.element.getAttribute("data-animation-direction"),this.isVisible=!1,this.onResize(),this.parallax={current:-this.amount,target:-this.amount}}onResize(){this.amount=window.innerWidth<i.BREAKPOINT_TABLET?10:150,this.offset=(0,o.getOffset)(this.target)}update(t){if(this.isVideo)return;const{innerHeight:e}=window;t.current+e>=this.offset.top?(this.parallax=(0,a.map)(this.offset.top-t.current,-this.offset.height,e,this.amount,-this.amount),"left"===this.direction?(this.parallax*=-1,this.parallax=Math.min(this.parallax,0)):this.parallax=Math.max(this.parallax,0),this.element.style[this.transform]=`translate3d(0, ${this.parallax}px, 0)`):this.element.style[this.transform]=`translate3d(0, ${this.amount}px, 0)`}}},"./app/classes/Animation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/auto-bind/index.js"),n=s.n(r),i=s("./node_modules/prefix/index.js"),o=s.n(i);const a=class{constructor({element:t,elements:e}){n()(this);const{animationDelay:s,animationTarget:r}=t.dataset;this.delay=s,this.element=t,this.elements=e,this.target=r?t.closest(r):t,this.transformPrefix=o()("transform"),this.isVisible=!1,"IntersectionObserver"in window?(this.createObserver(),this.animateOut()):this.animateIn()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{!this.isVisible&&t.isIntersecting?this.animateIn():this.animateOut()}))})).observe(this.target)}animateIn(){this.isVisible=!0}animateOut(){this.isVisible=!1}}},"./app/classes/AsyncLoad.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Component.js");class n extends r.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Component.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var r=s("./node_modules/auto-bind/index.js"),n=s.n(r),i=s("./node_modules/events/events.js"),o=s.n(i),a=s("./node_modules/lodash/each.js"),l=s.n(a);class h extends(o()){constructor({classes:t,element:e,elements:s}){super(),n()(this),this.classes=t,this.selector=e,this.selectorChildren={...s},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},l()(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=this.element.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=this.element.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Detection.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r=new class{isPhone(){return this.isPhoneChecked||(this.isPhoneChecked=!0,this.isPhoneCheck=document.documentElement.classList.contains("phone")),this.isPhoneCheck}isTablet(){return this.isTabletChecked||(this.isTabletChecked=!0,this.isTabletCheck=document.documentElement.classList.contains("phone")),this.isTabletCheck}isDesktop(){return!this.isPhone()}isWebPSupported(){if(!this.isWebPChecked){this.isWebPChecked=!0;const t=document.createElement("canvas");t.getContext&&t.getContext("2d")&&(this.isWebPCheck=0===t.toDataURL("image/webp").indexOf("data:image/webp"))}return this.isWebPCheck}}},"./app/classes/Page.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>j});var r=s("./node_modules/auto-bind/index.js"),n=s.n(r),i=s("./node_modules/events/events.js"),o=s.n(i),a=s("./node_modules/gsap/index.js"),l=s("./node_modules/prefix/index.js"),h=s.n(l),u=s("./app/animations/Button.js"),c=s("./app/animations/Link.js"),d=s("./app/animations/Magnetic.js"),p=s("./app/animations/Parallax.js"),f=s("./app/animations/Paragraph.js"),m=s("./app/animations/Rotation.js"),g=s("./app/animations/Translate.js"),v=s("./app/classes/AsyncLoad.js"),_=s("./app/classes/Detection.js"),y=s("./node_modules/lodash/each.js"),b=s.n(y),w=s("./app/utils/dom.js"),x=s("./app/utils/math.js");s("./app/utils/text.js");const j=class extends(o()){constructor({classes:t,element:e,elements:s,isScrollable:r=!0}){super(),n()(this),this.classes={...t},this.selectors={element:e,elements:{preloaders:"[data-src]",animationsButtons:'[data-animation="button"]',animationsLinks:'[data-animation="link"]',animationsMagnetics:'[data-animation="magnetic"]',animationsParallaxes:'[data-animation="parallax"]',animationsParagraphs:'[data-animation="paragraph"]',animationsRotations:'[data-animation="rotation"]',animationsTranslates:'[data-animation="translate"]',footer:".footer",footerCredits:".footer__credits",...s}},this.scroll={ease:.07,position:0,current:0,target:0,limit:0},this.isScrollable=r,this.transformPrefix=h()("transform"),this.create()}create(){this.animations=[],this.element=document.querySelector(this.selectors.element),this.elements={},b()(this.selectors.elements,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=this.element.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=this.element.querySelector(t)))})),this.isScrollable&&(this.scroll={ease:.07,position:0,current:0,target:0,limit:this.elements.wrapper.clientHeight-window.innerHeight}),this.createAnimations(),this.createObserver(),this.createPreloaders()}createAnimations(){this.animationsButtons=(0,w.mapEach)(this.elements.animationsButtons,((t,e)=>new u.default({element:t}))),this.animations.push(...this.animationsButtons),this.animationsLinks=(0,w.mapEach)(this.elements.animationsLinks,((t,e)=>new c.default({element:t}))),this.animations.push(...this.animationsLinks),this.animationsMagnetics=(0,w.mapEach)(this.elements.animationsMagnetics,((t,e)=>new d.default({element:t}))),this.animations.push(...this.animationsMagnetics),this.animationsParallaxes=(0,w.mapEach)(this.elements.animationsParallaxes,(t=>new p.default({element:t}))),this.animations.push(...this.animationsParallaxes),this.animationsParagraphs=(0,w.mapEach)(this.elements.animationsParagraphs,(t=>new f.default({element:t}))),this.animations.push(...this.animationsParagraphs),this.animationsRotations=(0,w.mapEach)(this.elements.animationsRotations,(t=>new m.default({element:t}))),this.animations.push(...this.animationsRotations),this.animationsTranslates=(0,w.mapEach)(this.elements.animationsTranslates,(t=>new g.default({element:t}))),this.animations.push(...this.animationsTranslates)}createObserver(){this.observer=new window.ResizeObserver((t=>{for(const e of t)window.requestAnimationFrame((t=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight}))})),this.observer.observe(this.elements.wrapper)}createPreloaders(){this.preloaders=(0,w.mapEach)(this.elements.preloaders,(t=>new v.default({element:t})))}reset(){this.scroll={ease:.07,position:0,current:0,target:0,limit:0}}set(t){this.scroll.current=this.scroll.target=this.scroll.last=t,this.transform(this.elements.wrapper,this.scroll.current)}show(t){return this.reset(),this.isVisible=!0,this.addEventListeners(),a.default.set(document.documentElement,{backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),Promise.resolve()}hide(t){return this.isVisible=!1,this.removeEventListeners(),Promise.resolve()}transform(t,e){t.style[this.transformPrefix]=`translate3d(0, ${-Math.round(e)}px, 0)`}onResize(){this.elements.wrapper&&window.requestAnimationFrame((t=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight,b()(this.animations,(t=>{t.onResize&&t.onResize()}))}))}onTouchDown(t){_.default.isPhone()&&(this.isDown=!0,this.scroll.position=this.scroll.current,this.start=t.touches?t.touches[0].clientY:t.clientY)}onTouchMove(t){if(!_.default.isPhone()||!this.isDown)return;const e=t.touches?t.touches[0].clientY:t.clientY,s=3*(this.start-e);this.scroll.target=this.scroll.position+s}onTouchUp(t){_.default.isPhone()&&(this.isDown=!1)}onWheel(t){const e=t.pixelY;return this.scroll.target+=e,e}addEventListeners(){}removeEventListeners(){}update(){this.scroll.target=(0,x.clamp)(0,this.scroll.limit,this.scroll.target),this.scroll.current=(0,x.lerp)(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current=Math.floor(this.scroll.current),this.scroll.current<.1&&(this.scroll.current=0),this.elements.wrapper&&this.transform(this.elements.wrapper,this.scroll.current),b()(this.animations,(t=>{t.update&&t.update(this.scroll)})),this.scroll.last=this.scroll.current}}},"./app/components/Canvas/About/Gallery.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/gsap/index.js"),i=s("./node_modules/lodash/map.js"),o=s.n(i),a=s("./app/components/Canvas/About/Media.js");class l{constructor({element:t,geometry:e,index:s,gl:n,scene:i,sizes:o}){this.element=t,this.elementWrapper=t.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=s,this.gl=n,this.scene=i,this.sizes=o,this.group=new r.Transform,this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=o()(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.medias,(t=>t.show()))}hide(){o()(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,o()(this.medias,(e=>e.onResize(t,this.scroll.current,this.width)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),s=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),o()(this.medias,((t,e)=>{const s=t.mesh.scale.x/2+.25;if("left"===this.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=s*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var r=s("./node_modules/gsap/index.js"),n=s("./node_modules/ogl/src/core/Program.js"),i=s("./node_modules/ogl/src/core/Mesh.js"),o=s("./app/classes/Detection.js"),a=s("./app/shaders/plane-fragment.glsl"),l=s("./app/shaders/plane-vertex.glsl");const h=class{constructor({element:t,geometry:e,gl:s,index:r,scene:n,sizes:i}){this.element=t,this.geometry=e,this.gl=s,this.index=r,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){r.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){r.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e,s){this.extra=0,this.widthTotal=s,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=r.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight;const e=o.default.isPhone()?15:60;this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)*e-e}update(t){this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0)}}},"./app/components/Canvas/About/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/extras/Plane.js"),i=s("./node_modules/lodash/map.js"),o=s.n(i),a=s("./app/components/Canvas/About/Gallery.js");const l=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new r.Transform,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes})}createGeometry(){this.geometry=new n.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=o()(this.galleriesElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){this.group.setParent(this.scene),o()(this.galleries,(t=>t.show()))}hide(){this.group.setParent(null),o()(this.galleries,(t=>t.hide()))}onResize(t){o()(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){o()(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){o()(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){o()(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){o()(this.galleries,(e=>e.update(t)))}destroy(){o()(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>c});var r=s("./node_modules/gsap/index.js"),n=s("./node_modules/ogl/src/core/Transform.js"),i=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./app/classes/Component.js"),l=s("./app/shaders/collections-fragment.glsl"),h=s("./app/shaders/collections-vertex.glsl"),u=s("./app/components/Canvas/Collections/MediaDOM.js");const c=class extends a.default{constructor({detail:t,element:e,geometry:s,gl:r,index:i,scene:o,sizes:a}){super({element:e,elements:{image:".collections__gallery__media__image"}}),this.detail=t,this.geometry=s,this.gl=r,this.index=i,this.scene=o,this.sizes=a,this.animation=0,this.group=new n.Transform,this.frame=0,this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createDetail(),this.createJewlery(),this.createModel(),this.createBounds({sizes:this.sizes}),this.original=-this.sizes.width/2+this.jewlery.scale.x/2+this.x*this.sizes.width,this.group.setParent(this.scene)}createDetail(){this.detailDOM=new u.default({element:this.detail}),this.detailDOM.on("close",this.animateOut.bind(this))}createJewlery(){const t=new i.Program(this.gl,{fragment:l.default,vertex:h.default,uniforms:{uAlpha:{value:0},tMap:{value:window.TEXTURES[this.elements.image.getAttribute("data-src")]}}});this.jewlery=new o.Mesh(this.gl,{geometry:this.geometry,program:t}),this.jewlery.index=this.index,this.jewlery.setParent(this.group)}createModel(){const t=new i.Program(this.gl,{fragment:l.default,vertex:h.default,uniforms:{uAlpha:{value:0},tMap:{value:window.TEXTURES[this.elements.image.getAttribute("data-model-src")]}}});this.model=new o.Mesh(this.gl,{geometry:this.geometry,program:t}),this.model.rotation.y=Math.PI,this.model.setParent(this.group)}createBounds({sizes:t}){this.sizes=t,this.collectionsBounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX()}show(){r.default.to(this.opacity,{delay:.5,multiplier:1})}hide(){r.default.to(this.opacity,{multiplier:0}),this.detailDOM.animateOut()}onResize(t,e){this.detailDOM.onResize(),this.createBounds(t),this.updateX(e&&e.x)}animateIn(){r.default.to(this,{animation:1,duration:2,ease:"expo.inOut"}),this.detailDOM.animateIn(),this.emit("open",this.index)}animateOut(){r.default.to(this,{animation:0,duration:2,ease:"expo.inOut"}),this.detailDOM.animateOut(),this.emit("close",this.index)}updateScale(){const t=r.default.utils.interpolate(this.collectionsBounds.height,this.detailDOM.bounds.height,this.animation),e=r.default.utils.interpolate(this.collectionsBounds.width,this.detailDOM.bounds.width,this.animation);this.height=t/window.innerHeight,this.width=e/window.innerWidth,this.jewlery.scale.x=this.sizes.width*this.width,this.jewlery.scale.y=this.sizes.height*this.height,this.model.scale.x=this.sizes.width*this.width,this.model.scale.y=this.sizes.height*this.height}updateX(t=0){const e=r.default.utils.interpolate(this.collectionsBounds.left+t,this.detailDOM.bounds.left,this.animation);this.x=e/window.innerWidth,this.group.position.x=-this.sizes.width/2+this.jewlery.scale.x/2+this.x*this.sizes.width,this.group.position.z=r.default.utils.interpolate(0,.1,this.animation),this.group.rotation.y=r.default.utils.interpolate(0,2*Math.PI,this.animation)}update(t,e){this.updateScale(),this.updateX(t);const s=.5*Math.sin(this.original/10*(2*Math.PI)+this.frame/500);this.animation>.01?(this.jewlery.program.depthTest=!1,this.jewlery.program.depthWrite=!1,this.model.program.depthTest=!1,this.model.program.depthWrite=!1):(this.jewlery.program.depthTest=!0,this.jewlery.program.depthWrite=!0,this.model.program.depthTest=!0,this.model.program.depthWrite=!0),this.group.position.y=r.default.utils.interpolate(s,0,this.animation);const n=r.default.utils.mapRange(.25*-this.sizes.width,.25*this.sizes.width,.3*this.group.position.y,.3*-this.group.position.y,this.group.position.x),i=.01*Math.PI;this.group.rotation.z=r.default.utils.interpolate(n,i,this.animation),this.opacity.target=e===this.index?1:.4,this.opacity.current=r.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.jewlery.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current,this.model.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current,this.frame+=1}}},"./app/components/Canvas/Collections/MediaDOM.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js"),i=s("./app/utils/dom.js"),o=s("./app/utils/easings.js"),a=s("./app/utils/text.js");class l extends n.default{constructor({element:t}){super({classes:{active:"detail--active"},element:t,elements:{media:".detail__media",collection:".detail__information__collection__text",title:".detail__information__title",titleSpans:[],size:".detail__information__highlight:first-of-type .detail__information__highlight__text",sizeIcon:".detail__information__highlight__icon--arrow",sizeIconPaths:".detail__information__highlight__icon--arrow path:nth-child(2), .detail__information__highlight__icon--arrow path:nth-child(3)",sizeIconLine:".detail__information__highlight__icon--arrow path:nth-child(1)",sizeSpans:[],star:".detail__information__highlight:last-of-type .detail__information__highlight__text",starIcon:".detail__information__highlight__icon--star",starIconPath:".detail__information__highlight__icon--star path:first-child",starSpans:[],info:".detail__information__item:first-of-type .detail__information__item__description",infoLabel:".detail__information__item:first-of-type .detail__information__item__title__text",infoSpans:[],disclaimer:".detail__information__item:last-of-type .detail__information__item__description",disclaimerLabel:".detail__information__item:last-of-type .detail__information__item__title__text",disclaimerSpans:[],link:".detail__information__link",close:".detail__button"}}),this.createTitle(),this.createSize(),this.createStar(),this.createInfo(),this.createDisclaimer(),this.onResize()}createTitle(){this.elements.titleSpans=(0,a.split)({append:!0,element:this.elements.title,expression:"<br>"}),(0,i.mapEach)(this.elements.titleSpans,(t=>{(0,a.split)({append:!1,element:t,expression:""})}))}createSize(){(0,a.split)({append:!0,element:this.elements.size,expression:" "}),(0,a.split)({append:!1,element:this.elements.size,expression:" "}),this.elements.sizeSpans=this.elements.size.querySelectorAll("span span")}createStar(){(0,a.split)({append:!0,element:this.elements.star,expression:" "}),(0,a.split)({append:!1,element:this.elements.star,expression:" "}),this.elements.starSpans=this.elements.star.querySelectorAll("span span")}createInfo(){(0,a.split)({append:!0,element:this.elements.info,expression:" "}),(0,a.split)({append:!1,element:this.elements.info,expression:" "}),this.elements.infoSpans=this.elements.info.querySelectorAll("span span")}createDisclaimer(){(0,a.split)({append:!0,element:this.elements.disclaimer,expression:" "}),(0,a.split)({append:!1,element:this.elements.disclaimer,expression:" "}),this.elements.disclaimerSpans=this.elements.disclaimer.querySelectorAll("span span")}animateIn(){this.timelineIn=r.default.timeline({delay:.5}),this.timelineIn.call((t=>{this.element.classList.add(this.classes.active)})),this.timelineIn.fromTo(this.elements.collection,{y:"100%"},{duration:1,ease:o.DEFAULT,y:"0%"},"start"),(0,i.mapEach)(this.elements.titleSpans,((t,e)=>{const s=t.querySelectorAll("span");this.timelineIn.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1.5,onStart:t=>{r.default.fromTo(s,{autoAlpha:0,display:"inline-block",y:"100%"},{autoAlpha:1,delay:.2,display:"inline-block",duration:1,ease:"back.inOut",stagger:.015,y:"0%"})},ease:"expo.inOut",y:"0%"},"start")})),(0,i.mapEach)(this.elements.sizeLines,((t,e)=>{this.timelineIn.fromTo(t,{y:"100%"},{delay:.05*e,duration:1,ease:o.DEFAULT,y:"0%"},"-=0.9")})),this.timelineIn.fromTo(this.elements.sizeIcon,{autoAlpha:0,rotation:45},{autoAlpha:1,duration:1,ease:o.DEFAULT,rotation:0},"-=0.9"),this.timelineIn.fromTo(this.elements.sizeIconPaths[0],{autoAlpha:0,transformOrigin:"50% 50%",x:"-50%"},{autoAlpha:1,duration:1.5,ease:o.DEFAULT,transformOrigin:"50% 50%",x:"0%"},"-=0.9"),this.timelineIn.fromTo(this.elements.sizeIconPaths[1],{autoAlpha:0,transformOrigin:"50% 50%",x:"50%"},{autoAlpha:1,duration:1.5,ease:o.DEFAULT,transformOrigin:"50% 50%",x:"0%"},"-=1.5"),this.timelineIn.fromTo(this.elements.sizeIconLine,{autoAlpha:0,scale:0,transformOrigin:"50% 50%"},{autoAlpha:1,duration:1.5,ease:o.DEFAULT,scale:1,transformOrigin:"50% 50%"},"-=1.5"),(0,i.mapEach)(this.elements.starLines,((t,e)=>{this.timelineIn.fromTo(t,{y:"100%"},{delay:.05*e,duration:1,ease:o.DEFAULT,y:"0%"},"-=0.9")})),this.timelineIn.fromTo(this.elements.starIcon,{autoAlpha:0,rotation:360},{autoAlpha:1,duration:1,ease:o.DEFAULT,rotation:0},"-=0.9"),this.timelineIn.fromTo(this.elements.starIconPath,{autoAlpha:0,scale:.5,transformOrigin:"50% 50%"},{autoAlpha:1,duration:1,ease:o.DEFAULT,scale:1,transformOrigin:"50% 50%"},"-=0.9"),this.timelineIn.fromTo(this.elements.infoLabel,{y:"100%"},{duration:1,ease:o.DEFAULT,y:"0%"},"-=1.4"),(0,i.mapEach)(this.elements.infoLines,((t,e)=>{this.timelineIn.fromTo(t,{y:"100%"},{delay:.05*e,duration:1,ease:o.DEFAULT,y:"0%"},"-=1")})),this.timelineIn.fromTo(this.elements.disclaimerLabel,{y:"100%"},{duration:1,ease:o.DEFAULT,y:"0%"},"-=0.95"),(0,i.mapEach)(this.elements.disclaimerLines,((t,e)=>{this.timelineIn.fromTo(t,{y:"100%"},{delay:.05*e,duration:1,ease:o.DEFAULT,y:"0%"},"-=1")})),this.timelineIn.fromTo(this.elements.link,{y:"100%"},{duration:1,ease:o.DEFAULT,y:"0%"},"-=0.95")}animateOut(){this.element.classList.remove(this.classes.active)}onClose(){this.emit("close")}onResize(){this.bounds=this.elements.media.getBoundingClientRect(),window.requestAnimationFrame((t=>{window.requestAnimationFrame((t=>{this.elements.sizeLines=(0,a.calculate)(this.elements.sizeSpans),this.elements.starLines=(0,a.calculate)(this.elements.starSpans),this.elements.infoLines=(0,a.calculate)(this.elements.infoSpans),this.elements.disclaimerLines=(0,a.calculate)(this.elements.disclaimerSpans)}))}))}addEventListeners(){this.elements.close.addEventListener("click",this.onClose)}}},"./app/components/Canvas/Collections/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>d});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/math/Vec2.js"),i=s("./node_modules/ogl/src/extras/Raycast.js"),o=s("./node_modules/ogl/src/extras/Plane.js"),a=s("./node_modules/gsap/index.js"),l=s("./node_modules/prefix/index.js"),h=s.n(l),u=s("./app/utils/dom.js"),c=s("./app/components/Canvas/Collections/Media.js");const d=class{constructor({camera:t,gl:e,renderer:s,scene:i,sizes:o,transition:a}){this.id="collections",this.camera=t,this.gl=e,this.renderer=s,this.scene=i,this.sizes=o,this.transition=a,this.transformPrefix=h()("transform"),this.group=new r.Transform,this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.titlesElement=document.querySelector(".collections__titles"),this.titlesItemsElements=document.querySelectorAll(".collections__titles__wrapper:nth-child(2) .collections__titles__item"),this.collectionsElement=document.querySelector(".collections"),this.collectionsElements=document.querySelectorAll(".collections__article"),this.collectionsElementsLinks=document.querySelectorAll(".collections__gallery__link"),this.collectionsElementsActive="collections__article--active",this.detailsElements=document.querySelectorAll(".detail"),this.mediasElements=document.querySelectorAll(".collections__gallery__media"),this.mouse=new n.Vec2,this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createRaycast(),this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes})}createRaycast(){this.raycast=new i.Raycast(this.gl)}createGeometry(){this.geometry=new o.Plane(this.gl)}createGallery(){this.medias=(0,u.mapEach)(this.mediasElements,((t,e)=>{const s=new c.default({detail:this.detailsElements[e],element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes});return s.on("open",this.onOpen.bind(this)),s.on("close",this.onClose.bind(this)),s})),this.mediasMeshes=(0,u.mapEach)(this.medias,(t=>t.jewlery))}async show(){if(this.isVisible=!0,this.group.setParent(this.scene),this.transition){const{src:t}=this.transition.mesh.program.uniforms.tMap.value.image,e=window.TEXTURES[t],s=this.medias.find((t=>t.texture===e)),r=-s.bounds.left-s.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({position:{x:0,y:s.mesh.position.y,z:0},rotation:s.mesh.rotation,scale:s.mesh.scale},(t=>{s.opacity.multiplier=1,(0,u.mapEach)(this.medias,(t=>{s!==t&&t.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=r}))}else(0,u.mapEach)(this.medias,(t=>t.show()))}hide(){document.body.style.cursor="",this.isVisible=!1,this.group.setParent(null),(0,u.mapEach)(this.medias,(t=>t.hide()))}onOpen(t){this.isVisible=!1,this.collectionsElement.classList.add("collections--open"),(0,u.mapEach)(this.medias,((e,s)=>{s===t?e.show():e.hide()}))}onClose(){this.isVisible=!0,this.collectionsElement.classList.remove("collections--open"),(0,u.mapEach)(this.medias,(t=>{t.show()}))}onResize(t){this.sizes=t.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,(0,u.mapEach)(this.medias,(e=>e.onResize(t,this.scroll))),(0,u.mapEach)(this.collectionsElementsLinks,((t,e)=>{t.bounds=(0,u.getOffset)(t)})),(0,u.mapEach)(this.titlesItemsElements,(t=>{t.bounds=(0,u.getOffset)(t)})),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.isVisible&&(this.isDown=!0,this.scroll.last=this.scroll.current)}onTouchMove({x:t,y:e}){if(!this.isVisible)return;this.mouse.set(t.end/this.renderer.width*2-1,2*(1-e.end/this.renderer.height)-1),this.raycast.castMouse(this.camera,this.mouse);const[s]=this.raycast.intersectBounds(this.mediasMeshes);if(this.hit=s?s.index:null,null!==this.hit&&this.index===this.hit?document.body.style.cursor="pointer":document.body.style.cursor="",!this.isDown)return;const r=t.start-t.end;this.scroll.target=this.scroll.last-r}onTouchUp({x:t,y:e}){this.isVisible&&(this.isDown=!1,null!==this.hit&&this.index===this.hit&&this.medias[this.hit].animateIn())}onWheel({pixelY:t}){this.isVisible&&(this.scroll.target+=t)}onChange(t){this.index=t;const e=parseInt(this.mediasElements[this.index].getAttribute("data-index"));(0,u.mapEach)(this.collectionsElements,((t,s)=>{s===e?t.classList.add(this.collectionsElementsActive):t.classList.remove(this.collectionsElementsActive)}))}onUpdateTitle(){const t={0:0,1:0,2:0,3:0,4:0};(0,u.mapEach)(this.collectionsElementsLinks,((e,s)=>{const r=e.getAttribute("data-index");t[r]+=e.bounds.width}));const e=[a.default.utils.clamp(0,1,a.default.utils.mapRange(0,t[0],0,1,-this.scroll.current)),a.default.utils.clamp(0,1,a.default.utils.mapRange(0,t[1],0,1,-this.scroll.current-t[0])),a.default.utils.clamp(0,1,a.default.utils.mapRange(0,t[2],0,1,-this.scroll.current-t[0]-t[1])),a.default.utils.clamp(0,1,a.default.utils.mapRange(0,t[3],0,1,-this.scroll.current-t[0]-t[1]-t[2]))];let s=0;(0,u.mapEach)(this.titlesItemsElements,((t,r)=>{s+=t.bounds.height*e[r]})),this.titlesElement.style[this.transformPrefix]=`translateY(calc(-${s}px - 33.33% + ${.5*window.innerHeight}px))`}update(){this.scroll.target=a.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=a.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const t=Math.floor(Math.abs((this.scroll.current-this.medias[0].collectionsBounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==t&&this.onChange(t),this.onUpdateTitle(),(0,u.mapEach)(this.medias,((t,e)=>{t.update(this.scroll.current,this.index)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/gsap/index.js"),n=s("./node_modules/ogl/src/core/Program.js"),i=s("./node_modules/ogl/src/core/Mesh.js"),o=s("./app/shaders/home-fragment.glsl"),a=s("./app/shaders/home-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:s,index:r,scene:n,sizes:i}){this.element=t,this.geometry=e,this.gl=s,this.index=r,this.scene=n,this.sizes=i,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(t){const e=t?2.5:0;this.timelineIn=r.default.timeline({delay:r.default.utils.random(e,e+1.5)}),this.timelineIn.fromTo(this.program.uniforms.uAlpha,{value:0},{duration:2,ease:"expo.inOut",value:.4},"start"),this.timelineIn.fromTo(this.mesh.position,{z:r.default.utils.random(2,6)},{duration:2,ease:"expo.inOut",z:0},"start")}hide(){}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(),this.updateY(t.y),this.program.uniforms.uSpeed.value=e}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/extras/Plane.js"),i=s("./node_modules/gsap/index.js"),o=s("./node_modules/lodash/map.js"),a=s.n(o),l=s("./app/components/Canvas/Home/Media.js");const h=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new r.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.velocity=2,this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes})}createGeometry(){this.geometry=new n.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=a()(this.mediasElements,((t,e)=>new l.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(t){this.group.setParent(this.scene),a()(this.medias,(e=>e.show(t)))}hide(){this.group.setParent(null),a()(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width},this.scroll.y=this.y.target=0,a()(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=e.start-e.end;this.y.target=this.scrollCurrent.y-s}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){this.y.target+=e,this.velocity=e>0?2:-2}update(){this.y.target+=this.velocity,this.speed.target=.001*(this.y.target-this.y.current),this.speed.current=i.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.y.current=i.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.y=this.y.current,a()(this.medias,((t,e)=>{const s=.5*this.sizes.height,r=t.mesh.scale.y/2;if("top"===this.y.direction){t.mesh.position.y+r<-s&&(t.extra.y+=this.gallerySizes.height)}else if("bottom"===this.y.direction){t.mesh.position.y-r>s&&(t.extra.y-=this.gallerySizes.height)}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var r=s("./node_modules/ogl/src/core/Renderer.js"),n=s("./node_modules/ogl/src/core/Camera.js"),i=s("./node_modules/ogl/src/core/Transform.js"),o=s("./app/components/Canvas/About/index.js"),a=s("./app/components/Canvas/Collections/index.js"),l=s("./app/components/Canvas/Home/index.js");class h{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new r.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}createCollections(){this.collections=new a.default({camera:this.camera,gl:this.gl,renderer:this.renderer,scene:this.scene,sizes:this.sizes,transition:this.transition})}onPreloaded(){this.createAbout(),this.createCollections(),this.createHome(),this.onChange(this.template,!0)}onChange(t,e){"/about"===t?this.about.show(e):this.about.hide(),"/collections"===t?this.collections.show(e):this.collections.hide(),"/"===t?this.home.show(e):this.home.hide(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s};const r={sizes:this.sizes};this.about&&this.about.onResize(r),this.collections&&this.collections.onResize(r),this.home&&this.home.onResize(r)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.about&&this.about.onTouchDown(e),this.collections&&this.collections.onTouchDown(e),this.home&&this.home.onTouchDown(e)}onTouchMove(t){const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const r={x:this.x,y:this.y};this.collections&&this.collections.onTouchMove(r),this.isDown&&(this.about&&this.about.onTouchMove(r),this.home&&this.home.onTouchMove(r))}onTouchUp(t){this.isDown=!1;const e=t.changedTouches?t.changedTouches[0].clientX:t.clientX,s=t.changedTouches?t.changedTouches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const r={x:this.x,y:this.y};this.about&&this.about.onTouchUp(r),this.collections&&this.collections.onTouchUp(r),this.home&&this.home.onTouchUp(r)}onWheel(t){this.collections&&this.collections.onWheel(t),this.home&&this.home.onWheel(t)}update(t){this.about&&this.about.update(t),this.collections&&this.collections.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/gsap/index.js"),n=s("./app/animations/Link.js"),i=s("./app/classes/Component.js"),o=s("./app/utils/colors.js"),a=s("./app/utils/dom.js");class l extends i.default{constructor({template:t}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.links=(0,a.mapEach)(this.elements.links,(t=>new n.default({element:t}))),this.onChange(t)}onChange(t){"/about"===t?(r.default.set(this.element,{color:o.COLOR_BRIGHT_GRAY}),r.default.set(this.elements.items[0],{autoAlpha:1}),r.default.set(this.elements.items[1],{autoAlpha:0})):(r.default.set(this.element,{color:o.COLOR_QUARTER_SPANISH_WHITE}),r.default.set(this.elements.items[0],{autoAlpha:0}),r.default.set(this.elements.items[1],{autoAlpha:1}))}}},"./app/components/Preloader.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>u});var r=s("./node_modules/ogl/src/core/Texture.js"),n=s("./node_modules/gsap/index.js"),i=s("./node_modules/lodash/each.js"),o=s.n(i),a=s("./app/classes/Component.js"),l=s("./app/utils/easings.js"),h=s("./app/utils/text.js");class u extends a.default{constructor({canvas:t}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=t,window.TEXTURES={},this.elements.titleSpans=(0,h.split)({append:!0,element:this.elements.title,expression:"<br>"}),o()(this.elements.titleSpans,(t=>{(0,h.split)({append:!1,element:t,expression:""})})),this.length=0,this.createLoader()}createLoader(){this.animateIn=n.default.timeline(),this.animateIn.set(this.elements.title,{autoAlpha:1}),o()(this.elements.titleSpans,((t,e)=>{const s=t.querySelectorAll("span");this.animateIn.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1.5,onStart:t=>{n.default.fromTo(s,{autoAlpha:0,display:"inline-block",y:"100%"},{autoAlpha:1,delay:.2,display:"inline-block",duration:1,ease:"back.inOut",stagger:.015,y:"0%"})},ease:"expo.inOut",y:"0%"},"start")})),this.animateIn.call((t=>{window.ASSETS.forEach((t=>{const e=new r.Texture(this.canvas.gl,{generateMipmaps:!1}),s=new window.Image;s.crossOrigin="anonymous",s.src=t,s.onload=t=>{e.image=s,this.onAssetLoaded()},window.TEXTURES[t]=e}))}))}onAssetLoaded(t){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.emit("completed"),this.animateOut=n.default.timeline({delay:1}),o()(this.elements.titleSpans,((t,e)=>{const s=t.querySelectorAll("span");this.animateOut.to(t,{autoAlpha:0,delay:.2*e,duration:1.5,onStart:t=>{n.default.to(s,{autoAlpha:0,delay:.2,display:"inline-block",duration:1,ease:"back.inOut",stagger:.015,y:"-100%"})},ease:"expo.inOut",y:"-100%"},"start")})),this.animateOut.to(this.elements.numberText,{autoAlpha:0,duration:1,ease:l.DEFAULT},"start"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((t=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/components/Transition.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./node_modules/gsap/index.js");const n=class{constructor(){this.element=document.createElement("canvas"),this.element.className="transition",this.element.height=window.innerHeight*window.devicePixelRatio,this.element.width=window.innerWidth*window.devicePixelRatio,this.context=this.element.getContext("2d"),this.progress=0,document.body.appendChild(this.element)}show({color:t}){return this.color=t,new Promise((t=>{r.default.set(this.element,{rotation:0}),r.default.to(this,{duration:1.5,ease:"expo.inOut",onComplete:t,onUpdate:this.onUpdate.bind(this),progress:1})}))}hide(){return new Promise((t=>{r.default.set(this.element,{rotation:180}),r.default.to(this,{duration:1.5,ease:"expo.inOut",onComplete:t,onUpdate:this.onUpdate.bind(this),progress:0})}))}onUpdate(){this.context.clearRect(0,0,this.element.width,this.element.height),this.context.save(),this.context.beginPath(),this.widthSegments=Math.ceil(this.element.width/40),this.context.moveTo(this.element.width,this.element.height),this.context.lineTo(0,this.element.height);const t=(1-this.progress)*this.element.height,e=250*Math.sin(this.progress*Math.PI);this.context.lineTo(0,t);for(let s=0;s<=this.widthSegments;s++){const r=40*s,n=t-Math.sin(r/this.element.width*Math.PI)*e;this.context.lineTo(r,n)}this.context.fillStyle=this.color,this.context.fill(),this.context.restore()}}},"./app/pages/About/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Page.js");const n=class extends r.default{constructor(){super({id:"about",classes:{active:"about--active"},element:".about",elements:{wrapper:".about__wrapper",navigation:document.querySelector(".navigation"),title:".about__title"}})}async show(t){return this.element.classList.add(this.classes.active),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}}},"./app/pages/Collections/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Page.js"),n=s("./app/utils/dom.js"),i=s("./app/utils/text.js");const o=class extends r.default{constructor(){super({id:"collections",classes:{active:"collections--active"},element:".collections",elements:{wrapper:".collections__wrapper",articlesDescriptions:".collections__article__description"}})}async show(t){return this.element.classList.add(this.classes.active),(0,n.mapEach)(this.elements.articlesDescriptions,(t=>{(0,i.split)({element:t,expression:"<br>"}),(0,i.split)({element:t,expression:"<br>"})})),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}}},"./app/pages/Details/Detail.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Component.js");const n=class extends r.default{constructor({element:t}){super({element:t})}}},"./app/pages/Details/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Page.js"),n=s("./app/utils/dom.js"),i=s("./app/pages/Details/Detail.js");const o=class extends r.default{constructor(){super({id:"details",classes:{active:"details--active"},element:".details",elements:{details:".detail"}})}create(){super.create(),this.details=(0,n.mapEach)(this.elements.details,(t=>new i.default({element:t})))}async show(t){return this.element.classList.add(this.classes.active),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}destroy(){super.destroy(),(0,n.mapEach)(this.details,(t=>{t.destroy()}))}}},"./app/pages/Home/Titles.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>u});var r=s("./node_modules/prefix/index.js"),n=s.n(r),i=s("./node_modules/lodash/each.js"),o=s.n(i),a=s("./app/classes/Component.js"),l=s("./app/utils/dom.js"),h=s("./app/utils/math.js");const u=class extends a.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.transformPrefix=n()("transform"),this.speed=2,this.scroll={ease:.1,position:0,current:0,target:0,last:0,clamp:0},o()(this.elements.items,(t=>{const e=(0,l.getOffset)(t);t.extra=0,t.height=e.height,t.offset=e.top,t.position=0})),this.length=this.elements.items.length,this.height=this.elements.items[0].height,this.heightTotal=this.elements.list.getBoundingClientRect().height}enable(){this.isEnabled=!0,this.update()}disable(){this.isEnabled=!1}onTouchDown(t){this.isEnabled&&(this.isDown=!0,this.scroll.position=this.scroll.current,this.start=t.touches?t.touches[0].clientY:t.clientY)}onTouchMove(t){if(!this.isDown||!this.isEnabled)return;const e=t.touches?t.touches[0].clientY:t.clientY,s=2*(this.start-e);this.scroll.target=this.scroll.position+s}onTouchUp(t){this.isEnabled&&(this.isDown=!1)}onWheel(t){if(!this.isEnabled)return;const e=.5*t.pixelY;this.scroll.target+=e,this.speed=e>0?2:-2}transform(t,e){t.style[this.transformPrefix]=`translate3d(0, ${Math.floor(e)}px, 0)`}update(){if(!this.isEnabled)return;this.scroll.target+=this.speed,this.scroll.current=(0,h.lerp)(this.scroll.current,this.scroll.target,this.scroll.ease);const t=Math.round(this.scroll.current%this.heightTotal);this.scroll.current<this.scroll.last?this.direction="down":this.direction="up",o()(this.elements.items,((e,s)=>{e.position=-this.scroll.current-e.extra;const r=e.position+e.offset+e.height;e.isBefore=r<0,e.isAfter=r>this.heightTotal,"up"===this.direction&&e.isBefore&&(e.extra=e.extra-this.heightTotal,e.isBefore=!1,e.isAfter=!1),"down"===this.direction&&e.isAfter&&(e.extra=e.extra+this.heightTotal,e.isBefore=!1,e.isAfter=!1),e.clamp=e.extra%t,this.transform(e,e.position)})),this.scroll.last=this.scroll.current,this.scroll.clamp=t}onResize(){o()(this.elements.items,(t=>{this.transform(t,0);const e=(0,l.getOffset)(t);t.extra=0,t.height=e.height,t.offset=e.top,t.position=0})),this.height=this.elements.items[0].getBoundingClientRect().height,this.heightTotal=this.elements.list.getBoundingClientRect().height,this.scroll={ease:.1,position:0,current:0,target:0,last:0}}}},"./app/pages/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./app/classes/Page.js"),n=s("./app/pages/Home/Titles.js");const i=class extends r.default{constructor(){super({id:"home",classes:{active:"home--active"},element:".home",elements:{wrapper:".home__wrapper",navigation:document.querySelector(".navigation"),link:".home__link",list:".home__titles",items:".home__titles__label, .home__titles__title"}})}create(){super.create(),this.titles=new n.default({element:document.body,elements:{list:this.elements.list,items:this.elements.items}}),this.titles.enable()}async show(t){return this.element.classList.add(this.classes.active),super.show(t)}async hide(t){return this.element.classList.remove(this.classes.active),super.hide(t)}onResize(){super.onResize(),this.titles.onResize()}onTouchDown(t){this.titles.onTouchDown(t)}onTouchMove(t){this.titles.onTouchMove(t)}onTouchUp(t){this.titles.onTouchUp(t)}onWheel(t){this.titles.onWheel(t)}update(){super.update(),this.titles.update()}destroy(){super.destroy()}}},"./app/utils/CustomEase.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{CustomEase:()=>d,default:()=>d});var r=s("./node_modules/gsap/utils/paths.js");let n,i,o=()=>n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n,a=()=>{n=o(),n?(n.registerEase("_CE",d.create),i=1):console.warn("Please gsap.registerPlugin(CustomEase)")},l=t=>~~(1e3*t+(t<0?-.5:.5))/1e3,h=/[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,u=/[cLlsSaAhHvVtTqQ]/g,c=function(t,e,s,r,n,i,o,a,l,h,u){let d,p=(t+s)/2,f=(e+r)/2,m=(s+n)/2,g=(r+i)/2,v=(n+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,T=o-t,A=a-e,C=Math.abs((s-o)*A-(r-a)*T),S=Math.abs((n-o)*A-(i-a)*T);return h||(h=[{x:t,y:e},{x:o,y:a}],u=1),h.splice(u||h.length-1,0,{x:j,y:E}),(C+S)*(C+S)>l*(T*T+A*A)&&(d=h.length,c(t,e,p,f,y,b,j,E,l,h,u),c(j,E,w,x,v,_,o,a,l,h,u+1+(h.length-d))),h};class d{constructor(t,e,s){i||a(),this.id=t,this.setData(e,s)}setData(t,e){e=e||{};let s,i,o,a,l,d,p,f,m,g=(t=t||"0,0,1,1").match(h),v=1,_=[],y=[],b=e.precision||1,w=b<=1;if(this.data=t,(u.test(t)||~t.indexOf("M")&&t.indexOf("C")<0)&&(g=(0,r.stringToRawPath)(t)[0]),s=g.length,4===s)g.unshift(0,0),g.push(1,1),s=8;else if((s-2)%6)throw"Invalid CustomEase";for(0==+g[0]&&1==+g[s-2]||((t,e,s)=>{s||0===s||(s=Math.max(+t[t.length-1],+t[1]));let r,n=-1*+t[0],i=-s,o=t.length,a=1/(+t[o-2]+n),l=-e||(Math.abs(+t[o-1]-+t[1])<.01*(+t[o-2]-+t[0])?(t=>{let e,s=t.length,r=1e20;for(e=1;e<s;e+=6)+t[e]<r&&(r=+t[e]);return r})(t)+i:+t[o-1]+i);for(l=l?1/l:-a,r=0;r<o;r+=2)t[r]=(+t[r]+n)*a,t[r+1]=(+t[r+1]+i)*l})(g,e.height,e.originY),this.segment=g,a=2;a<s;a+=6)i={x:+g[a-2],y:+g[a-1]},o={x:+g[a+4],y:+g[a+5]},_.push(i,o),c(i.x,i.y,+g[a],+g[a+1],+g[a+2],+g[a+3],o.x,o.y,1/(2e5*b),_,_.length-1);for(s=_.length,a=0;a<s;a++)p=_[a],f=_[a-1]||p,(p.x>f.x||f.y!==p.y&&f.x===p.x||p===f)&&p.x<=1?(f.cx=p.x-f.x,f.cy=p.y-f.y,f.n=p,f.nx=p.x,w&&a>1&&Math.abs(f.cy/f.cx-_[a-2].cy/_[a-2].cx)>2&&(w=0),f.cx<v&&(f.cx?v=f.cx:(f.cx=.001,a===s-1&&(f.x-=.001,v=Math.min(v,.001),w=0)))):(_.splice(a--,1),s--);if(s=1/v+1|0,l=1/s,d=0,p=_[0],w){for(a=0;a<s;a++)m=a*l,p.nx<m&&(p=_[++d]),i=p.y+(m-p.x)/p.cx*p.cy,y[a]={x:m,cx:l,y:i,cy:0,nx:9},a&&(y[a-1].cy=i-y[a-1].y);y[s-1].cy=_[_.length-1].y-i}else{for(a=0;a<s;a++)p.nx<a*l&&(p=_[++d]),y[a]=p;d<_.length-1&&(y[a-1]=_[_.length-2])}return this.ease=t=>{let e=y[t*s|0]||y[s-1];return e.nx<t&&(e=e.n),e.y+(t-e.x)/e.cx*e.cy},this.ease.custom=this,this.id&&n.registerEase(this.id,this.ease),this}getSVGData(t){return d.getSVGData(this,t)}static create(t,e,s){return new d(t,e,s).ease}static register(t){n=t,a()}static get(t){return n.parseEase(t)}static getSVGData(t,e){let s,i,o,a,h,u,c,p,f,m,g=(e=e||{}).width||100,v=e.height||100,_=e.x||0,y=(e.y||0)+v,b=n.utils.toArray(e.path)[0];if(e.invert&&(v=-v,y=0),"string"==typeof t&&(t=n.parseEase(t)),t.custom&&(t=t.custom),t instanceof d)s=(0,r.rawPathToString)((0,r.transformRawPath)([t.segment],g,0,0,-v,_,y));else{for(s=[_,y],c=Math.max(5,200*(e.precision||1)),a=1/c,c+=2,p=5/c,f=l(_+a*g),m=l(y+t(a)*-v),i=(m-y)/(f-_),o=2;o<c;o++)h=l(_+o*a*g),u=l(y+t(o*a)*-v),(Math.abs((u-m)/(h-f)-i)>p||o===c-1)&&(s.push(f,m),i=(u-m)/(h-f)),f=h,m=u;s="M"+s.join(",")}return b&&b.setAttribute("d",s),s}}o()&&n.registerPlugin(d),d.version="3.5.1"},"./app/utils/breakpoints.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{BREAKPOINT_PHONE:()=>n,BREAKPOINT_TABLET:()=>r});const r=1024,n=768},"./app/utils/colors.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{COLOR_BRIGHT_GRAY:()=>r,COLOR_QUARTER_SPANISH_WHITE:()=>n});const r="#37384C",n="#F9F1E7"},"./app/utils/dom.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{easing:()=>h,findAncestor:()=>i,getIndex:()=>a,getOffset:()=>o,mapEach:()=>l});var r=s("./node_modules/lodash/map.js"),n=s.n(r);const i=(t,e)=>{for(;(t=t.parentElement)&&!(t.matches||t.matchesSelector).call(t,e);)return t},o=(t,e=0)=>{const s=t.getBoundingClientRect();return{bottom:s.bottom,height:s.height,left:s.left,top:s.top+e,width:s.width}};function a(t){let e=0;for(;t=t.previousElementSibling;)e++;return e}function l(t,e){return t instanceof window.HTMLElement?[e(t)]:n()(t,e)}const h="cubic-bezier(0.19, 1, 0.22, 1)"},"./app/utils/easings.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{CSS:()=>o,DEFAULT:()=>i});var r=s("./node_modules/gsap/index.js"),n=s("./app/utils/CustomEase.js");r.default.registerPlugin(n.default);const i=n.default.create("default","0.77, 0, 0.175, 1"),o="cubic-bezier(0.77, 0, 0.175, 1)"},"./app/utils/math.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{clamp:()=>i,lerp:()=>n,map:()=>a,random:()=>o});var r=s("./node_modules/gsap/index.js");function n(t,e,s){return r.default.utils.interpolate(t,e,s)}function i(t,e,s){return r.default.utils.clamp(t,e,s)}function o(t,e){return r.default.utils.random(t,e)}function a(t,e,s,n,i){return r.default.utils.mapRange(e,s,n,i,t)}},"./app/utils/text.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{calculate:()=>o,split:()=>i});var r=s("./node_modules/lodash/each.js"),n=s.n(r);function i({element:t,expression:e=" ",append:s=!0}){const r=function(t,e){const s=t.split("<br>");let r=[];return n()(s,((t,s)=>{s>0&&r.push("<br>"),r=r.concat(t.split(e));let i=!1,o="";const a=[];n()(r,(t=>{i||!t.includes("<a")&&!t.includes("<strong")||(o="",i=!0),i&&(o+=` ${t}`),i&&(t.includes("/a>")||t.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(t),i&&(t.includes("/a>")||t.includes("/strong>"))&&(i=!1)})),r=a})),r}(t.innerHTML.toString().trim(),e);let i="";n()(r,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");n()(e,((t,e)=>{i+=e>0?"<br>"+a(t):a(t)}))}else i+=a(t)})),t.innerHTML=i;const o=t.querySelectorAll("span");return s&&n()(o,(t=>{const e=1===t.textContent.length,s=""!==t.innerHTML.trim(),r="&"!==t.textContent,n="-"!==t.textContent;e&&s&&r&&n&&(t.innerHTML=`${t.textContent}&nbsp;`)})),o}function o(t){const e=[];let s=[],r=t[0].offsetTop;return n()(t,((n,i)=>{n.offsetTop===r&&s.push(n),n.offsetTop!==r&&(e.push(s),s=[],s.push(n),r=n.offsetTop),i+1===t.length&&e.push(s)})),e}function a(t){return""===t?t:" "===t?"&nbsp;":"<br>"===(t=t.trim())?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":t=>{"use strict";t.exports=o;var e=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,s={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(t){if(!e.test(t))return t;var s=[],r=t.replace(/\033\[(\d+)m/g,(function(t,e){var r=n[e];if(r)return~s.indexOf(e)?(s.pop(),"</span>"):(s.push(e),"<"===r[0]?r:'<span style="'+r+';">');var o=i[e];return o?(s.pop(),o):""})),o=s.length;return o>0&&(r+=Array(o+1).join("</span>")),r}function a(t){for(var e in n[0]="font-weight:normal;opacity:1;color:#"+t.reset[0]+";background:#"+t.reset[1],n[7]="color:#"+t.reset[1]+";background:#"+t.reset[0],n[90]="color:#"+t.darkgrey,r){var s=t[r[e]]||"000";n[e]="color:#"+s,e=parseInt(e),n[(e+10).toString()]="background:#"+s}}[0,21,22,27,28,39,49].forEach((function(t){i[t]="</span>"})),o.setColors=function(t){if("object"!=typeof t)throw new Error("`colors` parameter must be an Object.");var e={};for(var r in s){var n=t.hasOwnProperty(r)?t[r]:null;if(n){if("reset"===r){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(t){return"string"!=typeof t})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=s[r];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");e[r]=n}else e[r]=s[r]}a(e)},o.reset=function(){a(s)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return n}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=n,o.tags.close=i),o.reset()},"./node_modules/ansi-regex/index.js":t=>{"use strict";t.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/auto-bind/index.js":t=>{"use strict";t.exports=(t,{include:e,exclude:s}={})=>{const r=t=>{const r=e=>"string"==typeof e?t===e:e.test(t);return e?e.some(r):!s||!s.some(r)};for(const[e,s]of(t=>{const e=new Set;do{for(const s of Reflect.ownKeys(t))e.add([t,s])}while((t=Reflect.getPrototypeOf(t))&&t!==Object.prototype);return e})(t.constructor.prototype)){if("constructor"===s||!r(s))continue;const n=Reflect.getOwnPropertyDescriptor(e,s);n&&"function"==typeof n.value&&(t[s]=t[s].bind(t))}return t}},"./node_modules/events/events.js":t=>{"use strict";var e,s="object"==typeof Reflect?Reflect:null,r=s&&"function"==typeof s.apply?s.apply:function(t,e,s){return Function.prototype.apply.call(t,e,s)};e=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function i(){i.init.call(this)}t.exports=i,t.exports.once=function(t,e){return new Promise((function(s,r){function n(s){t.removeListener(e,i),r(s)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",n),s([].slice.call(arguments))}m(t,e,i,{once:!0}),"error"!==e&&function(t,e,s){"function"==typeof t.on&&m(t,"error",e,s)}(t,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function l(t){return void 0===t._maxListeners?i.defaultMaxListeners:t._maxListeners}function h(t,e,s,r){var n,i,o,h;if(a(s),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,s.listener?s.listener:s),i=t._events),o=i[e]),void 0===o)o=i[e]=s,++t._eventsCount;else if("function"==typeof o?o=i[e]=r?[s,o]:[o,s]:r?o.unshift(s):o.push(s),(n=l(t))>0&&o.length>n&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=o.length,h=u,console&&console.warn&&console.warn(h)}return t}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,s){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:s},n=u.bind(r);return n.listener=s,r.wrapFn=n,n}function d(t,e,s){var r=t._events;if(void 0===r)return[];var n=r[e];return void 0===n?[]:"function"==typeof n?s?[n.listener||n]:[n]:s?function(t){for(var e=new Array(t.length),s=0;s<e.length;++s)e[s]=t[s].listener||t[s];return e}(n):f(n,n.length)}function p(t){var e=this._events;if(void 0!==e){var s=e[t];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function f(t,e){for(var s=new Array(e),r=0;r<e;++r)s[r]=t[r];return s}function m(t,e,s,r){if("function"==typeof t.on)r.once?t.once(e,s):t.on(e,s);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function n(i){r.once&&t.removeEventListener(e,n),s(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");o=t}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(t){for(var e=[],s=1;s<arguments.length;s++)e.push(arguments[s]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[t];if(void 0===l)return!1;if("function"==typeof l)r(l,this,e);else{var h=l.length,u=f(l,h);for(s=0;s<h;++s)r(u[s],this,e)}return!0},i.prototype.addListener=function(t,e){return h(this,t,e,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(t,e){return h(this,t,e,!0)},i.prototype.once=function(t,e){return a(e),this.on(t,c(this,t,e)),this},i.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,c(this,t,e)),this},i.prototype.removeListener=function(t,e){var s,r,n,i,o;if(a(e),void 0===(r=this._events))return this;if(void 0===(s=r[t]))return this;if(s===e||s.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,s.listener||e));else if("function"!=typeof s){for(n=-1,i=s.length-1;i>=0;i--)if(s[i]===e||s[i].listener===e){o=s[i].listener,n=i;break}if(n<0)return this;0===n?s.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(s,n),1===s.length&&(r[t]=s[0]),void 0!==r.removeListener&&this.emit("removeListener",t,o||e)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(t){var e,s,r;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[t]),this;if(0===arguments.length){var n,i=Object.keys(s);for(r=0;r<i.length;++r)"removeListener"!==(n=i[r])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=s[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},i.prototype.listeners=function(t){return d(this,t,!0)},i.prototype.rawListeners=function(t){return d(this,t,!1)},i.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{CSSPlugin:()=>_t,_createElement:()=>k,_getBBox:()=>z,checkPrefix:()=>q,default:()=>_t});var r,n,i,o,a,l,h,u=s("./node_modules/gsap/gsap-core.js"),c={},d=180/Math.PI,p=Math.PI/180,f=Math.atan2,m=/([A-Z])/g,g=/(?:left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,_={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},y=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},b=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},w=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},x=function(t,e){var s=e.s+e.c*t;e.set(e.t,e.p,~~(s+(s<0?-.5:.5))+e.u,e)},j=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},E=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},T=function(t,e,s){return t.style[e]=s},A=function(t,e,s){return t.style.setProperty(e,s)},C=function(t,e,s){return t._gsap[e]=s},S=function(t,e,s){return t._gsap.scaleX=t._gsap.scaleY=s},M=function(t,e,s,r,n){var i=t._gsap;i.scaleX=i.scaleY=s,i.renderTransform(n,i)},O=function(t,e,s,r,n){var i=t._gsap;i[e]=s,i.renderTransform(n,i)},L="transform",P=L+"Origin",k=function(t,e){var s=n.createElementNS?n.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):n.createElement(t);return s.style?s:n.createElement(t)},R=function t(e,s,r){var n=getComputedStyle(e);return n[s]||n.getPropertyValue(s.replace(m,"-$1").toLowerCase())||n.getPropertyValue(s)||!r&&t(e,q(s)||s,1)||""},D="O,Moz,ms,Ms,Webkit".split(","),q=function(t,e,s){var r=(e||a).style,n=5;if(t in r&&!s)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(D[n]+t in r););return n<0?null:(3===n?"ms":n>=0?D[n]:"")+t},F=function(){"undefined"!=typeof window&&window.document&&(r=window,n=r.document,i=n.documentElement,a=k("div")||{style:{}},k("div"),L=q(L),P=L+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",h=!!q("perspective"),o=1)},N=function t(e){var s,r=k("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(r),r.appendChild(this),this.style.display="block",e)try{s=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(s=this._gsapBBox());return n&&(o?n.insertBefore(this,o):n.appendChild(this)),i.removeChild(r),this.style.cssText=a,s},I=function(t,e){for(var s=e.length;s--;)if(t.hasAttribute(e[s]))return t.getAttribute(e[s])},z=function(t){var e;try{e=t.getBBox()}catch(s){e=N.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===N||(e=N.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+I(t,["x","cx","x1"])||0,y:+I(t,["y","cy","y1"])||0,width:0,height:0}},U=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!z(t))},B=function(t,e){if(e){var s=t.style;e in c&&e!==P&&(e=L),s.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),s.removeProperty(e.replace(m,"-$1").toLowerCase())):s.removeAttribute(e)}},V=function(t,e,s,r,n,i){var o=new u.PropTween(t._pt,e,s,0,1,i?E:j);return t._pt=o,o.b=r,o.e=n,t._props.push(s),o},G={deg:1,rad:1,turn:1},W=function t(e,s,r,i){var o,l,h,d,p=parseFloat(r)||0,f=(r+"").trim().substr((p+"").length)||"px",m=a.style,v=g.test(s),_="svg"===e.tagName.toLowerCase(),y=(_?"client":"offset")+(v?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===f||!p||G[i]||G[f]?p:("px"!==f&&!w&&(p=t(e,s,r,"px")),d=e.getCTM&&U(e),!x&&"%"!==f||!c[s]&&!~s.indexOf("adius")?(m[v?"width":"height"]=b+(w?f:i),l=~s.indexOf("adius")||"em"===i&&e.appendChild&&!_?e:e.parentNode,d&&(l=(e.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(h=l._gsap)&&x&&h.width&&v&&h.time===u._ticker.time?(0,u._round)(p/h.width*b):((x||"%"===f)&&(m.position=R(e,"position")),l===e&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",v&&x&&((h=(0,u._getCache)(l)).time=u._ticker.time,h.width=l[y]),(0,u._round)(w?o*p/b:o&&p?b/o*p:0))):(o=d?e.getBBox()[v?"width":"height"]:e[y],(0,u._round)(x?p/o*b:p/100*o)))},H=function(t,e,s,r){var n;return o||F(),e in _&&"transform"!==e&&~(e=_[e]).indexOf(",")&&(e=e.split(",")[0]),c[e]&&"transform"!==e?(n=rt(t,r),n="transformOrigin"!==e?n[e]:nt(R(t,P))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||r||~(n+"").indexOf("calc("))&&(n=Q[e]&&Q[e](t,e,s)||R(t,e)||(0,u._getProperty)(t,e)||("opacity"===e?1:0)),s&&!~(n+"").trim().indexOf(" ")?W(t,e,n,s)+s:n},Y=function(t,e,s,r){if(!s||"none"===s){var n=q(e,t,1),i=n&&R(t,n,1);i&&i!==s?(e=n,s=i):"borderColor"===e&&(s=R(t,"borderTopColor"))}var o,a,l,h,c,d,p,f,m,g,v,_,y=new u.PropTween(this._pt,t.style,e,0,1,u._renderComplexString),b=0,w=0;if(y.b=s,y.e=r,s+="","auto"===(r+="")&&(t.style[e]=r,r=R(t,e)||r,t.style[e]=s),o=[s,r],(0,u._colorStringFilter)(o),r=o[1],l=(s=o[0]).match(u._numWithUnitExp)||[],(r.match(u._numWithUnitExp)||[]).length){for(;a=u._numWithUnitExp.exec(r);)p=a[0],m=r.substring(b,a.index),c?c=(c+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(c=1),p!==(d=l[w++]||"")&&(h=parseFloat(d)||0,v=d.substr((h+"").length),(_="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),g=p.substr((f+"").length),b=u._numWithUnitExp.lastIndex-g.length,g||(g=g||u._config.units[e]||v,b===r.length&&(r+=g,y.e+=g)),v!==g&&(h=W(t,e,d,g)||0),y._pt={_next:y._pt,p:m||1===w?m:",",s:h,c:_?_*f:f-h,m:c&&c<4||"zIndex"===e?Math.round:0});y.c=b<r.length?r.substring(b,r.length):""}else y.r="display"===e&&"none"===r?E:j;return u._relExp.test(r)&&(y.e=0),this._pt=y,y},X={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},$=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var s,r,n,i=e.t,o=i.style,a=e.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",r=1;else for(n=(a=a.split(",")).length;--n>-1;)s=a[n],c[s]&&(r=1,s="transformOrigin"===s?P:L),B(i,s);r&&(B(i,L),l&&(l.svg&&i.removeAttribute("transform"),rt(i,1),l.uncache=1))}},Q={clearProps:function(t,e,s,r,n){if("isFromStart"!==n.data){var i=t._pt=new u.PropTween(t._pt,e,s,0,0,$);return i.u=r,i.pr=-10,i.tween=n,t._props.push(s),1}}},Z=[1,0,0,1,0,0],J={},K=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},tt=function(t){var e=R(t,L);return K(e)?Z:e.substr(7).match(u._numExp).map(u._round)},et=function(t,e){var s,r,n,o,a=t._gsap||(0,u._getCache)(t),l=t.style,h=tt(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(h=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?Z:h:(h!==Z||t.offsetParent||t===i||a.svg||(n=l.display,l.display="block",(s=t.parentNode)&&t.offsetParent||(o=1,r=t.nextSibling,i.appendChild(t)),h=tt(t),n?l.display=n:B(t,"display"),o&&(r?s.insertBefore(t,r):s?s.appendChild(t):i.removeChild(t))),e&&h.length>6?[h[0],h[1],h[4],h[5],h[12],h[13]]:h)},st=function(t,e,s,r,n,i){var o,a,l,h=t._gsap,u=n||et(t,!0),c=h.xOrigin||0,d=h.yOrigin||0,p=h.xOffset||0,f=h.yOffset||0,m=u[0],g=u[1],v=u[2],_=u[3],y=u[4],b=u[5],w=e.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;s?u!==Z&&(a=m*_-g*v)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=l):(x=(o=z(t)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),r||!1!==r&&h.smooth?(y=x-c,b=j-d,h.xOffset=p+(y*m+b*v)-y,h.yOffset=f+(y*g+b*_)-b):h.xOffset=h.yOffset=0,h.xOrigin=x,h.yOrigin=j,h.smooth=!!r,h.origin=e,h.originIsAbsolute=!!s,t.style[P]="0px 0px",i&&(V(i,h,"xOrigin",c,x),V(i,h,"yOrigin",d,j),V(i,h,"xOffset",p,h.xOffset),V(i,h,"yOffset",f,h.yOffset)),t.setAttribute("data-svg-origin",x+" "+j)},rt=function(t,e){var s=t._gsap||new u.GSCache(t);if("x"in s&&!e&&!s.uncache)return s;var r,n,i,o,a,l,c,m,g,v,_,y,b,w,x,j,E,T,A,C,S,M,O,k,D,q,F,N,I,z,B,V,G=t.style,W=s.scaleX<0,H="px",Y="deg",X=R(t,P)||"0";return r=n=i=l=c=m=g=v=_=0,o=a=1,s.svg=!(!t.getCTM||!U(t)),w=et(t,s.svg),s.svg&&(k=!s.uncache&&!e&&t.getAttribute("data-svg-origin"),st(t,k||X,!!k||s.originIsAbsolute,!1!==s.smooth,w)),y=s.xOrigin||0,b=s.yOrigin||0,w!==Z&&(T=w[0],A=w[1],C=w[2],S=w[3],r=M=w[4],n=O=w[5],6===w.length?(o=Math.sqrt(T*T+A*A),a=Math.sqrt(S*S+C*C),l=T||A?f(A,T)*d:0,(g=C||S?f(C,S)*d+l:0)&&(a*=Math.abs(Math.cos(g*p))),s.svg&&(r-=y-(y*T+b*C),n-=b-(y*A+b*S))):(V=w[6],z=w[7],F=w[8],N=w[9],I=w[10],B=w[11],r=w[12],n=w[13],i=w[14],c=(x=f(V,I))*d,x&&(k=M*(j=Math.cos(-x))+F*(E=Math.sin(-x)),D=O*j+N*E,q=V*j+I*E,F=M*-E+F*j,N=O*-E+N*j,I=V*-E+I*j,B=z*-E+B*j,M=k,O=D,V=q),m=(x=f(-C,I))*d,x&&(j=Math.cos(-x),B=S*(E=Math.sin(-x))+B*j,T=k=T*j-F*E,A=D=A*j-N*E,C=q=C*j-I*E),l=(x=f(A,T))*d,x&&(k=T*(j=Math.cos(x))+A*(E=Math.sin(x)),D=M*j+O*E,A=A*j-T*E,O=O*j-M*E,T=k,M=D),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,m=180-m),o=(0,u._round)(Math.sqrt(T*T+A*A+C*C)),a=(0,u._round)(Math.sqrt(O*O+V*V)),x=f(M,O),g=Math.abs(x)>2e-4?x*d:0,_=B?1/(B<0?-B:B):0),s.svg&&(k=t.getAttribute("transform"),s.forceCSS=t.setAttribute("transform","")||!K(R(t,L)),k&&t.setAttribute("transform",k))),Math.abs(g)>90&&Math.abs(g)<270&&(W?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),s.x=r-((s.xPercent=r&&(s.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*s.xPercent/100:0)+H,s.y=n-((s.yPercent=n&&(s.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*s.yPercent/100:0)+H,s.z=i+H,s.scaleX=(0,u._round)(o),s.scaleY=(0,u._round)(a),s.rotation=(0,u._round)(l)+Y,s.rotationX=(0,u._round)(c)+Y,s.rotationY=(0,u._round)(m)+Y,s.skewX=g+Y,s.skewY=v+Y,s.transformPerspective=_+H,(s.zOrigin=parseFloat(X.split(" ")[2])||0)&&(G[P]=nt(X)),s.xOffset=s.yOffset=0,s.force3D=u._config.force3D,s.renderTransform=s.svg?ct:h?ut:ot,s.uncache=0,s},nt=function(t){return(t=t.split(" "))[0]+" "+t[1]},it=function(t,e,s){var r=(0,u.getUnit)(e);return(0,u._round)(parseFloat(e)+parseFloat(W(t,"x",s+"px",r)))+r},ot=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,ut(t,e)},at="0deg",lt="0px",ht=") ",ut=function(t,e){var s=e||this,r=s.xPercent,n=s.yPercent,i=s.x,o=s.y,a=s.z,l=s.rotation,h=s.rotationY,u=s.rotationX,c=s.skewX,d=s.skewY,f=s.scaleX,m=s.scaleY,g=s.transformPerspective,v=s.force3D,_=s.target,y=s.zOrigin,b="",w="auto"===v&&t&&1!==t||!0===v;if(y&&(u!==at||h!==at)){var x,j=parseFloat(h)*p,E=Math.sin(j),T=Math.cos(j);j=parseFloat(u)*p,x=Math.cos(j),i=it(_,i,E*x*-y),o=it(_,o,-Math.sin(j)*-y),a=it(_,a,T*x*-y+y)}g!==lt&&(b+="perspective("+g+ht),(r||n)&&(b+="translate("+r+"%, "+n+"%) "),(w||i!==lt||o!==lt||a!==lt)&&(b+=a!==lt||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ht),l!==at&&(b+="rotate("+l+ht),h!==at&&(b+="rotateY("+h+ht),u!==at&&(b+="rotateX("+u+ht),c===at&&d===at||(b+="skew("+c+", "+d+ht),1===f&&1===m||(b+="scale("+f+", "+m+ht),_.style[L]=b||"translate(0, 0)"},ct=function(t,e){var s,r,n,i,o,a=e||this,l=a.xPercent,h=a.yPercent,c=a.x,d=a.y,f=a.rotation,m=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,T=parseFloat(c),A=parseFloat(d);f=parseFloat(f),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),f+=g),f||m?(f*=p,m*=p,s=Math.cos(f)*v,r=Math.sin(f)*v,n=Math.sin(f-m)*-_,i=Math.cos(f-m)*_,m&&(g*=p,o=Math.tan(m-g),n*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),s*=o=Math.sqrt(1+o*o),r*=o)),s=(0,u._round)(s),r=(0,u._round)(r),n=(0,u._round)(n),i=(0,u._round)(i)):(s=v,i=_,r=n=0),(T&&!~(c+"").indexOf("px")||A&&!~(d+"").indexOf("px"))&&(T=W(y,"x",c,"px"),A=W(y,"y",d,"px")),(b||w||x||j)&&(T=(0,u._round)(T+b-(b*s+w*n)+x),A=(0,u._round)(A+w-(b*r+w*i)+j)),(l||h)&&(o=y.getBBox(),T=(0,u._round)(T+l/100*o.width),A=(0,u._round)(A+h/100*o.height)),o="matrix("+s+","+r+","+n+","+i+","+T+","+A+")",y.setAttribute("transform",o),E&&(y.style[L]=o)},dt=function(t,e,s,r,n,i){var o,a,l=360,h=(0,u._isString)(n),c=parseFloat(n)*(h&&~n.indexOf("rad")?d:1),p=i?c*i:c-r,f=r+p+"deg";return h&&("short"===(o=n.split("_")[1])&&(p%=l)!==p%180&&(p+=p<0?l:-360),"cw"===o&&p<0?p=(p+36e9)%l-~~(p/l)*l:"ccw"===o&&p>0&&(p=(p-36e9)%l-~~(p/l)*l)),t._pt=a=new u.PropTween(t._pt,e,s,r,p,b),a.e=f,a.u="deg",t._props.push(s),a},pt=function(t,e){for(var s in e)t[s]=e[s];return t},ft=function(t,e,s){var r,n,i,o,a,l,h,d=pt({},s._gsap),p=s.style;for(n in d.svg?(i=s.getAttribute("transform"),s.setAttribute("transform",""),p[L]=e,r=rt(s,1),B(s,L),s.setAttribute("transform",i)):(i=getComputedStyle(s)[L],p[L]=e,r=rt(s,1),p[L]=i),c)(i=d[n])!==(o=r[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=(0,u.getUnit)(i)!==(h=(0,u.getUnit)(o))?W(s,n,i,h):parseFloat(i),l=parseFloat(o),t._pt=new u.PropTween(t._pt,r,n,a,l-a,y),t._pt.u=h||0,t._props.push(n));pt(r,d)};(0,u._forEachName)("padding,margin,Width,Radius",(function(t,e){var s="Top",r="Right",n="Bottom",i="Left",o=(e<3?[s,r,n,i]:[s+i,s+r,n+r,n+i]).map((function(s){return e<2?t+s:"border"+s+t}));Q[e>1?"border"+t:t]=function(t,e,s,r,n){var i,a;if(arguments.length<4)return i=o.map((function(e){return H(t,e,s)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(r+"").split(" "),a={},o.forEach((function(t,e){return a[t]=i[e]=i[e]||i[(e-1)/2|0]})),t.init(e,a,n)}}));var mt,gt,vt,_t={name:"css",register:F,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,s,r,n){var i,a,l,h,d,p,f,m,g,b,j,E,T,A,C,S,M,O,P,k=this._props,R=t.style,D=s.vars.startAt;for(f in o||F(),e)if("autoRound"!==f&&(a=e[f],!u._plugins[f]||!(0,u._checkPlugin)(f,e,s,r,t,n)))if(d=typeof a,p=Q[f],"function"===d&&(d=typeof(a=a.call(s,r,t,n))),"string"===d&&~a.indexOf("random(")&&(a=(0,u._replaceRandom)(a)),p)p(this,t,f,a,s)&&(C=1);else if("--"===f.substr(0,2))i=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",u._colorExp.lastIndex=0,u._colorExp.test(i)||(m=(0,u.getUnit)(i),g=(0,u.getUnit)(a)),g?m!==g&&(i=W(t,f,i,g)+g):m&&(a+=m),this.add(R,"setProperty",i,a,r,n,0,0,f);else if("undefined"!==d){if(D&&f in D?(i="function"==typeof D[f]?D[f].call(s,r,t,n):D[f],f in u._config.units&&!(0,u.getUnit)(i)&&(i+=u._config.units[f]),"="===(i+"").charAt(1)&&(i=H(t,f))):i=H(t,f),h=parseFloat(i),(b="string"===d&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),l=parseFloat(a),f in _&&("autoAlpha"===f&&(1===h&&"hidden"===H(t,"visibility")&&l&&(h=0),V(this,R,"visibility",h?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=_[f]).indexOf(",")&&(f=f.split(",")[0])),j=f in c)if(E||((T=t._gsap).renderTransform&&!e.parseTransform||rt(t,e.parseTransform),A=!1!==e.smoothOrigin&&T.smooth,(E=this._pt=new u.PropTween(this._pt,R,L,0,1,T.renderTransform,T,0,-1)).dep=1),"scale"===f)this._pt=new u.PropTween(this._pt,T,"scaleY",T.scaleY,b?b*l:l-T.scaleY),k.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M=void 0,O=void 0,P=void 0,M=(S=a).split(" "),O=M[0],P=M[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==P&&"right"!==P||(S=O,O=P,P=S),M[0]=X[O]||O,M[1]=X[P]||P,a=M.join(" "),T.svg?st(t,a,0,A,0,this):((g=parseFloat(a.split(" ")[2])||0)!==T.zOrigin&&V(this,T,"zOrigin",T.zOrigin,g),V(this,R,f,nt(i),nt(a)));continue}if("svgOrigin"===f){st(t,a,1,A,0,this);continue}if(f in J){dt(this,T,f,h,a,b);continue}if("smoothOrigin"===f){V(this,T,"smooth",T.smooth,a);continue}if("force3D"===f){T[f]=a;continue}if("transform"===f){ft(this,a,t);continue}}else f in R||(f=q(f)||f);if(j||(l||0===l)&&(h||0===h)&&!v.test(a)&&f in R)l||(l=0),(m=(i+"").substr((h+"").length))!==(g=(0,u.getUnit)(a)||(f in u._config.units?u._config.units[f]:m))&&(h=W(t,f,i,g)),this._pt=new u.PropTween(this._pt,j?T:R,f,h,b?b*l:l-h,j||"px"!==g&&"zIndex"!==f||!1===e.autoRound?y:x),this._pt.u=g||0,m!==g&&(this._pt.b=i,this._pt.r=w);else if(f in R)Y.call(this,t,f,i,a);else{if(!(f in t)){(0,u._missingPlugin)(f,a);continue}this.add(t,f,t[f],a,r,n)}k.push(f)}C&&(0,u._sortPropTweensByPriority)(this)},get:H,aliases:_,getSetter:function(t,e,s){var r=_[e];return r&&r.indexOf(",")<0&&(e=r),e in c&&e!==P&&(t._gsap.x||H(t,"x"))?s&&l===s?"scale"===e?S:C:(l=s||{})&&("scale"===e?M:O):t.style&&!(0,u._isUndefined)(t.style[e])?T:~e.indexOf("-")?A:(0,u._getSetter)(t,e)},core:{_removeProperty:B,_getMatrix:et}};u.gsap.utils.checkPrefix=q,mt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",gt="rotation,rotationX,rotationY,skewX,skewY",vt=(0,u._forEachName)(mt+","+gt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){c[t]=1})),(0,u._forEachName)(gt,(function(t){u._config.units[t]="deg",J[t]=1})),_[vt[13]]=mt+","+gt,(0,u._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");_[e[1]]=vt[e[0]]})),(0,u._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){u._config.units[t]="px"})),u.gsap.registerPlugin(_t)},"./node_modules/gsap/gsap-core.js":(t,e,s)=>{"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function n(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}s.r(e),s.d(e,{Animation:()=>Qe,Back:()=>Fs,Bounce:()=>Is,Circ:()=>Bs,Cubic:()=>Ps,Elastic:()=>qs,Expo:()=>Us,GSCache:()=>$e,Linear:()=>Os,Power0:()=>Ts,Power1:()=>As,Power2:()=>Cs,Power3:()=>Ss,Power4:()=>Ms,PropTween:()=>bs,Quad:()=>Ls,Quart:()=>ks,Quint:()=>Rs,Sine:()=>zs,SteppedEase:()=>Ns,Strong:()=>Ds,Timeline:()=>Ze,TimelineLite:()=>Ze,TimelineMax:()=>Ze,Tween:()=>os,TweenLite:()=>os,TweenMax:()=>os,_checkPlugin:()=>es,_colorExp:()=>ke,_colorStringFilter:()=>De,_config:()=>k,_forEachName:()=>Et,_getCache:()=>xt,_getProperty:()=>jt,_getSetter:()=>cs,_isString:()=>V,_isUndefined:()=>H,_missingPlugin:()=>ht,_numExp:()=>tt,_numWithUnitExp:()=>et,_plugins:()=>gt,_relExp:()=>rt,_removeLinkedListItem:()=>Nt,_renderComplexString:()=>fs,_replaceRandom:()=>we,_round:()=>Tt,_roundModifier:()=>de,_setDefaults:()=>Pt,_sortPropTweensByPriority:()=>ys,_ticker:()=>qe,clamp:()=>ie,default:()=>Es,distribute:()=>ce,getUnit:()=>ne,gsap:()=>Es,interpolate:()=>je,mapRange:()=>xe,normalize:()=>ve,pipe:()=>me,random:()=>fe,shuffle:()=>ue,snap:()=>pe,splitColor:()=>Oe,toArray:()=>he,unitize:()=>ge,wrap:()=>ye,wrapYoyo:()=>be});var i,o,a,l,h,u,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T,A,C,S,M,O,L,P,k={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},R={duration:.5,overwrite:!1,delay:0},D=1e8,q=1e-8,F=2*Math.PI,N=F/4,I=0,z=Math.sqrt,U=Math.cos,B=Math.sin,V=function(t){return"string"==typeof t},G=function(t){return"function"==typeof t},W=function(t){return"number"==typeof t},H=function(t){return void 0===t},Y=function(t){return"object"==typeof t},X=function(t){return!1!==t},$=function(){return"undefined"!=typeof window},Q=function(t){return G(t)||V(t)},Z="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},J=Array.isArray,K=/(?:-?\.?\d|\.)+/gi,tt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,et=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,st=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,rt=/[+-]=-?[.\d]+/,nt=/[#\-+.]*\b[a-z\d-=+%.]+/gi,it=/[\d.+\-=]+(?:e[-+]\d*)*/i,ot={},at={},lt=function(t){return(at=Rt(t,ot))&&Es},ht=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},ut=function(t,e){return!e&&console.warn(t)},ct=function(t,e){return t&&(ot[t]=e)&&at&&(at[t]=e)||ot},dt=function(){return 0},pt={},ft=[],mt={},gt={},vt={},_t=30,yt=[],bt="",wt=function(t){var e,s,r=t[0];if(Y(r)||G(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(s=yt.length;s--&&!yt[s].targetTest(r););e=yt[s]}for(s=t.length;s--;)t[s]&&(t[s]._gsap||(t[s]._gsap=new $e(t[s],e)))||t.splice(s,1);return t},xt=function(t){return t._gsap||wt(he(t))[0]._gsap},jt=function(t,e,s){return(s=t[e])&&G(s)?t[e]():H(s)&&t.getAttribute&&t.getAttribute(e)||s},Et=function(t,e){return(t=t.split(",")).forEach(e)||t},Tt=function(t){return Math.round(1e5*t)/1e5||0},At=function(t,e){for(var s=e.length,r=0;t.indexOf(e[r])<0&&++r<s;);return r<s},Ct=function(t,e,s){var r,n=W(t[1]),i=(n?2:1)+(e<2?0:1),o=t[i];if(n&&(o.duration=t[1]),o.parent=s,e){for(r=o;s&&!("immediateRender"in r);)r=s.vars.defaults||{},s=X(s.vars.inherit)&&s.parent;o.immediateRender=X(r.immediateRender),e<2?o.runBackwards=1:o.startAt=t[i-1]}return o},St=function(){var t,e,s=ft.length,r=ft.slice(0);for(mt={},ft.length=0,t=0;t<s;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Mt=function(t,e,s,r){ft.length&&St(),t.render(e,s,r),ft.length&&St()},Ot=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(nt).length<2?e:V(t)?t.trim():t},Lt=function(t){return t},Pt=function(t,e){for(var s in e)s in t||(t[s]=e[s]);return t},kt=function(t,e){for(var s in e)s in t||"duration"===s||"ease"===s||(t[s]=e[s])},Rt=function(t,e){for(var s in e)t[s]=e[s];return t},Dt=function t(e,s){for(var r in s)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=Y(s[r])?t(e[r]||(e[r]={}),s[r]):s[r]);return e},qt=function(t,e){var s,r={};for(s in t)s in e||(r[s]=t[s]);return r},Ft=function(t){var e=t.parent||o,s=t.keyframes?kt:Pt;if(X(t.inherit))for(;e;)s(t,e.vars.defaults),e=e.parent||e._dp;return t},Nt=function(t,e,s,r){void 0===s&&(s="_first"),void 0===r&&(r="_last");var n=e._prev,i=e._next;n?n._next=i:t[s]===e&&(t[s]=i),i?i._prev=n:t[r]===e&&(t[r]=n),e._next=e._prev=e.parent=null},It=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},zt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var s=t;s;)s._dirty=1,s=s.parent;return t},Ut=function t(e){return!e||e._ts&&t(e.parent)},Bt=function(t){return t._repeat?Vt(t._tTime,t=t.duration()+t._rDelay)*t:0},Vt=function(t,e){var s=Math.floor(t/=e);return t&&s===t?s-1:s},Gt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Wt=function(t){return t._end=Tt(t._start+(t._tDur/Math.abs(t._ts||t._rts||q)||0))},Ht=function(t,e){var s=t._dp;return s&&s.smoothChildTiming&&t._ts&&(t._start=Tt(s._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Wt(t),s._dirty||zt(s,t)),t},Yt=function(t,e){var s;if((e._time||e._initted&&!e._dur)&&(s=Gt(t.rawTime(),e),(!e._dur||re(0,e.totalDuration(),s)-e._tTime>q)&&e.render(s,!0)),zt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(s=t;s._dp;)s.rawTime()>=0&&s.totalTime(s._tTime),s=s._dp;t._zTime=-1e-8}},Xt=function(t,e,s,r){return e.parent&&It(e),e._start=Tt(s+e._delay),e._end=Tt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,s,r,n){void 0===s&&(s="_first"),void 0===r&&(r="_last");var i,o=t[r];if(n)for(i=e[n];o&&o[n]>i;)o=o._prev;o?(e._next=o._next,o._next=e):(e._next=t[s],t[s]=e),e._next?e._next._prev=e:t[r]=e,e._prev=o,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),t._recent=e,r||Yt(t,e),t},$t=function(t,e){return(ot.ScrollTrigger||ht("scrollTrigger",e))&&ot.ScrollTrigger.create(e,t)},Qt=function(t,e,s,r){return ss(t,e),t._initted?!s&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&c!==qe.frame?(ft.push(t),t._lazy=[e,r],1):void 0:1},Zt=function t(e){var s=e.parent;return s&&s._ts&&s._initted&&!s._lock&&(s.rawTime()<0||t(s))},Jt=function(t,e,s,r){var n=t._repeat,i=Tt(e)||0,o=t._tTime/t._tDur;return o&&!r&&(t._time*=i/t._dur),t._dur=i,t._tDur=n?n<0?1e10:Tt(i*(n+1)+t._rDelay*n):i,o&&!r?Ht(t,t._tTime=t._tDur*o):t.parent&&Wt(t),s||zt(t.parent,t),t},Kt=function(t){return t instanceof Ze?zt(t):Jt(t,t._dur)},te={_start:0,endTime:dt},ee=function t(e,s){var r,n,i=e.labels,o=e._recent||te,a=e.duration()>=D?o.endTime(!1):e._dur;return V(s)&&(isNaN(s)||s in i)?"<"===(r=s.charAt(0))||">"===r?("<"===r?o._start:o.endTime(o._repeat>=0))+(parseFloat(s.substr(1))||0):(r=s.indexOf("="))<0?(s in i||(i[s]=a),i[s]):(n=+(s.charAt(r-1)+s.substr(r+1)),r>1?t(e,s.substr(0,r-1))+n:a+n):null==s?a:+s},se=function(t,e){return t||0===t?e(t):e},re=function(t,e,s){return s<t?t:s>e?e:s},ne=function(t){if("string"!=typeof t)return"";var e=it.exec(t);return e?t.substr(e.index+e[0].length):""},ie=function(t,e,s){return se(s,(function(s){return re(t,e,s)}))},oe=[].slice,ae=function(t,e){return t&&Y(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&Y(t[0]))&&!t.nodeType&&t!==a},le=function(t,e,s){return void 0===s&&(s=[]),t.forEach((function(t){var r;return V(t)&&!e||ae(t,1)?(r=s).push.apply(r,he(t)):s.push(t)}))||s},he=function(t,e){return!V(t)||e||!l&&Fe()?J(t)?le(t,e):ae(t)?oe.call(t,0):t?[t]:[]:oe.call(h.querySelectorAll(t),0)},ue=function(t){return t.sort((function(){return.5-Math.random()}))},ce=function(t){if(G(t))return t;var e=Y(t)?t:{each:t},s=Ge(e.ease),r=e.from||0,n=parseFloat(e.base)||0,i={},o=r>0&&r<1,a=isNaN(r)||o,l=e.axis,h=r,u=r;return V(r)?h=u={center:.5,edges:.5,end:1}[r]||0:!o&&a&&(h=r[0],u=r[1]),function(t,o,c){var d,p,f,m,g,v,_,y,b,w=(c||e).length,x=i[w];if(!x){if(!(b="auto"===e.grid?0:(e.grid||[1,D])[1])){for(_=-D;_<(_=c[b++].getBoundingClientRect().left)&&b<w;);b--}for(x=i[w]=[],d=a?Math.min(b,w)*h-.5:r%b,p=a?w*u/b-.5:r/b|0,_=0,y=D,v=0;v<w;v++)f=v%b-d,m=p-(v/b|0),x[v]=g=l?Math.abs("y"===l?m:f):z(f*f+m*m),g>_&&(_=g),g<y&&(y=g);"random"===r&&ue(x),x.max=_-y,x.min=y,x.v=w=(parseFloat(e.amount)||parseFloat(e.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===r?-1:1),x.b=w<0?n-w:n,x.u=ne(e.amount||e.each)||0,s=s&&w<0?Be(s):s}return w=(x[t]-x.min)/x.max||0,Tt(x.b+(s?s(w):w)*x.v)+x.u}},de=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(s){var r=Math.round(parseFloat(s)/t)*t*e;return(r-r%1)/e+(W(s)?0:ne(s))}},pe=function(t,e){var s,r,n=J(t);return!n&&Y(t)&&(s=n=t.radius||D,t.values?(t=he(t.values),(r=!W(t[0]))&&(s*=s)):t=de(t.increment)),se(e,n?G(t)?function(e){return r=t(e),Math.abs(r-e)<=s?r:e}:function(e){for(var n,i,o=parseFloat(r?e.x:e),a=parseFloat(r?e.y:0),l=D,h=0,u=t.length;u--;)(n=r?(n=t[u].x-o)*n+(i=t[u].y-a)*i:Math.abs(t[u]-o))<l&&(l=n,h=u);return h=!s||l<=s?t[h]:e,r||h===e||W(e)?h:h+ne(e)}:de(t))},fe=function(t,e,s,r){return se(J(t)?!e:!0===s?!!(s=0):!r,(function(){return J(t)?t[~~(Math.random()*t.length)]:(s=s||1e-5)&&(r=s<1?Math.pow(10,(s+"").length-2):1)&&Math.floor(Math.round((t-s/2+Math.random()*(e-t+.99*s))/s)*s*r)/r}))},me=function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},ge=function(t,e){return function(s){return t(parseFloat(s))+(e||ne(s))}},ve=function(t,e,s){return xe(t,e,0,1,s)},_e=function(t,e,s){return se(s,(function(s){return t[~~e(s)]}))},ye=function t(e,s,r){var n=s-e;return J(e)?_e(e,t(0,e.length),s):se(r,(function(t){return(n+(t-e)%n)%n+e}))},be=function t(e,s,r){var n=s-e,i=2*n;return J(e)?_e(e,t(0,e.length-1),s):se(r,(function(t){return e+((t=(i+(t-e)%i)%i||0)>n?i-t:t)}))},we=function(t){for(var e,s,r,n,i=0,o="";~(e=t.indexOf("random(",i));)r=t.indexOf(")",e),n="["===t.charAt(e+7),s=t.substr(e+7,r-e-7).match(n?nt:K),o+=t.substr(i,e-i)+fe(n?s:+s[0],n?0:+s[1],+s[2]||1e-5),i=r+1;return o+t.substr(i,t.length-i)},xe=function(t,e,s,r,n){var i=e-t,o=r-s;return se(n,(function(e){return s+((e-t)/i*o||0)}))},je=function t(e,s,r,n){var i=isNaN(e+s)?0:function(t){return(1-t)*e+t*s};if(!i){var o,a,l,h,u,c=V(e),d={};if(!0===r&&(n=1)&&(r=null),c)e={p:e},s={p:s};else if(J(e)&&!J(s)){for(l=[],h=e.length,u=h-2,a=1;a<h;a++)l.push(t(e[a-1],e[a]));h--,i=function(t){t*=h;var e=Math.min(u,~~t);return l[e](t-e)},r=s}else n||(e=Rt(J(e)?[]:{},e));if(!l){for(o in s)ts.call(d,e,o,"get",s[o]);i=function(t){return ms(t,d)||(c?e.p:e)}}}return se(r,i)},Ee=function(t,e,s){var r,n,i,o=t.labels,a=D;for(r in o)(n=o[r]-e)<0==!!s&&n&&a>(n=Math.abs(n))&&(i=r,a=n);return i},Te=function(t,e,s){var r,n,i=t.vars,o=i[e];if(o)return r=i[e+"Params"],n=i.callbackScope||t,s&&ft.length&&St(),r?o.apply(n,r):o.call(n)},Ae=function(t){return It(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&Te(t,"onInterrupt"),t},Ce=255,Se={aqua:[0,Ce,Ce],lime:[0,Ce,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ce],navy:[0,0,128],white:[Ce,Ce,Ce],olive:[128,128,0],yellow:[Ce,Ce,0],orange:[Ce,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ce,0,0],pink:[Ce,192,203],cyan:[0,Ce,Ce],transparent:[Ce,Ce,Ce,0]},Me=function(t,e,s){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(s-e)*t*6:t<.5?s:3*t<2?e+(s-e)*(2/3-t)*6:e)*Ce+.5|0},Oe=function(t,e,s){var r,n,i,o,a,l,h,u,c,d,p=t?W(t)?[t>>16,t>>8&Ce,t&Ce]:0:Se.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Se[t])p=Se[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),n=t.charAt(2),i=t.charAt(3),t="#"+r+r+n+n+i+i+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Ce,p&Ce,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Ce,t&Ce]}else if("hsl"===t.substr(0,3))if(p=d=t.match(K),e){if(~t.indexOf("="))return p=t.match(tt),s&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,r=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Me(o+1/3,r,n),p[1]=Me(o,r,n),p[2]=Me(o-1/3,r,n);else p=t.match(K)||Se.transparent;p=p.map(Number)}return e&&!d&&(r=p[0]/Ce,n=p[1]/Ce,i=p[2]/Ce,l=((h=Math.max(r,n,i))+(u=Math.min(r,n,i)))/2,h===u?o=a=0:(c=h-u,a=l>.5?c/(2-h-u):c/(h+u),o=h===r?(n-i)/c+(n<i?6:0):h===n?(i-r)/c+2:(r-n)/c+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),s&&p.length<4&&(p[3]=1),p},Le=function(t){var e=[],s=[],r=-1;return t.split(ke).forEach((function(t){var n=t.match(et)||[];e.push.apply(e,n),s.push(r+=n.length+1)})),e.c=s,e},Pe=function(t,e,s){var r,n,i,o,a="",l=(t+a).match(ke),h=e?"hsla(":"rgba(",u=0;if(!l)return t;if(l=l.map((function(t){return(t=Oe(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),s&&(i=Le(t),(r=s.c).join(a)!==i.c.join(a)))for(o=(n=t.replace(ke,"1").split(et)).length-1;u<o;u++)a+=n[u]+(~r.indexOf(u)?l.shift()||h+"0,0,0,0)":(i.length?i:l.length?l:s).shift());if(!n)for(o=(n=t.split(ke)).length-1;u<o;u++)a+=n[u]+l[u];return a+n[o]},ke=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Se)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Re=/hsl[a]?\(/,De=function(t){var e,s=t.join(" ");if(ke.lastIndex=0,ke.test(s))return e=Re.test(s),t[1]=Pe(t[1],e),t[0]=Pe(t[0],e,Le(t[1])),!0},qe=(b=Date.now,w=500,x=33,j=b(),E=j,A=T=1e3/240,S=function t(e){var s,r,n,i,o=b()-E,a=!0===e;if(o>w&&(j+=o-x),((s=(n=(E+=o)-j)-A)>0||a)&&(i=++v.frame,_=n-1e3*v.time,v.time=n/=1e3,A+=s+(s>=T?4:T-s),r=1),a||(f=m(t)),r)for(y=0;y<C.length;y++)C[y](n,_,i,e)},v={time:0,frame:0,tick:function(){S(!0)},deltaRatio:function(t){return _/(1e3/(t||60))},wake:function(){u&&(!l&&$()&&(a=l=window,h=a.document||{},ot.gsap=Es,(a.gsapVersions||(a.gsapVersions=[])).push(Es.version),lt(at||a.GreenSockGlobals||!a.gsap&&a||{}),g=a.requestAnimationFrame),f&&v.sleep(),m=g||function(t){return setTimeout(t,A-1e3*v.time+1|0)},p=1,S(2))},sleep:function(){(g?a.cancelAnimationFrame:clearTimeout)(f),p=0,m=dt},lagSmoothing:function(t,e){w=t||1e8,x=Math.min(e,w,0)},fps:function(t){T=1e3/(t||240),A=1e3*v.time+T},add:function(t){C.indexOf(t)<0&&C.push(t),Fe()},remove:function(t){var e;~(e=C.indexOf(t))&&C.splice(e,1)&&y>=e&&y--},_listeners:C=[]}),Fe=function(){return!p&&qe.wake()},Ne={},Ie=/^[\d.\-M][\d.\-,\s]/,ze=/["']/g,Ue=function(t){for(var e,s,r,n={},i=t.substr(1,t.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)s=i[a],e=a!==l-1?s.lastIndexOf(","):s.length,r=s.substr(0,e),n[o]=isNaN(r)?r.replace(ze,"").trim():+r,o=s.substr(e+1).trim();return n},Be=function(t){return function(e){return 1-t(1-e)}},Ve=function t(e,s){for(var r,n=e._first;n;)n instanceof Ze?t(n,s):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===s||(n.timeline?t(n.timeline,s):(r=n._ease,n._ease=n._yEase,n._yEase=r,n._yoyo=s)),n=n._next},Ge=function(t,e){return t&&(G(t)?t:Ne[t]||function(t){var e,s,r,n,i=(t+"").split("("),o=Ne[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Ue(i[1])]:(e=t,s=e.indexOf("(")+1,r=e.indexOf(")"),n=e.indexOf("(",s),e.substring(s,~n&&n<r?e.indexOf(")",r+1):r)).split(",").map(Ot)):Ne._CE&&Ie.test(t)?Ne._CE("",t):o}(t))||e},We=function(t,e,s,r){void 0===s&&(s=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,i={easeIn:e,easeOut:s,easeInOut:r};return Et(t,(function(t){for(var e in Ne[t]=ot[t]=i,Ne[n=t.toLowerCase()]=s,i)Ne[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ne[t+"."+e]=i[e]})),i},He=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ye=function t(e,s,r){var n=s>=1?s:1,i=(r||(e?.3:.45))/(s<1?s:1),o=i/F*(Math.asin(1/n)||0),a=function(t){return 1===t?1:n*Math.pow(2,-10*t)*B((t-o)*i)+1},l="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:He(a);return i=F/i,l.config=function(s,r){return t(e,s,r)},l},Xe=function t(e,s){void 0===s&&(s=1.70158);var r=function(t){return t?--t*t*((s+1)*t+s)+1:0},n="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:He(r);return n.config=function(s){return t(e,s)},n};Et("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var s=e<5?e+1:e;We(t+",Power"+(s-1),e?function(t){return Math.pow(t,s)}:function(t){return t},(function(t){return 1-Math.pow(1-t,s)}),(function(t){return t<.5?Math.pow(2*t,s)/2:1-Math.pow(2*(1-t),s)/2}))})),Ne.Linear.easeNone=Ne.none=Ne.Linear.easeIn,We("Elastic",Ye("in"),Ye("out"),Ye()),M=7.5625,L=1/(O=2.75),We("Bounce",(function(t){return 1-P(1-t)}),P=function(t){return t<L?M*t*t:t<.7272727272727273?M*Math.pow(t-1.5/O,2)+.75:t<.9090909090909092?M*(t-=2.25/O)*t+.9375:M*Math.pow(t-2.625/O,2)+.984375}),We("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),We("Circ",(function(t){return-(z(1-t*t)-1)})),We("Sine",(function(t){return 1===t?1:1-U(t*N)})),We("Back",Xe("in"),Xe("out"),Xe()),Ne.SteppedEase=Ne.steps=ot.SteppedEase={config:function(t,e){void 0===t&&(t=1);var s=1/t,r=t+(e?0:1),n=e?1:0;return function(t){return((r*re(0,.99999999,t)|0)+n)*s}}},R.ease=Ne["quad.out"],Et("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return bt+=t+","+t+"Params,"}));var $e=function(t,e){this.id=I++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:jt,this.set=e?e.getSetter:cs},Qe=function(){function t(t,e){var s=t.parent||o;this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Jt(this,+t.duration,1,1),this.data=t.data,p||qe.wake(),s&&Xt(s,this,e||0===e?e:s._time,1),t.reversed&&this.reverse(),t.paused&&this.paused(!0)}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Jt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Fe(),!arguments.length)return this._tTime;var s=this._dp;if(s&&s.smoothChildTiming&&this._ts){for(Ht(this,t),!s._dp||s.parent||Yt(s,this);s.parent;)s.parent._time!==s._start+(s._ts>=0?s._tTime/s._ts:(s.totalDuration()-s._tTime)/-s._ts)&&s.totalTime(s._tTime,!0),s=s.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Xt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===q||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Mt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Bt(this))%this._dur||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Bt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var s=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*s,e):this._repeat?Vt(this._tTime,s)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Gt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this.totalTime(re(-this._delay,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Fe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&(this._tTime-=q)&&Math.abs(this._zTime)!==q))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Xt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(X(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Gt(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,s=arguments.length?t:e.rawTime();e;)s=e._start+s/(e._ts||1),e=e._dp;return s},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Kt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){return arguments.length?(this._rDelay=t,Kt(this)):this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(ee(this,t),X(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,X(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,s=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=s&&t<this.endTime(!0)-q))},e.eventCallback=function(t,e,s){var r=this.vars;return arguments.length>1?(e?(r[t]=e,s&&(r[t+"Params"]=s),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(s){var r=G(t)?t:Lt,n=function(){var t=e.then;e.then=null,G(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),s(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){Ae(this)},t}();Pt(Qe.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Ze=function(t){function e(e,s){var n;return void 0===e&&(e={}),(n=t.call(this,e,s)||this).labels={},n.smoothChildTiming=!!e.smoothChildTiming,n.autoRemoveChildren=!!e.autoRemoveChildren,n._sort=X(e.sortChildren),n.parent&&Yt(n.parent,r(n)),e.scrollTrigger&&$t(r(n),e.scrollTrigger),n}n(e,t);var s=e.prototype;return s.to=function(t,e,s){return new os(t,Ct(arguments,0,this),ee(this,W(e)?arguments[3]:s)),this},s.from=function(t,e,s){return new os(t,Ct(arguments,1,this),ee(this,W(e)?arguments[3]:s)),this},s.fromTo=function(t,e,s,r){return new os(t,Ct(arguments,2,this),ee(this,W(e)?arguments[4]:r)),this},s.set=function(t,e,s){return e.duration=0,e.parent=this,Ft(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new os(t,e,ee(this,s),1),this},s.call=function(t,e,s){return Xt(this,os.delayedCall(0,t,e),ee(this,s))},s.staggerTo=function(t,e,s,r,n,i,o){return s.duration=e,s.stagger=s.stagger||r,s.onComplete=i,s.onCompleteParams=o,s.parent=this,new os(t,s,ee(this,n)),this},s.staggerFrom=function(t,e,s,r,n,i,o){return s.runBackwards=1,Ft(s).immediateRender=X(s.immediateRender),this.staggerTo(t,e,s,r,n,i,o)},s.staggerFromTo=function(t,e,s,r,n,i,o,a){return r.startAt=s,Ft(r).immediateRender=X(r.immediateRender),this.staggerTo(t,e,r,n,i,o,a)},s.render=function(t,e,s){var r,n,i,a,l,h,u,c,d,p,f,m,g=this._time,v=this._dirty?this.totalDuration():this._tDur,_=this._dur,y=this!==o&&t>v-q&&t>=0?v:t<q?0:t,b=this._zTime<0!=t<0&&(this._initted||!_);if(y!==this._tTime||s||b){if(g!==this._time&&_&&(y+=this._time-g,t+=this._time-g),r=y,d=this._start,h=!(c=this._ts),b&&(_||(g=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,l=_+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,s);if(r=Tt(y%l),y===v?(a=this._repeat,r=_):((a=~~(y/l))&&a===y/l&&(r=_,a--),r>_&&(r=_)),p=Vt(this._tTime,l),!g&&this._tTime&&p!==a&&(p=a),f&&1&a&&(r=_-r,m=1),a!==p&&!this._lock){var w=f&&1&p,x=w===(f&&1&a);if(a<p&&(w=!w),g=w?0:_,this._lock=1,this.render(g||(m?0:Tt(a*l)),e,!_)._lock=0,!e&&this.parent&&Te(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),g&&g!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,v=this._tDur,x&&(this._lock=2,g=w?_:-1e-4,this.render(g,!0)),this._lock=0,!this._ts&&!h)return this;Ve(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,s){var r;if(s>e)for(r=t._first;r&&r._start<=s;){if(!r._dur&&"isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=s;){if(!r._dur&&"isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,Tt(g),Tt(r)),u&&(y-=r-(r=u._start))),this._tTime=y,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,g=0),!g&&r&&!e&&Te(this,"onStart"),r>=g&&t>=0)for(n=this._first;n;){if(i=n._next,(n._act||r>=n._start)&&n._ts&&u!==n){if(n.parent!==this)return this.render(t,e,s);if(n.render(n._ts>0?(r-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(r-n._start)*n._ts,e,s),r!==this._time||!this._ts&&!h){u=0,i&&(y+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var j=t<0?t:r;n;){if(i=n._prev,(n._act||j<=n._end)&&n._ts&&u!==n){if(n.parent!==this)return this.render(t,e,s);if(n.render(n._ts>0?(j-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(j-n._start)*n._ts,e,s),r!==this._time||!this._ts&&!h){u=0,i&&(y+=this._zTime=j?-1e-8:q);break}}n=i}}if(u&&!e&&(this.pause(),u.render(r>=g?0:-1e-8)._zTime=r>=g?1:-1,this._ts))return this._start=d,Wt(this),this.render(t,e,s);this._onUpdate&&!e&&Te(this,"onUpdate",!0),(y===v&&v>=this.totalDuration()||!y&&g)&&(d!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!_)&&(y===v&&this._ts>0||!y&&this._ts<0)&&It(this,1),e||t<0&&!g||!y&&!g||(Te(this,y===v?"onComplete":"onReverseComplete",!0),this._prom&&!(y<v&&this.timeScale()>0)&&this._prom())))}return this},s.add=function(t,e){var s=this;if(W(e)||(e=ee(this,e)),!(t instanceof Qe)){if(J(t))return t.forEach((function(t){return s.add(t,e)})),this;if(V(t))return this.addLabel(t,e);if(!G(t))return this;t=os.delayedCall(0,t)}return this!==t?Xt(this,t,e):this},s.getChildren=function(t,e,s,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===s&&(s=!0),void 0===r&&(r=-D);for(var n=[],i=this._first;i;)i._start>=r&&(i instanceof os?e&&n.push(i):(s&&n.push(i),t&&n.push.apply(n,i.getChildren(!0,e,s)))),i=i._next;return n},s.getById=function(t){for(var e=this.getChildren(1,1,1),s=e.length;s--;)if(e[s].vars.id===t)return e[s]},s.remove=function(t){return V(t)?this.removeLabel(t):G(t)?this.killTweensOf(t):(Nt(this,t),t===this._recent&&(this._recent=this._last),zt(this))},s.totalTime=function(e,s){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Tt(qe.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,s),this._forcing=0,this):this._tTime},s.addLabel=function(t,e){return this.labels[t]=ee(this,e),this},s.removeLabel=function(t){return delete this.labels[t],this},s.addPause=function(t,e,s){var r=os.delayedCall(0,e||dt,s);return r.data="isPause",this._hasPause=1,Xt(this,r,ee(this,t))},s.removePause=function(t){var e=this._first;for(t=ee(this,t);e;)e._start===t&&"isPause"===e.data&&It(e),e=e._next},s.killTweensOf=function(t,e,s){for(var r=this.getTweensOf(t,s),n=r.length;n--;)Je!==r[n]&&r[n].kill(t,e);return this},s.getTweensOf=function(t,e){for(var s,r=[],n=he(t),i=this._first,o=W(e);i;)i instanceof os?At(i._targets,n)&&(o?(!Je||i._initted&&i._ts)&&i.globalTime(0)<=e&&i.globalTime(i.totalDuration())>e:!e||i.isActive())&&r.push(i):(s=i.getTweensOf(n,e)).length&&r.push.apply(r,s),i=i._next;return r},s.tweenTo=function(t,e){e=e||{};var s=this,r=ee(s,t),n=e,i=n.startAt,o=n.onStart,a=n.onStartParams,l=n.immediateRender,h=os.to(s,Pt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:e.duration||Math.abs((r-(i&&"time"in i?i.time:s._time))/s.timeScale())||q,onStart:function(){s.pause();var t=e.duration||Math.abs((r-s._time)/s.timeScale());h._dur!==t&&Jt(h,t,0,1).render(h._time,!0,!0),o&&o.apply(h,a||[])}},e));return l?h.render(0):h},s.tweenFromTo=function(t,e,s){return this.tweenTo(e,Pt({startAt:{time:ee(this,t)}},s))},s.recent=function(){return this._recent},s.nextLabel=function(t){return void 0===t&&(t=this._time),Ee(this,ee(this,t))},s.previousLabel=function(t){return void 0===t&&(t=this._time),Ee(this,ee(this,t),1)},s.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+q)},s.shiftChildren=function(t,e,s){void 0===s&&(s=0);for(var r,n=this._first,i=this.labels;n;)n._start>=s&&(n._start+=t,n._end+=t),n=n._next;if(e)for(r in i)i[r]>=s&&(i[r]+=t);return zt(this)},s.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},s.clear=function(t){void 0===t&&(t=!0);for(var e,s=this._first;s;)e=s._next,this.remove(s),s=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),zt(this)},s.totalDuration=function(t){var e,s,r,n=0,i=this,a=i._last,l=D;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-t:t));if(i._dirty){for(r=i.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(s=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,Xt(i,a,s-a._delay,1)._lock=0):l=s,s<0&&a._ts&&(n-=s,(!r&&!i._dp||r&&r.smoothChildTiming)&&(i._start+=s/i._ts,i._time-=s,i._tTime-=s),i.shiftChildren(-s,!1,-Infinity),l=0),a._end>n&&a._ts&&(n=a._end),a=e;Jt(i,i===o&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},e.updateRoot=function(t){if(o._ts&&(Mt(o,Gt(t,o)),c=qe.frame),qe.frame>=_t){_t+=k.autoSleep||120;var e=o._first;if((!e||!e._ts)&&k.autoSleep&&qe._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||qe.sleep()}}},e}(Qe);Pt(Ze.prototype,{_lock:0,_hasPause:0,_forcing:0});var Je,Ke=function(t,e,s,r,n,i,o){var a,l,h,u,c,d,p,f,m=new bs(this._pt,t,e,0,1,fs,null,n),g=0,v=0;for(m.b=s,m.e=r,s+="",(p=~(r+="").indexOf("random("))&&(r=we(r)),i&&(i(f=[s,r],t,e),s=f[0],r=f[1]),l=s.match(st)||[];a=st.exec(r);)u=a[0],c=r.substring(g,a.index),h?h=(h+1)%5:"rgba("===c.substr(-5)&&(h=1),u!==l[v++]&&(d=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:c||1===v?c:",",s:d,c:"="===u.charAt(1)?parseFloat(u.substr(2))*("-"===u.charAt(0)?-1:1):parseFloat(u)-d,m:h&&h<4?Math.round:0},g=st.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=o,(rt.test(r)||p)&&(m.e=0),this._pt=m,m},ts=function(t,e,s,r,n,i,o,a,l){G(r)&&(r=r(n||0,t,i));var h,u=t[e],c="get"!==s?s:G(u)?l?t[e.indexOf("set")||!G(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,d=G(u)?l?hs:ls:as;if(V(r)&&(~r.indexOf("random(")&&(r=we(r)),"="===r.charAt(1)&&(r=parseFloat(c)+parseFloat(r.substr(2))*("-"===r.charAt(0)?-1:1)+(ne(c)||0))),c!==r)return isNaN(c*r)?(!u&&!(e in t)&&ht(e,r),Ke.call(this,t,e,c,r,d,a||k.stringFilter,l)):(h=new bs(this._pt,t,e,+c||0,r-(c||0),"boolean"==typeof u?ps:ds,0,d),l&&(h.fp=l),o&&h.modifier(o,this,t),this._pt=h)},es=function(t,e,s,r,n,i){var o,a,l,h;if(gt[t]&&!1!==(o=new gt[t]).init(n,o.rawVars?e[t]:function(t,e,s,r,n){if(G(t)&&(t=rs(t,n,e,s,r)),!Y(t)||t.style&&t.nodeType||J(t)||Z(t))return V(t)?rs(t,n,e,s,r):t;var i,o={};for(i in t)o[i]=rs(t[i],n,e,s,r);return o}(e[t],r,n,i,s),s,r,i)&&(s._pt=a=new bs(s._pt,n,t,0,1,o.render,o,0,o.priority),s!==d))for(l=s._ptLookup[s._targets.indexOf(n)],h=o._props.length;h--;)l[o._props[h]]=a;return o},ss=function t(e,s){var r,n,a,l,h,u,c,d,p,f,m,g,v,_=e.vars,y=_.ease,b=_.startAt,w=_.immediateRender,x=_.lazy,j=_.onUpdate,E=_.onUpdateParams,T=_.callbackScope,A=_.runBackwards,C=_.yoyoEase,S=_.keyframes,M=_.autoRevert,O=e._dur,L=e._startAt,P=e._targets,k=e.parent,D=k&&"nested"===k.data?k.parent._targets:P,F="auto"===e._overwrite&&!i,N=e.timeline;if(N&&(!S||!y)&&(y="none"),e._ease=Ge(y,R.ease),e._yEase=C?Be(Ge(!0===C?y:C,R.ease)):0,C&&e._yoyo&&!e._repeat&&(C=e._yEase,e._yEase=e._ease,e._ease=C),!N){if(g=(d=P[0]?xt(P[0]).harness:0)&&_[d.prop],r=qt(_,pt),L&&L.render(-1,!0).kill(),b)if(It(e._startAt=os.set(P,Pt({data:"isStart",overwrite:!1,parent:k,immediateRender:!0,lazy:X(x),startAt:null,delay:0,onUpdate:j,onUpdateParams:E,callbackScope:T,stagger:0},b))),w){if(s>0)M||(e._startAt=0);else if(O&&!(s<0&&L))return void(s&&(e._zTime=s))}else!1===M&&(e._startAt=0);else if(A&&O)if(L)!M&&(e._startAt=0);else if(s&&(w=!1),a=Pt({overwrite:!1,data:"isFromStart",lazy:w&&X(x),immediateRender:w,stagger:0,parent:k},r),g&&(a[d.prop]=g),It(e._startAt=os.set(P,a)),w){if(!s)return}else t(e._startAt,q);for(e._pt=0,x=O&&X(x)||x&&!O,n=0;n<P.length;n++){if(c=(h=P[n])._gsap||wt(P)[n]._gsap,e._ptLookup[n]=f={},mt[c.id]&&ft.length&&St(),m=D===P?n:D.indexOf(h),d&&!1!==(p=new d).init(h,g||r,e,m,D)&&(e._pt=l=new bs(e._pt,h,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(t){f[t]=l})),p.priority&&(u=1)),!d||g)for(a in r)gt[a]&&(p=es(a,r,e,m,h,D))?p.priority&&(u=1):f[a]=l=ts.call(e,h,a,"get",r[a],m,D,0,_.stringFilter);e._op&&e._op[n]&&e.kill(h,e._op[n]),F&&e._pt&&(Je=e,o.killTweensOf(h,f,e.globalTime(0)),v=!e.parent,Je=0),e._pt&&x&&(mt[c.id]=1)}u&&ys(e),e._onInit&&e._onInit(e)}e._from=!N&&!!_.runBackwards,e._onUpdate=j,e._initted=(!e._op||e._pt)&&!v},rs=function(t,e,s,r,n){return G(t)?t.call(e,s,r,n):V(t)&&~t.indexOf("random(")?we(t):t},ns=bt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",is=(ns+",id,stagger,delay,duration,paused,scrollTrigger").split(","),os=function(t){function e(e,s,n,a){var l;"number"==typeof s&&(n.duration=s,s=n,n=null);var h,u,c,d,p,f,m,g,v=(l=t.call(this,a?s:Ft(s),n)||this).vars,_=v.duration,y=v.delay,b=v.immediateRender,w=v.stagger,x=v.overwrite,j=v.keyframes,E=v.defaults,T=v.scrollTrigger,A=v.yoyoEase,C=l.parent,S=(J(e)||Z(e)?W(e[0]):"length"in s)?[e]:he(e);if(l._targets=S.length?wt(S):ut("GSAP target "+e+" not found. https://greensock.com",!k.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=x,j||w||Q(_)||Q(y)){if(s=l.vars,(h=l.timeline=new Ze({data:"nested",defaults:E||{}})).kill(),h.parent=h._dp=r(l),h._start=0,j)Pt(h.vars.defaults,{ease:"none"}),j.forEach((function(t){return h.to(S,t,">")}));else{if(d=S.length,m=w?ce(w):dt,Y(w))for(p in w)~ns.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(u=0;u<d;u++){for(p in c={},s)is.indexOf(p)<0&&(c[p]=s[p]);c.stagger=0,A&&(c.yoyoEase=A),g&&Rt(c,g),f=S[u],c.duration=+rs(_,r(l),u,f,S),c.delay=(+rs(y,r(l),u,f,S)||0)-l._delay,!w&&1===d&&c.delay&&(l._delay=y=c.delay,l._start+=y,c.delay=0),h.to(f,c,m(u,f,S))}h.duration()?_=y=0:l.timeline=0}_||l.duration(_=h.duration())}else l.timeline=0;return!0!==x||i||(Je=r(l),o.killTweensOf(S),Je=0),C&&Yt(C,r(l)),(b||!_&&!j&&l._start===Tt(C._time)&&X(b)&&Ut(r(l))&&"nested"!==C.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-y))),T&&$t(r(l),T),l}n(e,t);var s=e.prototype;return s.render=function(t,e,s){var r,n,i,o,a,l,h,u,c,d=this._time,p=this._tDur,f=this._dur,m=t>p-q&&t>=0?p:t<q?0:t;if(f){if(m!==this._tTime||!t||s||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(r=m,u=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,s);if(r=Tt(m%o),m===p?(i=this._repeat,r=f):((i=~~(m/o))&&i===m/o&&(r=f,i--),r>f&&(r=f)),(l=this._yoyo&&1&i)&&(c=this._yEase,r=f-r),a=Vt(this._tTime,o),r===d&&!s&&this._initted)return this;i!==a&&(u&&this._yEase&&Ve(u,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=s=1,this.render(Tt(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Qt(this,t<0?t:r,s,e))return this._tTime=0,this;if(f!==this._dur)return this.render(t,e,s)}for(this._tTime=m,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(c||this._ease)(r/f),this._from&&(this.ratio=h=1-h),r&&!d&&!e&&Te(this,"onStart"),n=this._pt;n;)n.r(h,n.d),n=n._next;u&&u.render(t<0?t:!r&&l?-1e-8:u._dur*h,e,s)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,s),Te(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!e&&this.parent&&Te(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!f)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&It(this,1),e||t<0&&!d||!m&&!d||(Te(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,s,r){var n,i,o,a=t.ratio,l=e<0||!e&&(!t._start&&Zt(t)||(t._ts<0||t._dp._ts<0)&&"isFromStart"!==t.data&&"isStart"!==t.data)?0:1,h=t._rDelay,u=0;if(h&&t._repeat&&(u=re(0,t._tDur,e),i=Vt(u,h),o=Vt(t._tTime,h),t._yoyo&&1&i&&(l=1-l),i!==o&&(a=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==a||r||t._zTime===q||!e&&t._zTime){if(!t._initted&&Qt(t,e,r,s))return;for(o=t._zTime,t._zTime=e||(s?q:0),s||(s=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=u,n=t._pt;n;)n.r(l,n.d),n=n._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!s&&Te(t,"onUpdate"),u&&t._repeat&&!s&&t.parent&&Te(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&It(t,1),s||(Te(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,s);return this},s.targets=function(){return this._targets},s.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},s.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Ae(this):this;if(this.timeline){var s=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Je&&!0!==Je.vars.overwrite)._first||Ae(this),this.parent&&s!==this.timeline.totalDuration()&&Jt(this,this._dur*this.timeline._tDur/s,0,1),this}var r,n,i,o,a,l,h,u=this._targets,c=t?he(t):u,d=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var s=t.length,r=s===e.length;r&&s--&&t[s]===e[s];);return s<0}(u,c))return"all"===e&&(this._pt=0),Ae(this);for(r=this._op=this._op||[],"all"!==e&&(V(e)&&(a={},Et(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var s,r,n,i,o=t[0]?xt(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(r in s=Rt({},e),a)if(r in s)for(n=(i=a[r].split(",")).length;n--;)s[i[n]]=s[r];return s}(u,e)),h=u.length;h--;)if(~c.indexOf(u[h]))for(a in n=d[h],"all"===e?(r[h]=e,o=n,i={}):(i=r[h]=r[h]||{},o=e),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Nt(this,l,"_pt"),delete n[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&Ae(this),this},e.to=function(t,s){return new e(t,s,arguments[2])},e.from=function(t,s){return new e(t,Ct(arguments,1))},e.delayedCall=function(t,s,r,n){return new e(s,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:s,onReverseComplete:s,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:n})},e.fromTo=function(t,s,r){return new e(t,Ct(arguments,2))},e.set=function(t,s){return s.duration=0,s.repeatDelay||(s.repeat=0),new e(t,s)},e.killTweensOf=function(t,e,s){return o.killTweensOf(t,e,s)},e}(Qe);Pt(os.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Et("staggerTo,staggerFrom,staggerFromTo",(function(t){os[t]=function(){var e=new Ze,s=oe.call(arguments,0);return s.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,s)}}));var as=function(t,e,s){return t[e]=s},ls=function(t,e,s){return t[e](s)},hs=function(t,e,s,r){return t[e](r.fp,s)},us=function(t,e,s){return t.setAttribute(e,s)},cs=function(t,e){return G(t[e])?ls:H(t[e])&&t.setAttribute?us:as},ds=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4,e)},ps=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},fs=function(t,e){var s=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;s;)r=s.p+(s.m?s.m(s.s+s.c*t):Math.round(1e4*(s.s+s.c*t))/1e4)+r,s=s._next;r+=e.c}e.set(e.t,e.p,r,e)},ms=function(t,e){for(var s=e._pt;s;)s.r(t,s.d),s=s._next},gs=function(t,e,s,r){for(var n,i=this._pt;i;)n=i._next,i.p===r&&i.modifier(t,e,s),i=n},vs=function(t){for(var e,s,r=this._pt;r;)s=r._next,r.p===t&&!r.op||r.op===t?Nt(this,r,"_pt"):r.dep||(e=1),r=s;return!e},_s=function(t,e,s,r){r.mSet(t,e,r.m.call(r.tween,s,r.mt),r)},ys=function(t){for(var e,s,r,n,i=t._pt;i;){for(e=i._next,s=r;s&&s.pr>i.pr;)s=s._next;(i._prev=s?s._prev:n)?i._prev._next=i:r=i,(i._next=s)?s._prev=i:n=i,i=e}t._pt=r},bs=function(){function t(t,e,s,r,n,i,o,a,l){this.t=e,this.s=r,this.c=n,this.p=s,this.r=i||ds,this.d=o||this,this.set=a||as,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,s){this.mSet=this.mSet||this.set,this.set=_s,this.m=t,this.mt=s,this.tween=e},t}();Et(bt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return pt[t]=1})),ot.TweenMax=ot.TweenLite=os,ot.TimelineLite=ot.TimelineMax=Ze,o=new Ze({sortChildren:!1,defaults:R,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),k.stringFilter=De;var ws={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];e.forEach((function(t){return function(t){var e=(t=!t.name&&t.default||t).name,s=G(t),r=e&&!s&&t.init?function(){this._props=[]}:t,n={init:dt,render:ms,add:ts,kill:vs,modifier:gs,rawVars:0},i={targetTest:0,get:0,getSetter:cs,aliases:{},register:0};if(Fe(),t!==r){if(gt[e])return;Pt(r,Pt(qt(t,n),i)),Rt(r.prototype,Rt(n,qt(t,i))),gt[r.prop=e]=r,t.targetTest&&(yt.push(r),pt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}ct(e,r),t.register&&t.register(Es,r,bs)}(t)}))},timeline:function(t){return new Ze(t)},getTweensOf:function(t,e){return o.getTweensOf(t,e)},getProperty:function(t,e,s,r){V(t)&&(t=he(t)[0]);var n=xt(t||{}).get,i=s?Lt:Ot;return"native"===s&&(s=""),t?e?i((gt[e]&&gt[e].get||n)(t,e,s,r)):function(e,s,r){return i((gt[e]&&gt[e].get||n)(t,e,s,r))}:t},quickSetter:function(t,e,s){if((t=he(t)).length>1){var r=t.map((function(t){return Es.quickSetter(t,e,s)})),n=r.length;return function(t){for(var e=n;e--;)r[e](t)}}t=t[0]||{};var i=gt[e],o=xt(t),a=o.harness&&(o.harness.aliases||{})[e]||e,l=i?function(e){var r=new i;d._pt=0,r.init(t,s?e+s:e,d,0,[t]),r.render(1,r),d._pt&&ms(1,d)}:o.set(t,a);return i?l:function(e){return l(t,a,s?e+s:e,o,1)}},isTweening:function(t){return o.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ge(t.ease,R.ease)),Dt(R,t||{})},config:function(t){return Dt(k,t||{})},registerEffect:function(t){var e=t.name,s=t.effect,r=t.plugins,n=t.defaults,i=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!gt[t]&&!ot[t]&&ut(e+" effect requires "+t+" plugin.")})),vt[e]=function(t,e,r){return s(he(t),Pt(e||{},n),r)},i&&(Ze.prototype[e]=function(t,s,r){return this.add(vt[e](t,Y(s)?s:(r=s)&&{},this),r)})},registerEase:function(t,e){Ne[t]=Ge(e)},parseEase:function(t,e){return arguments.length?Ge(t,e):Ne},getById:function(t){return o.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var s,r,n=new Ze(t);for(n.smoothChildTiming=X(t.smoothChildTiming),o.remove(n),n._dp=0,n._time=n._tTime=o._time,s=o._first;s;)r=s._next,!e&&!s._dur&&s instanceof os&&s.vars.onComplete===s._targets[0]||Xt(n,s,s._start-s._delay),s=r;return Xt(o,n,0),n},utils:{wrap:ye,wrapYoyo:be,distribute:ce,random:fe,snap:pe,normalize:ve,getUnit:ne,clamp:ie,splitColor:Oe,toArray:he,mapRange:xe,pipe:me,unitize:ge,interpolate:je,shuffle:ue},install:lt,effects:vt,ticker:qe,updateRoot:Ze.updateRoot,plugins:gt,globalTimeline:o,core:{PropTween:bs,globals:ct,Tween:os,Timeline:Ze,Animation:Qe,getCache:xt,_removeLinkedListItem:Nt,suppressOverwrites:function(t){return i=t}}};Et("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return ws[t]=os[t]})),qe.add(Ze.updateRoot),d=ws.to({},{duration:0});var xs=function(t,e){for(var s=t._pt;s&&s.p!==e&&s.op!==e&&s.fp!==e;)s=s._next;return s},js=function(t,e){return{name:t,rawVars:1,init:function(t,s,r){r._onInit=function(t){var r,n;if(V(s)&&(r={},Et(s,(function(t){return r[t]=1})),s=r),e){for(n in r={},s)r[n]=e(s[n]);s=r}!function(t,e){var s,r,n,i=t._targets;for(s in e)for(r=i.length;r--;)(n=t._ptLookup[r][s])&&(n=n.d)&&(n._pt&&(n=xs(n,s)),n&&n.modifier&&n.modifier(e[s],t,i[r],s))}(t,s)}}}},Es=ws.registerPlugin({name:"attr",init:function(t,e,s,r,n){var i,o;for(i in e)(o=this.add(t,"setAttribute",(t.getAttribute(i)||0)+"",e[i],r,n,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(t,e){for(var s=e.length;s--;)this.add(t,s,t[s]||0,e[s])}},js("roundProps",de),js("modifiers"),js("snap",pe))||ws;os.version=Ze.version=Es.version="3.6.1",u=1,$()&&Fe();var Ts=Ne.Power0,As=Ne.Power1,Cs=Ne.Power2,Ss=Ne.Power3,Ms=Ne.Power4,Os=Ne.Linear,Ls=Ne.Quad,Ps=Ne.Cubic,ks=Ne.Quart,Rs=Ne.Quint,Ds=Ne.Strong,qs=Ne.Elastic,Fs=Ne.Back,Ns=Ne.SteppedEase,Is=Ne.Bounce,zs=Ne.Sine,Us=Ne.Expo,Bs=Ne.Circ},"./node_modules/gsap/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Back:()=>r.Back,Bounce:()=>r.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>r.Circ,Cubic:()=>r.Cubic,Elastic:()=>r.Elastic,Expo:()=>r.Expo,Linear:()=>r.Linear,Power0:()=>r.Power0,Power1:()=>r.Power1,Power2:()=>r.Power2,Power3:()=>r.Power3,Power4:()=>r.Power4,Quad:()=>r.Quad,Quart:()=>r.Quart,Quint:()=>r.Quint,Sine:()=>r.Sine,SteppedEase:()=>r.SteppedEase,Strong:()=>r.Strong,TimelineLite:()=>r.TimelineLite,TimelineMax:()=>r.TimelineMax,TweenLite:()=>r.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var r=s("./node_modules/gsap/gsap-core.js"),n=s("./node_modules/gsap/CSSPlugin.js"),i=r.gsap.registerPlugin(n.CSSPlugin)||r.gsap,o=i.core.Tween},"./node_modules/gsap/utils/paths.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{bezierToPoints:()=>Y,cacheRawPathMeasurements:()=>z,convertToPath:()=>D,copyRawPath:()=>O,flatPointsToSegment:()=>X,getClosestData:()=>K,getPositionOnPath:()=>V,getRawPath:()=>M,getRotationAtProgress:()=>q,pointsToSegment:()=>$,rawPathToString:()=>et,reverseSegment:()=>L,simplifyPoints:()=>Z,sliceRawPath:()=>N,stringToRawPath:()=>H,subdivideSegment:()=>U,subdivideSegmentNear:()=>tt,transformRawPath:()=>G});var r,n=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,h=180/Math.PI,u=Math.sin,c=Math.cos,d=Math.abs,p=Math.sqrt,f=Math.atan2,m=1e8,g=function(t){return"string"==typeof t},v=function(t){return"number"==typeof t},_=function(t){return void 0===t},y={},b={},w=1e5,x=function(t){return Math.round((t+m)%1*w)/w||(t<0?0:1)},j=function(t){return Math.round(t*w)/w||0},E=function(t){return Math.round(1e10*t)/1e10||0},T=function(t,e,s,r){var n=t[e],i=1===r?6:U(n,s,r);if(i&&i+s+2<n.length)return t.splice(e,0,n.slice(0,s+i+2)),n.splice(0,s+i),1},A=function(t,e){var s=t.length;for(e||t.reverse();s--;)t[s].reversed||L(t[s])},C=function(t,e){return e.totalLength=t.totalLength,t.samples?(e.samples=t.samples.slice(0),e.lookup=t.lookup.slice(0),e.minLength=t.minLength,e.resolution=t.resolution):t.totalPoints&&(e.totalPoints=t.totalPoints),e},S=function(t,e){var s=t.length,r=t[s-1]||[],n=r.length;s&&e[0]===r[n-2]&&e[1]===r[n-1]&&(e=r.concat(e.slice(2)),s--),t[s]=e};function M(t){var e,s=(t=g(t)&&a.test(t)&&document.querySelector(t)||t).getAttribute?t:0;return s&&(t=t.getAttribute("d"))?(s._gsPath||(s._gsPath={}),(e=s._gsPath[t])&&!e._dirty?e:s._gsPath[t]=H(t)):t?g(t)?H(t):v(t[0])?[t]:t:console.warn("Expecting a <path> element or an SVG path data string")}function O(t){for(var e=[],s=0;s<t.length;s++)e[s]=C(t[s],t[s].slice(0));return C(t,e)}function L(t){var e,s=0;for(t.reverse();s<t.length;s+=2)e=t[s],t[s]=t[s+1],t[s+1]=e;t.reversed=!t.reversed}var P=function(t,e){var s,r=document.createElementNS("http://www.w3.org/2000/svg","path"),n=[].slice.call(t.attributes),i=n.length;for(e=","+e+",";--i>-1;)s=n[i].nodeName.toLowerCase(),e.indexOf(","+s+",")<0&&r.setAttributeNS(null,s,n[i].nodeValue);return r},k={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"},R=function(t,e){for(var s=e?e.split(","):[],r={},n=s.length;--n>-1;)r[s[n]]=+t.getAttribute(s[n])||0;return r};function D(t,e){var s,r,n,o,a,l,h,u,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T=t.tagName.toLowerCase(),A=.552284749831;return"path"!==T&&t.getBBox?(l=P(t,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),E=R(t,k[T]),"rect"===T?(o=E.rx,a=E.ry||o,r=E.x,n=E.y,d=E.width-2*o,p=E.height-2*a,s=o||a?"M"+(_=(g=(m=r+o)+d)+o)+","+(b=n+a)+" V"+(w=b+p)+" C"+[_,x=w+a*A,v=g+o*A,j=w+a,g,j,g-(g-m)/3,j,m+(g-m)/3,j,m,j,f=r+o*(1-A),j,r,x,r,w,r,w-(w-b)/3,r,b+(w-b)/3,r,b,r,y=n+a*(1-A),f,n,m,n,m+(g-m)/3,n,g-(g-m)/3,n,g,n,v,n,_,y,_,b].join(",")+"z":"M"+(r+d)+","+n+" v"+p+" h"+-d+" v"+-p+" h"+d+"z"):"circle"===T||"ellipse"===T?("circle"===T?u=(o=a=E.r)*A:(o=E.rx,u=(a=E.ry)*A),s="M"+((r=E.cx)+o)+","+(n=E.cy)+" C"+[r+o,n+u,r+(h=o*A),n+a,r,n+a,r-h,n+a,r-o,n+u,r-o,n,r-o,n-u,r-h,n-a,r,n-a,r+h,n-a,r+o,n-u,r+o,n].join(",")+"z"):"line"===T?s="M"+E.x1+","+E.y1+" L"+E.x2+","+E.y2:"polyline"!==T&&"polygon"!==T||(s="M"+(r=(c=(t.getAttribute("points")+"").match(i)||[]).shift())+","+(n=c.shift())+" L"+c.join(","),"polygon"===T&&(s+=","+r+","+n+"z")),l.setAttribute("d",et(l._gsRawPath=H(s))),e&&t.parentNode&&(t.parentNode.insertBefore(l,t),t.parentNode.removeChild(t)),l):t}function q(t,e){var s=B(t,e>=1?1-1e-9:e||1e-9);return F(s.segment,s.i,s.t)}function F(t,e,s){var r,n=t[e],i=t[e+2],o=t[e+4];return n+=(i-n)*s,n+=((i+=(o-i)*s)-n)*s,r=i+(o+(t[e+6]-o)*s-i)*s-n,n=t[e+1],n+=((i=t[e+3])-n)*s,n+=((i+=((o=t[e+5])-i)*s)-n)*s,j(f(i+(o+(t[e+7]-o)*s-i)*s-n,r)*h)}function N(t,e,s){s=_(s)?1:E(s)||0,e=E(e)||0;var r=Math.max(0,~~(d(s-e)-1e-8)),n=O(t);if(e>s&&(e=1-e,s=1-s,A(n),n.totalLength=0),e<0||s<0){var i=Math.abs(~~Math.min(e,s))+1;e+=i,s+=i}n.totalLength||z(n);var o,a,l,h,u,c,p,f,m=s>1,g=B(n,e,y,!0),v=B(n,s,b),w=v.segment,x=g.segment,j=v.segIndex,C=g.segIndex,M=v.i,L=g.i,P=C===j,k=M===L&&P;if(m||r){for(o=j<C||P&&M<L||k&&v.t<g.t,T(n,C,L,g.t)&&(C++,o||(j++,k?(v.t=(v.t-g.t)/(1-g.t),M=0):P&&(M-=L))),1-(s-e)<1e-5?j=C-1:!v.t&&j?j--:T(n,j,M,v.t)&&o&&C++,1===g.t&&(C=(C+1)%n.length),u=[],p=1+(c=n.length)*r,f=C,p+=(c-C+j)%c,h=0;h<p;h++)S(u,n[f++%c]);n=u}else if(l=1===v.t?6:U(w,M,v.t),e!==s)for(a=U(x,L,k?g.t/v.t:g.t),P&&(l+=a),w.splice(M+l+2),(a||L)&&x.splice(0,L+a),h=n.length;h--;)(h<C||h>j)&&n.splice(h,1);else w.angle=F(w,M+l,0),g=w[M+=l],v=w[M+1],w.length=w.totalLength=0,w.totalPoints=n.totalPoints=8,w.push(g,v,g,v,g,v,g,v);return n.totalLength=0,n}function I(t,e,s){e=e||0,t.samples||(t.samples=[],t.lookup=[]);var r,n,i,o,a,l,h,u,c,f,g,v,_,y,b,w,x,j=~~t.resolution||12,E=1/j,T=s?e+6*s+1:t.length,A=t[e],C=t[e+1],S=e?e/6*j:0,M=t.samples,O=t.lookup,L=(e?t.minLength:m)||m,P=M[S+s*j-1],k=e?M[S-1]:0;for(M.length=O.length=0,n=e+2;n<T;n+=6){if(i=t[n+4]-A,o=t[n+2]-A,a=t[n]-A,u=t[n+5]-C,c=t[n+3]-C,f=t[n+1]-C,l=h=g=v=0,d(i)<1e-5&&d(u)<1e-5&&d(a)+d(f)<1e-5)t.length>8&&(t.splice(n,6),n-=6,T-=6);else for(r=1;r<=j;r++)l=h-(h=((y=E*r)*y*i+3*(_=1-y)*(y*o+_*a))*y),g=v-(v=(y*y*u+3*_*(y*c+_*f))*y),(w=p(g*g+l*l))<L&&(L=w),k+=w,M[S++]=k;A+=i,C+=u}if(P)for(P-=k;S<M.length;S++)M[S]+=P;if(M.length&&L)for(t.totalLength=x=M[M.length-1]||0,t.minLength=L,w=b=0,r=0;r<x;r+=L)O[w++]=M[b]<r?++b:b;else t.totalLength=M[0]=0;return e?k-M[e/2-1]:k}function z(t,e){var s,r,n;for(n=s=r=0;n<t.length;n++)t[n].resolution=~~e||12,r+=t[n].length,s+=I(t[n]);return t.totalPoints=r,t.totalLength=s,t}function U(t,e,s){if(s<=0||s>=1)return 0;var r=t[e],n=t[e+1],i=t[e+2],o=t[e+3],a=t[e+4],l=t[e+5],h=r+(i-r)*s,u=i+(a-i)*s,c=n+(o-n)*s,d=o+(l-o)*s,p=h+(u-h)*s,f=c+(d-c)*s,m=a+(t[e+6]-a)*s,g=l+(t[e+7]-l)*s;return u+=(m-u)*s,d+=(g-d)*s,t.splice(e+2,4,j(h),j(c),j(p),j(f),j(p+(u-p)*s),j(f+(d-f)*s),j(u),j(d),j(m),j(g)),t.samples&&t.samples.splice(e/6*t.resolution|0,0,0,0,0,0,0,0),6}function B(t,e,s,r){s=s||{},t.totalLength||z(t),(e<0||e>1)&&(e=x(e));var n,i,o,a,l,h,u,c=0,d=t[0];if(e)if(1===e)u=1,h=(d=t[c=t.length-1]).length-8;else{if(t.length>1){for(o=t.totalLength*e,l=h=0;(l+=t[h++].totalLength)<o;)c=h;e=(o-(a=l-(d=t[c]).totalLength))/(l-a)||0}n=d.samples,i=d.resolution,o=d.totalLength*e,a=(h=d.lookup[~~(o/d.minLength)]||0)?n[h-1]:0,(l=n[h])<o&&(a=l,l=n[++h]),u=1/i*((o-a)/(l-a)+h%i),h=6*~~(h/i),r&&1===u&&(h+6<d.length?(h+=6,u=0):c+1<t.length&&(h=u=0,d=t[++c]))}else u=h=c=0,d=t[0];return s.t=u,s.i=h,s.path=t,s.segment=d,s.segIndex=c,s}function V(t,e,s,r){var n,i,o,a,l,h,u,c,d,p=t[0],f=r||{};if((e<0||e>1)&&(e=x(e)),t.length>1){for(o=t.totalLength*e,l=h=0;(l+=t[h++].totalLength)<o;)p=t[h];e=(o-(a=l-p.totalLength))/(l-a)||0}return n=p.samples,i=p.resolution,o=p.totalLength*e,a=(h=p.lookup[e<1?~~(o/p.minLength):p.lookup.length-1]||0)?n[h-1]:0,(l=n[h])<o&&(a=l,l=n[++h]),d=1-(u=1/i*((o-a)/(l-a)+h%i)||0),c=p[h=6*~~(h/i)],f.x=j((u*u*(p[h+6]-c)+3*d*(u*(p[h+4]-c)+d*(p[h+2]-c)))*u+c),f.y=j((u*u*(p[h+7]-(c=p[h+1]))+3*d*(u*(p[h+5]-c)+d*(p[h+3]-c)))*u+c),s&&(f.angle=p.totalLength?F(p,h,u>=1?1-1e-9:u||1e-9):p.angle||0),f}function G(t,e,s,r,n,i,o){for(var a,l,h,u,c,d=t.length;--d>-1;)for(l=(a=t[d]).length,h=0;h<l;h+=2)u=a[h],c=a[h+1],a[h]=u*e+c*r+i,a[h+1]=u*s+c*n+o;return t._dirty=1,t}function W(t,e,s,r,n,i,o,a,h){if(t!==a||e!==h){s=d(s),r=d(r);var f=n%360*l,m=c(f),g=u(f),v=Math.PI,_=2*v,y=(t-a)/2,b=(e-h)/2,w=m*y+g*b,x=-g*y+m*b,j=w*w,E=x*x,T=j/(s*s)+E/(r*r);T>1&&(s=p(T)*s,r=p(T)*r);var A=s*s,C=r*r,S=(A*C-A*E-C*j)/(A*E+C*j);S<0&&(S=0);var M=(i===o?-1:1)*p(S),O=M*(s*x/r),L=M*(-r*w/s),P=(t+a)/2+(m*O-g*L),k=(e+h)/2+(g*O+m*L),R=(w-O)/s,D=(x-L)/r,q=(-w-O)/s,F=(-x-L)/r,N=R*R+D*D,I=(D<0?-1:1)*Math.acos(R/p(N)),z=(R*F-D*q<0?-1:1)*Math.acos((R*q+D*F)/p(N*(q*q+F*F)));isNaN(z)&&(z=v),!o&&z>0?z-=_:o&&z<0&&(z+=_),I%=_,z%=_;var U,B=Math.ceil(d(z)/(_/4)),V=[],G=z/B,W=4/3*u(G/2)/(1+c(G/2)),H=m*s,Y=g*s,X=g*-r,$=m*r;for(U=0;U<B;U++)w=c(n=I+U*G),x=u(n),R=c(n+=G),D=u(n),V.push(w-W*x,x+W*w,R+W*D,D-W*R,R,D);for(U=0;U<V.length;U+=2)w=V[U],x=V[U+1],V[U]=w*H+x*X+P,V[U+1]=w*Y+x*$+k;return V[U-2]=a,V[U-1]=h,V}}function H(t){var e,s,r,i,a,l,h,u,c,p,f,m,g,v,_,y=(t+"").replace(o,(function(t){var e=+t;return e<1e-4&&e>-1e-4?0:e})).match(n)||[],b=[],w=0,x=0,j=2/3,E=y.length,T=0,A="ERROR: malformed path: "+t,C=function(t,e,s,r){p=(s-t)/3,f=(r-e)/3,h.push(t+p,e+f,s-p,r-f,s,r)};if(!t||!isNaN(y[0])||isNaN(y[1]))return console.log(A),b;for(e=0;e<E;e++)if(g=a,isNaN(y[e])?l=(a=y[e].toUpperCase())!==y[e]:e--,r=+y[e+1],i=+y[e+2],l&&(r+=w,i+=x),e||(u=r,c=i),"M"===a)h&&(h.length<8?b.length-=1:T+=h.length),w=u=r,x=c=i,h=[r,i],b.push(h),e+=2,a="L";else if("C"===a)h||(h=[0,0]),l||(w=x=0),h.push(r,i,w+1*y[e+3],x+1*y[e+4],w+=1*y[e+5],x+=1*y[e+6]),e+=6;else if("S"===a)p=w,f=x,"C"!==g&&"S"!==g||(p+=w-h[h.length-4],f+=x-h[h.length-3]),l||(w=x=0),h.push(p,f,r,i,w+=1*y[e+3],x+=1*y[e+4]),e+=4;else if("Q"===a)p=w+(r-w)*j,f=x+(i-x)*j,l||(w=x=0),w+=1*y[e+3],x+=1*y[e+4],h.push(p,f,w+(r-w)*j,x+(i-x)*j,w,x),e+=4;else if("T"===a)p=w-h[h.length-4],f=x-h[h.length-3],h.push(w+p,x+f,r+(w+1.5*p-r)*j,i+(x+1.5*f-i)*j,w=r,x=i),e+=2;else if("H"===a)C(w,x,w=r,x),e+=1;else if("V"===a)C(w,x,w,x=r+(l?x-w:0)),e+=1;else if("L"===a||"Z"===a)"Z"===a&&(r=u,i=c,h.closed=!0),("L"===a||d(w-r)>.5||d(x-i)>.5)&&(C(w,x,r,i),"L"===a&&(e+=2)),w=r,x=i;else if("A"===a){if(v=y[e+4],_=y[e+5],p=y[e+6],f=y[e+7],s=7,v.length>1&&(v.length<3?(f=p,p=_,s--):(f=_,p=v.substr(2),s-=2),_=v.charAt(1),v=v.charAt(0)),m=W(w,x,+y[e+1],+y[e+2],+y[e+3],+v,+_,(l?w:0)+1*p,(l?x:0)+1*f),e+=s,m)for(s=0;s<m.length;s++)h.push(m[s]);w=h[h.length-2],x=h[h.length-1]}else console.log(A);return(e=h.length)<6?(b.pop(),e=0):h[0]===h[e-2]&&h[1]===h[e-1]&&(h.closed=!0),b.totalPoints=T+e,b}function Y(t,e,s,r,n,i,o,a,l,h,u){var c,p=(t+s)/2,f=(e+r)/2,m=(s+n)/2,g=(r+i)/2,v=(n+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,T=o-t,A=a-e,C=d((s-o)*A-(r-a)*T),S=d((n-o)*A-(i-a)*T);return h||(h=[t,e,o,a],u=2),h.splice(u||h.length-2,0,j,E),(C+S)*(C+S)>l*(T*T+A*A)&&(c=h.length,Y(t,e,p,f,y,b,j,E,l,h,u),Y(j,E,w,x,v,_,o,a,l,h,u+2+(h.length-c))),h}function X(t,e){void 0===e&&(e=1);for(var s=t[0],r=0,n=[s,r],i=2;i<t.length;i+=2)n.push(s,r,t[i],r=(t[i]-s)*e/2,s=t[i],-r);return n}function $(t,e,s){d(t[0]-t[2])<1e-4&&d(t[1]-t[3])<1e-4&&(t=t.slice(2));var r,n,i,o,a,l,h,m,g,v,_,y,b,w,x=t.length-2,E=+t[0],T=+t[1],A=+t[2],C=+t[3],S=[E,T,E,T],M=A-E,O=C-T,L=Math.abs(t[x]-E)<.001&&Math.abs(t[x+1]-T)<.001;for(isNaN(s)&&(s=Math.PI/10),L&&(t.push(A,C),A=E,C=T,E=t[x-2],T=t[x-1],t.unshift(E,T),x+=4),e=e||0===e?+e:1,a=2;a<x;a+=2)r=E,n=T,E=A,T=C,A=+t[a+2],C=+t[a+3],E===A&&T===C||(y=(l=M)*l+(m=O)*m,b=(M=A-E)*M+(O=C-T)*O,w=(h=A-r)*h+(g=C-n)*g,_=(i=Math.acos((y+b-w)/p(4*y*b)))/Math.PI*e,v=p(y)*_,_*=p(b),E===r&&T===n||(i>s?(o=f(g,h),S.push(j(E-c(o)*v),j(T-u(o)*v),j(E),j(T),j(E+c(o)*_),j(T+u(o)*_))):(o=f(m,l),S.push(j(E-c(o)*v),j(T-u(o)*v)),o=f(O,M),S.push(j(E),j(T),j(E+c(o)*_),j(T+u(o)*_)))));return E!==A||T!==C||S.length<4?S.push(j(A),j(C),j(A),j(C)):S.length-=2,L&&(S.splice(0,6),S.length=S.length-6),S}function Q(t,e,s,r,n){var i,o,a,l,h,u,c,d,p,f,m,g,v=r,_=t[e],y=t[e+1],b=t[s],w=t[s+1];for(o=e+2;o<s;o+=2)l=t[o],h=t[o+1],f=void 0,m=void 0,g=void 0,g=(p=w)-(c=y),((m=(d=b)-(u=_))||g)&&((f=((l-u)*m+(h-c)*g)/(m*m+g*g))>1?(u=d,c=p):f>0&&(u+=m*f,c+=g*f)),(a=Math.pow(l-u,2)+Math.pow(h-c,2))>v&&(i=o,v=a);v>r&&(i-e>2&&Q(t,e,i,r,n),n.push(t[i],t[i+1]),s-i>2&&Q(t,i,s,r,n))}function Z(t,e){var s,r,n,i,o,a,l,h=parseFloat(t[0]),u=parseFloat(t[1]),c=[h,u],d=t.length-2;for(e=Math.pow(e||1,2),s=2;s<d;s+=2)(i=h-(r=parseFloat(t[s])))*i+(o=u-(n=parseFloat(t[s+1])))*o>e&&(c.push(r,n),h=r,u=n);return c.push(parseFloat(t[d]),parseFloat(t[d+1])),Q(c,0,l=c.length-2,e,a=[c[0],c[1]]),a.push(c[l],c[l+1]),a}function J(t,e,s,n,i,o,a,l,h,u,c,d,p,f){var g,v,_,y,b=(i-n)/o,w=0,x=n;for(r=m;x<=i;)(g=(v=(y=1-x)*y*y*a+3*y*y*x*h+3*y*x*x*c+x*x*x*p-e)*v+(_=y*y*y*l+3*y*y*x*u+3*y*x*x*d+x*x*x*f-s)*_)<r&&(r=g,w=x),x+=b;return t>1?J(t-1,e,s,Math.max(w-b,0),Math.min(w+b,1),o,a,l,h,u,c,d,p,f):w}function K(t,e,s,n){var i,o,a,l,h={j:0,i:0,t:0},u=m;for(o=0;o<t.length;o++)for(l=t[o],i=0;i<l.length;i+=6)a=J(1,e,s,0,1,n||20,l[i],l[i+1],l[i+2],l[i+3],l[i+4],l[i+5],l[i+6],l[i+7]),u>r&&(u=r,h.j=o,h.i=i,h.t=a);return h}function tt(t,e,s,n,i){var o,a,l=s.length,h=m,u=0,c=0;for(n=n||20,i=i||3,a=0;a<l;a+=6)o=J(1,t,e,0,1,n,s[a],s[a+1],s[a+2],s[a+3],s[a+4],s[a+5],s[a+6],s[a+7]),h>r&&(h=r,u=o,c=a);return U(s,c,o=J(i,t,e,u-.05,u+.05,n,s[c],s[c+1],s[c+2],s[c+3],s[c+4],s[c+5],s[c+6],s[c+7])),c+6}function et(t){v(t[0])&&(t=[t]);var e,s,r,n,i="",o=t.length;for(s=0;s<o;s++){for(n=t[s],i+="M"+j(n[0])+","+j(n[1])+" C",e=n.length,r=2;r<e;r++)i+=j(n[r++])+","+j(n[r++])+" "+j(n[r++])+","+j(n[r++])+" "+j(n[r++])+","+j(n[r])+" ";n.closed&&(i+="z")}return i}},"./node_modules/html-entities/lib/html4-entities.js":(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s("./node_modules/html-entities/lib/surrogate-pairs.js"),n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],i=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},a={};!function(){for(var t=0,e=n.length;t<e;){var s=n[t],r=i[t];o[s]=String.fromCharCode(r),a[r]=s,t++}}();var l=function(){function t(){}return t.prototype.decode=function(t){return t&&t.length?t.replace(/&(#?[\w\d]+);?/g,(function(t,e){var s;if("#"===e.charAt(0)){var n="x"===e.charAt(1).toLowerCase()?parseInt(e.substr(2),16):parseInt(e.substr(1));(!isNaN(n)||n>=-32768)&&(s=n<=65535?String.fromCharCode(n):r.fromCodePoint(n))}else s=o[e];return s||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encode=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",r=0;r<e;){var n=a[t.charCodeAt(r)];s+=n?"&"+n+";":t.charAt(r),r++}return s},t.encode=function(e){return(new t).encode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var i=t.charCodeAt(n),o=a[i];o?s+="&"+o+";":i<32||i>126?i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n++):s+="&#"+i+";":s+=t.charAt(n),n++}return s},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?s+=t[n++]:(i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n++):s+="&#"+i+";",n++)}return s},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s("./node_modules/html-entities/lib/surrogate-pairs.js"),n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],i=[["NewLine",[10]]],o={},a={};!function(t,e){var s=n.length;for(;s--;){var r=n[s],o=r[0],a=r[1],l=a[0],h=a[1],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;u&&(c=e[l]=e[l]||{}),h?(t[o]=String.fromCharCode(l)+String.fromCharCode(h),u&&(c[h]=o)):(t[o]=String.fromCharCode(l),u&&(c[""]=o))}s=i.length;for(;s--;){var d=i[s],p=(o=d[0],d[1]);l=p[0],h=p[1];t[o]=String.fromCharCode(l)+(h?String.fromCharCode(h):"")}}(o,a);var l=function(){function t(){}return t.prototype.decode=function(t){return t&&t.length?t.replace(/&(#?[\w\d]+);?/g,(function(t,e){var s;if("#"===e.charAt(0)){var n="x"===e.charAt(1)?parseInt(e.substr(2).toLowerCase(),16):parseInt(e.substr(1));(!isNaN(n)||n>=-32768)&&(s=n<=65535?String.fromCharCode(n):r.fromCodePoint(n))}else s=o[e];return s||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encode=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",r=0;r<e;){var n=a[t.charCodeAt(r)];if(n){var i=n[t.charCodeAt(r+1)];if(i?r++:i=n[""],i){s+="&"+i+";",r++;continue}}s+=t.charAt(r),r++}return s},t.encode=function(e){return(new t).encode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var i=t.charCodeAt(n),o=a[i];if(o){var l=o[t.charCodeAt(n+1)];if(l?n++:l=o[""],l){s+="&"+l+";",n++;continue}}i<32||i>126?i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n++):s+="&#"+i+";":s+=t.charAt(n),n++}return s},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?s+=t[n++]:i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n+=2):(s+="&#"+i+";",n++)}return s},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s("./node_modules/html-entities/lib/xml-entities.js");e.XmlEntities=r.XmlEntities;var n=s("./node_modules/html-entities/lib/html4-entities.js");e.Html4Entities=n.Html4Entities;var i=s("./node_modules/html-entities/lib/html5-entities.js");e.Html5Entities=i.Html5Entities,e.AllHtmlEntities=i.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fromCodePoint=String.fromCodePoint||function(t){return String.fromCharCode(Math.floor((t-65536)/1024)+55296,(t-65536)%1024+56320)},e.getCodePoint=String.prototype.codePointAt?function(t,e){return t.codePointAt(e)}:function(t,e){return 1024*(t.charCodeAt(e)-55296)+t.charCodeAt(e+1)-56320+65536},e.highSurrogateFrom=55296,e.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=s("./node_modules/html-entities/lib/surrogate-pairs.js"),n={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},i={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function t(){}return t.prototype.encode=function(t){return t&&t.length?t.replace(/[<>"'&]/g,(function(t){return o[t]})):""},t.encode=function(e){return(new t).encode(e)},t.prototype.decode=function(t){return t&&t.length?t.replace(/&#?[0-9a-zA-Z]+;?/g,(function(t){if("#"===t.charAt(1)){var e="x"===t.charAt(2).toLowerCase()?parseInt(t.substr(3),16):parseInt(t.substr(2));return!isNaN(e)||e>=-32768?e<=65535?String.fromCharCode(e):r.fromCodePoint(e):""}return n[t]||t})):""},t.decode=function(e){return(new t).decode(e)},t.prototype.encodeNonUTF=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var o=t.charCodeAt(n),a=i[o];a?(s+="&"+a+";",n++):(o<32||o>126?o>=r.highSurrogateFrom&&o<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n++):s+="&#"+o+";":s+=t.charAt(n),n++)}return s},t.encodeNonUTF=function(e){return(new t).encodeNonUTF(e)},t.prototype.encodeNonASCII=function(t){if(!t||!t.length)return"";for(var e=t.length,s="",n=0;n<e;){var i=t.charCodeAt(n);i<=255?s+=t[n++]:(i>=r.highSurrogateFrom&&i<=r.highSurrogateTo?(s+="&#"+r.getCodePoint(t,n)+";",n++):s+="&#"+i+";",n++)}return s},t.encodeNonASCII=function(e){return(new t).encodeNonASCII(e)},t}();e.XmlEntities=a},"./node_modules/lodash/_DataView.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"DataView");t.exports=r},"./node_modules/lodash/_Hash.js":(t,e,s)=>{var r=s("./node_modules/lodash/_hashClear.js"),n=s("./node_modules/lodash/_hashDelete.js"),i=s("./node_modules/lodash/_hashGet.js"),o=s("./node_modules/lodash/_hashHas.js"),a=s("./node_modules/lodash/_hashSet.js");function l(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_ListCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_listCacheClear.js"),n=s("./node_modules/lodash/_listCacheDelete.js"),i=s("./node_modules/lodash/_listCacheGet.js"),o=s("./node_modules/lodash/_listCacheHas.js"),a=s("./node_modules/lodash/_listCacheSet.js");function l(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_Map.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Map");t.exports=r},"./node_modules/lodash/_MapCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_mapCacheClear.js"),n=s("./node_modules/lodash/_mapCacheDelete.js"),i=s("./node_modules/lodash/_mapCacheGet.js"),o=s("./node_modules/lodash/_mapCacheHas.js"),a=s("./node_modules/lodash/_mapCacheSet.js");function l(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,t.exports=l},"./node_modules/lodash/_Promise.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Promise");t.exports=r},"./node_modules/lodash/_Set.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Set");t.exports=r},"./node_modules/lodash/_SetCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_MapCache.js"),n=s("./node_modules/lodash/_setCacheAdd.js"),i=s("./node_modules/lodash/_setCacheHas.js");function o(t){var e=-1,s=null==t?0:t.length;for(this.__data__=new r;++e<s;)this.add(t[e])}o.prototype.add=o.prototype.push=n,o.prototype.has=i,t.exports=o},"./node_modules/lodash/_Stack.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js"),n=s("./node_modules/lodash/_stackClear.js"),i=s("./node_modules/lodash/_stackDelete.js"),o=s("./node_modules/lodash/_stackGet.js"),a=s("./node_modules/lodash/_stackHas.js"),l=s("./node_modules/lodash/_stackSet.js");function h(t){var e=this.__data__=new r(t);this.size=e.size}h.prototype.clear=n,h.prototype.delete=i,h.prototype.get=o,h.prototype.has=a,h.prototype.set=l,t.exports=h},"./node_modules/lodash/_Symbol.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js").Symbol;t.exports=r},"./node_modules/lodash/_Uint8Array.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js").Uint8Array;t.exports=r},"./node_modules/lodash/_WeakMap.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"WeakMap");t.exports=r},"./node_modules/lodash/_arrayEach.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length;++s<r&&!1!==e(t[s],s,t););return t}},"./node_modules/lodash/_arrayFilter.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length,n=0,i=[];++s<r;){var o=t[s];e(o,s,t)&&(i[n++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseTimes.js"),n=s("./node_modules/lodash/isArguments.js"),i=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/isBuffer.js"),a=s("./node_modules/lodash/_isIndex.js"),l=s("./node_modules/lodash/isTypedArray.js"),h=Object.prototype.hasOwnProperty;t.exports=function(t,e){var s=i(t),u=!s&&n(t),c=!s&&!u&&o(t),d=!s&&!u&&!c&&l(t),p=s||u||c||d,f=p?r(t.length,String):[],m=f.length;for(var g in t)!e&&!h.call(t,g)||p&&("length"==g||c&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length,n=Array(r);++s<r;)n[s]=e(t[s],s,t);return n}},"./node_modules/lodash/_arrayPush.js":t=>{t.exports=function(t,e){for(var s=-1,r=e.length,n=t.length;++s<r;)t[n+s]=e[s];return t}},"./node_modules/lodash/_arraySome.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length;++s<r;)if(e(t[s],s,t))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(t,e,s)=>{var r=s("./node_modules/lodash/eq.js");t.exports=function(t,e){for(var s=t.length;s--;)if(r(t[s][0],e))return s;return-1}},"./node_modules/lodash/_baseEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseForOwn.js"),n=s("./node_modules/lodash/_createBaseEach.js")(r);t.exports=n},"./node_modules/lodash/_baseFor.js":(t,e,s)=>{var r=s("./node_modules/lodash/_createBaseFor.js")();t.exports=r},"./node_modules/lodash/_baseForOwn.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseFor.js"),n=s("./node_modules/lodash/keys.js");t.exports=function(t,e){return t&&r(t,e,n)}},"./node_modules/lodash/_baseGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_castPath.js"),n=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){for(var s=0,i=(e=r(e,t)).length;null!=t&&s<i;)t=t[n(e[s++])];return s&&s==i?t:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayPush.js"),n=s("./node_modules/lodash/isArray.js");t.exports=function(t,e,s){var i=e(t);return n(t)?i:r(i,s(t))}},"./node_modules/lodash/_baseGetTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_getRawTag.js"),i=s("./node_modules/lodash/_objectToString.js"),o=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":o&&o in Object(t)?n(t):i(t)}},"./node_modules/lodash/_baseHasIn.js":t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},"./node_modules/lodash/_baseIsArguments.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return n(t)&&"[object Arguments]"==r(t)}},"./node_modules/lodash/_baseIsEqual.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsEqualDeep.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function t(e,s,i,o,a){return e===s||(null==e||null==s||!n(e)&&!n(s)?e!=e&&s!=s:r(e,s,i,o,t,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Stack.js"),n=s("./node_modules/lodash/_equalArrays.js"),i=s("./node_modules/lodash/_equalByTag.js"),o=s("./node_modules/lodash/_equalObjects.js"),a=s("./node_modules/lodash/_getTag.js"),l=s("./node_modules/lodash/isArray.js"),h=s("./node_modules/lodash/isBuffer.js"),u=s("./node_modules/lodash/isTypedArray.js"),c="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,m,g,v){var _=l(t),y=l(e),b=_?d:a(t),w=y?d:a(e),x=(b=b==c?p:b)==p,j=(w=w==c?p:w)==p,E=b==w;if(E&&h(t)){if(!h(e))return!1;_=!0,x=!1}if(E&&!x)return v||(v=new r),_||u(t)?n(t,e,s,m,g,v):i(t,e,b,s,m,g,v);if(!(1&s)){var T=x&&f.call(t,"__wrapped__"),A=j&&f.call(e,"__wrapped__");if(T||A){var C=T?t.value():t,S=A?e.value():e;return v||(v=new r),g(C,S,s,m,v)}}return!!E&&(v||(v=new r),o(t,e,s,m,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Stack.js"),n=s("./node_modules/lodash/_baseIsEqual.js");t.exports=function(t,e,s,i){var o=s.length,a=o,l=!i;if(null==t)return!a;for(t=Object(t);o--;){var h=s[o];if(l&&h[2]?h[1]!==t[h[0]]:!(h[0]in t))return!1}for(;++o<a;){var u=(h=s[o])[0],c=t[u],d=h[1];if(l&&h[2]){if(void 0===c&&!(u in t))return!1}else{var p=new r;if(i)var f=i(c,d,u,t,e,p);if(!(void 0===f?n(d,c,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(t,e,s)=>{var r=s("./node_modules/lodash/isFunction.js"),n=s("./node_modules/lodash/_isMasked.js"),i=s("./node_modules/lodash/isObject.js"),o=s("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,h=Object.prototype,u=l.toString,c=h.hasOwnProperty,d=RegExp("^"+u.call(c).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||n(t))&&(r(t)?d:a).test(o(t))}},"./node_modules/lodash/_baseIsTypedArray.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isLength.js"),i=s("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&n(t.length)&&!!o[r(t)]}},"./node_modules/lodash/_baseIteratee.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseMatches.js"),n=s("./node_modules/lodash/_baseMatchesProperty.js"),i=s("./node_modules/lodash/identity.js"),o=s("./node_modules/lodash/isArray.js"),a=s("./node_modules/lodash/property.js");t.exports=function(t){return"function"==typeof t?t:null==t?i:"object"==typeof t?o(t)?n(t[0],t[1]):r(t):a(t)}},"./node_modules/lodash/_baseKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isPrototype.js"),n=s("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return n(t);var e=[];for(var s in Object(t))i.call(t,s)&&"constructor"!=s&&e.push(s);return e}},"./node_modules/lodash/_baseMap.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseEach.js"),n=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){var s=-1,i=n(t)?Array(t.length):[];return r(t,(function(t,r,n){i[++s]=e(t,r,n)})),i}},"./node_modules/lodash/_baseMatches.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsMatch.js"),n=s("./node_modules/lodash/_getMatchData.js"),i=s("./node_modules/lodash/_matchesStrictComparable.js");t.exports=function(t){var e=n(t);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(s){return s===t||r(s,t,e)}}},"./node_modules/lodash/_baseMatchesProperty.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsEqual.js"),n=s("./node_modules/lodash/get.js"),i=s("./node_modules/lodash/hasIn.js"),o=s("./node_modules/lodash/_isKey.js"),a=s("./node_modules/lodash/_isStrictComparable.js"),l=s("./node_modules/lodash/_matchesStrictComparable.js"),h=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){return o(t)&&a(e)?l(h(t),e):function(s){var o=n(s,t);return void 0===o&&o===e?i(s,t):r(e,o,3)}}},"./node_modules/lodash/_baseProperty.js":t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},"./node_modules/lodash/_basePropertyDeep.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGet.js");t.exports=function(t){return function(e){return r(e,t)}}},"./node_modules/lodash/_baseTimes.js":t=>{t.exports=function(t,e){for(var s=-1,r=Array(t);++s<t;)r[s]=e(s);return r}},"./node_modules/lodash/_baseToString.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_arrayMap.js"),i=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/isSymbol.js"),a=r?r.prototype:void 0,l=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return n(e,t)+"";if(o(e))return l?l.call(e):"";var s=e+"";return"0"==s&&1/e==-Infinity?"-0":s}},"./node_modules/lodash/_baseUnary.js":t=>{t.exports=function(t){return function(e){return t(e)}}},"./node_modules/lodash/_cacheHas.js":t=>{t.exports=function(t,e){return t.has(e)}},"./node_modules/lodash/_castFunction.js":(t,e,s)=>{var r=s("./node_modules/lodash/identity.js");t.exports=function(t){return"function"==typeof t?t:r}},"./node_modules/lodash/_castPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArray.js"),n=s("./node_modules/lodash/_isKey.js"),i=s("./node_modules/lodash/_stringToPath.js"),o=s("./node_modules/lodash/toString.js");t.exports=function(t,e){return r(t)?t:n(t,e)?[t]:i(o(t))}},"./node_modules/lodash/_coreJsData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js")["__core-js_shared__"];t.exports=r},"./node_modules/lodash/_createBaseEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){return function(s,n){if(null==s)return s;if(!r(s))return t(s,n);for(var i=s.length,o=e?i:-1,a=Object(s);(e?o--:++o<i)&&!1!==n(a[o],o,a););return s}}},"./node_modules/lodash/_createBaseFor.js":t=>{t.exports=function(t){return function(e,s,r){for(var n=-1,i=Object(e),o=r(e),a=o.length;a--;){var l=o[t?a:++n];if(!1===s(i[l],l,i))break}return e}}},"./node_modules/lodash/_equalArrays.js":(t,e,s)=>{var r=s("./node_modules/lodash/_SetCache.js"),n=s("./node_modules/lodash/_arraySome.js"),i=s("./node_modules/lodash/_cacheHas.js");t.exports=function(t,e,s,o,a,l){var h=1&s,u=t.length,c=e.length;if(u!=c&&!(h&&c>u))return!1;var d=l.get(t),p=l.get(e);if(d&&p)return d==e&&p==t;var f=-1,m=!0,g=2&s?new r:void 0;for(l.set(t,e),l.set(e,t);++f<u;){var v=t[f],_=e[f];if(o)var y=h?o(_,v,f,e,t,l):o(v,_,f,t,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!n(e,(function(t,e){if(!i(g,e)&&(v===t||a(v,t,s,o,l)))return g.push(e)}))){m=!1;break}}else if(v!==_&&!a(v,_,s,o,l)){m=!1;break}}return l.delete(t),l.delete(e),m}},"./node_modules/lodash/_equalByTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_Uint8Array.js"),i=s("./node_modules/lodash/eq.js"),o=s("./node_modules/lodash/_equalArrays.js"),a=s("./node_modules/lodash/_mapToArray.js"),l=s("./node_modules/lodash/_setToArray.js"),h=r?r.prototype:void 0,u=h?h.valueOf:void 0;t.exports=function(t,e,s,r,h,c,d){switch(s){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!c(new n(t),new n(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=a;case"[object Set]":var f=1&r;if(p||(p=l),t.size!=e.size&&!f)return!1;var m=d.get(t);if(m)return m==e;r|=2,d.set(t,e);var g=o(p(t),p(e),r,h,c,d);return d.delete(t),g;case"[object Symbol]":if(u)return u.call(t)==u.call(e)}return!1}},"./node_modules/lodash/_equalObjects.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,i,o,a){var l=1&s,h=r(t),u=h.length;if(u!=r(e).length&&!l)return!1;for(var c=u;c--;){var d=h[c];if(!(l?d in e:n.call(e,d)))return!1}var p=a.get(t),f=a.get(e);if(p&&f)return p==e&&f==t;var m=!0;a.set(t,e),a.set(e,t);for(var g=l;++c<u;){var v=t[d=h[c]],_=e[d];if(i)var y=l?i(_,v,d,e,t,a):i(v,_,d,t,e,a);if(!(void 0===y?v===_||o(v,_,s,i,a):y)){m=!1;break}g||(g="constructor"==d)}if(m&&!g){var b=t.constructor,w=e.constructor;b==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(t),a.delete(e),m}},"./node_modules/lodash/_freeGlobal.js":(t,e,s)=>{var r="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g;t.exports=r},"./node_modules/lodash/_getAllKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetAllKeys.js"),n=s("./node_modules/lodash/_getSymbols.js"),i=s("./node_modules/lodash/keys.js");t.exports=function(t){return r(t,i,n)}},"./node_modules/lodash/_getMapData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isKeyable.js");t.exports=function(t,e){var s=t.__data__;return r(e)?s["string"==typeof e?"string":"hash"]:s.map}},"./node_modules/lodash/_getMatchData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isStrictComparable.js"),n=s("./node_modules/lodash/keys.js");t.exports=function(t){for(var e=n(t),s=e.length;s--;){var i=e[s],o=t[i];e[s]=[i,o,r(o)]}return e}},"./node_modules/lodash/_getNative.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsNative.js"),n=s("./node_modules/lodash/_getValue.js");t.exports=function(t,e){var s=n(t,e);return r(s)?s:void 0}},"./node_modules/lodash/_getRawTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,o=n.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),s=t[a];try{t[a]=void 0;var r=!0}catch(t){}var n=o.call(t);return r&&(e?t[a]=s:delete t[a]),n}},"./node_modules/lodash/_getSymbols.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayFilter.js"),n=s("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(t){return null==t?[]:(t=Object(t),r(o(t),(function(e){return i.call(t,e)})))}:n;t.exports=a},"./node_modules/lodash/_getTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_DataView.js"),n=s("./node_modules/lodash/_Map.js"),i=s("./node_modules/lodash/_Promise.js"),o=s("./node_modules/lodash/_Set.js"),a=s("./node_modules/lodash/_WeakMap.js"),l=s("./node_modules/lodash/_baseGetTag.js"),h=s("./node_modules/lodash/_toSource.js"),u="[object Map]",c="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",m=h(r),g=h(n),v=h(i),_=h(o),y=h(a),b=l;(r&&b(new r(new ArrayBuffer(1)))!=f||n&&b(new n)!=u||i&&b(i.resolve())!=c||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(t){var e=l(t),s="[object Object]"==e?t.constructor:void 0,r=s?h(s):"";if(r)switch(r){case m:return f;case g:return u;case v:return c;case _:return d;case y:return p}return e}),t.exports=b},"./node_modules/lodash/_getValue.js":t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},"./node_modules/lodash/_hasPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/_castPath.js"),n=s("./node_modules/lodash/isArguments.js"),i=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/_isIndex.js"),a=s("./node_modules/lodash/isLength.js"),l=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e,s){for(var h=-1,u=(e=r(e,t)).length,c=!1;++h<u;){var d=l(e[h]);if(!(c=null!=t&&s(t,d)))break;t=t[d]}return c||++h!=u?c:!!(u=null==t?0:t.length)&&a(u)&&o(d,u)&&(i(t)||n(t))}},"./node_modules/lodash/_hashClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(){this.__data__=r?r(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},"./node_modules/lodash/_hashGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var s=e[t];return"__lodash_hash_undefined__"===s?void 0:s}return n.call(e,t)?e[t]:void 0}},"./node_modules/lodash/_hashHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:n.call(e,t)}},"./node_modules/lodash/_hashSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(t,e){var s=this.__data__;return this.size+=this.has(t)?0:1,s[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},"./node_modules/lodash/_isIndex.js":t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,s){var r=typeof t;return!!(s=null==s?9007199254740991:s)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<s}},"./node_modules/lodash/_isKey.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArray.js"),n=s("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var s=typeof t;return!("number"!=s&&"symbol"!=s&&"boolean"!=s&&null!=t&&!n(t))||(o.test(t)||!i.test(t)||null!=e&&t in Object(e))}},"./node_modules/lodash/_isKeyable.js":t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},"./node_modules/lodash/_isMasked.js":(t,e,s)=>{var r,n=s("./node_modules/lodash/_coreJsData.js"),i=(r=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},"./node_modules/lodash/_isPrototype.js":t=>{var e=Object.prototype;t.exports=function(t){var s=t&&t.constructor;return t===("function"==typeof s&&s.prototype||e)}},"./node_modules/lodash/_isStrictComparable.js":(t,e,s)=>{var r=s("./node_modules/lodash/isObject.js");t.exports=function(t){return t==t&&!r(t)}},"./node_modules/lodash/_listCacheClear.js":t=>{t.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;t.exports=function(t){var e=this.__data__,s=r(e,t);return!(s<0)&&(s==e.length-1?e.pop():n.call(e,s,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){var e=this.__data__,s=r(e,t);return s<0?void 0:e[s][1]}},"./node_modules/lodash/_listCacheHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){return r(this.__data__,t)>-1}},"./node_modules/lodash/_listCacheSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t,e){var s=this.__data__,n=r(s,t);return n<0?(++this.size,s.push([t,e])):s[n][1]=e,this}},"./node_modules/lodash/_mapCacheClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Hash.js"),n=s("./node_modules/lodash/_ListCache.js"),i=s("./node_modules/lodash/_Map.js");t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||n),string:new r}}},"./node_modules/lodash/_mapCacheDelete.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},"./node_modules/lodash/_mapCacheGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return r(this,t).get(t)}},"./node_modules/lodash/_mapCacheHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return r(this,t).has(t)}},"./node_modules/lodash/_mapCacheSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t,e){var s=r(this,t),n=s.size;return s.set(t,e),this.size+=s.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t,r){s[++e]=[r,t]})),s}},"./node_modules/lodash/_matchesStrictComparable.js":t=>{t.exports=function(t,e){return function(s){return null!=s&&(s[t]===e&&(void 0!==e||t in Object(s)))}}},"./node_modules/lodash/_memoizeCapped.js":(t,e,s)=>{var r=s("./node_modules/lodash/memoize.js");t.exports=function(t){var e=r(t,(function(t){return 500===s.size&&s.clear(),t})),s=e.cache;return e}},"./node_modules/lodash/_nativeCreate.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(Object,"create");t.exports=r},"./node_modules/lodash/_nativeKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_overArg.js")(Object.keys,Object);t.exports=r},"./node_modules/lodash/_nodeUtil.js":(t,e,s)=>{t=s.nmd(t);var r=s("./node_modules/lodash/_freeGlobal.js"),n=e&&!e.nodeType&&e,i=n&&t&&!t.nodeType&&t,o=i&&i.exports===n&&r.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||o&&o.binding&&o.binding("util")}catch(t){}}();t.exports=a},"./node_modules/lodash/_objectToString.js":t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},"./node_modules/lodash/_overArg.js":t=>{t.exports=function(t,e){return function(s){return t(e(s))}}},"./node_modules/lodash/_root.js":(t,e,s)=>{var r=s("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=r||n||Function("return this")();t.exports=i},"./node_modules/lodash/_setCacheAdd.js":t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_setToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t){s[++e]=t})),s}},"./node_modules/lodash/_stackClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js");t.exports=function(){this.__data__=new r,this.size=0}},"./node_modules/lodash/_stackDelete.js":t=>{t.exports=function(t){var e=this.__data__,s=e.delete(t);return this.size=e.size,s}},"./node_modules/lodash/_stackGet.js":t=>{t.exports=function(t){return this.__data__.get(t)}},"./node_modules/lodash/_stackHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_stackSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js"),n=s("./node_modules/lodash/_Map.js"),i=s("./node_modules/lodash/_MapCache.js");t.exports=function(t,e){var s=this.__data__;if(s instanceof r){var o=s.__data__;if(!n||o.length<199)return o.push([t,e]),this.size=++s.size,this;s=this.__data__=new i(o)}return s.set(t,e),this.size=s.size,this}},"./node_modules/lodash/_stringToPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(n,(function(t,s,r,n){e.push(r?n.replace(i,"$1"):s||t)})),e}));t.exports=o},"./node_modules/lodash/_toKey.js":(t,e,s)=>{var r=s("./node_modules/lodash/isSymbol.js");t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},"./node_modules/lodash/_toSource.js":t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},"./node_modules/lodash/each.js":(t,e,s)=>{t.exports=s("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},"./node_modules/lodash/forEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayEach.js"),n=s("./node_modules/lodash/_baseEach.js"),i=s("./node_modules/lodash/_castFunction.js"),o=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?r:n)(t,i(e))}},"./node_modules/lodash/get.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGet.js");t.exports=function(t,e,s){var n=null==t?void 0:r(t,e);return void 0===n?s:n}},"./node_modules/lodash/hasIn.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseHasIn.js"),n=s("./node_modules/lodash/_hasPath.js");t.exports=function(t,e){return null!=t&&n(t,e,r)}},"./node_modules/lodash/identity.js":t=>{t.exports=function(t){return t}},"./node_modules/lodash/isArguments.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsArguments.js"),n=s("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(t){return n(t)&&o.call(t,"callee")&&!a.call(t,"callee")};t.exports=l},"./node_modules/lodash/isArray.js":t=>{var e=Array.isArray;t.exports=e},"./node_modules/lodash/isArrayLike.js":(t,e,s)=>{var r=s("./node_modules/lodash/isFunction.js"),n=s("./node_modules/lodash/isLength.js");t.exports=function(t){return null!=t&&n(t.length)&&!r(t)}},"./node_modules/lodash/isBuffer.js":(t,e,s)=>{t=s.nmd(t);var r=s("./node_modules/lodash/_root.js"),n=s("./node_modules/lodash/stubFalse.js"),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,a=o&&o.exports===i?r.Buffer:void 0,l=(a?a.isBuffer:void 0)||n;t.exports=l},"./node_modules/lodash/isFunction.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObject.js");t.exports=function(t){if(!n(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},"./node_modules/lodash/isLength.js":t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},"./node_modules/lodash/isObject.js":t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},"./node_modules/lodash/isObjectLike.js":t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},"./node_modules/lodash/isSymbol.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return"symbol"==typeof t||n(t)&&"[object Symbol]"==r(t)}},"./node_modules/lodash/isTypedArray.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsTypedArray.js"),n=s("./node_modules/lodash/_baseUnary.js"),i=s("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?n(o):r;t.exports=a},"./node_modules/lodash/keys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayLikeKeys.js"),n=s("./node_modules/lodash/_baseKeys.js"),i=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t){return i(t)?r(t):n(t)}},"./node_modules/lodash/map.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayMap.js"),n=s("./node_modules/lodash/_baseIteratee.js"),i=s("./node_modules/lodash/_baseMap.js"),o=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?r:i)(t,n(e,3))}},"./node_modules/lodash/memoize.js":(t,e,s)=>{var r=s("./node_modules/lodash/_MapCache.js");function n(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var s=function(){var r=arguments,n=e?e.apply(this,r):r[0],i=s.cache;if(i.has(n))return i.get(n);var o=t.apply(this,r);return s.cache=i.set(n,o)||i,o};return s.cache=new(n.Cache||r),s}n.Cache=r,t.exports=n},"./node_modules/lodash/property.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseProperty.js"),n=s("./node_modules/lodash/_basePropertyDeep.js"),i=s("./node_modules/lodash/_isKey.js"),o=s("./node_modules/lodash/_toKey.js");t.exports=function(t){return i(t)?r(o(t)):n(t)}},"./node_modules/lodash/stubArray.js":t=>{t.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":t=>{t.exports=function(){return!1}},"./node_modules/lodash/toString.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseToString.js");t.exports=function(t){return null==t?"":r(t)}},"./node_modules/loglevel/lib/loglevel.js":function(t,e,s){var r,n;!function(i,o){"use strict";r=function(){var t=function(){},e="undefined",s=typeof window!==e&&typeof window.navigator!==e&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"];function n(t,e){var s=t[e];if("function"==typeof s.bind)return s.bind(t);try{return Function.prototype.bind.call(s,t)}catch(e){return function(){return Function.prototype.apply.apply(s,[t,arguments])}}}function i(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function o(r){return"debug"===r&&(r="log"),typeof console!==e&&("trace"===r&&s?i:void 0!==console[r]?n(console,r):void 0!==console.log?n(console,"log"):t)}function a(e,s){for(var n=0;n<r.length;n++){var i=r[n];this[i]=n<e?t:this.methodFactory(i,e,s)}this.log=this.debug}function l(t,s,r){return function(){typeof console!==e&&(a.call(this,s,r),this[t].apply(this,arguments))}}function h(t,e,s){return o(t)||l.apply(this,arguments)}function u(t,s,n){var i,o=this,l="loglevel";function u(t){var s=(r[t]||"silent").toUpperCase();if(typeof window!==e&&l){try{return void(window.localStorage[l]=s)}catch(t){}try{window.document.cookie=encodeURIComponent(l)+"="+s+";"}catch(t){}}}function c(){var t;if(typeof window!==e&&l){try{t=window.localStorage[l]}catch(t){}if(typeof t===e)try{var s=window.document.cookie,r=s.indexOf(encodeURIComponent(l)+"=");-1!==r&&(t=/^([^;]+)/.exec(s.slice(r))[1])}catch(t){}return void 0===o.levels[t]&&(t=void 0),t}}"string"==typeof t?l+=":"+t:"symbol"==typeof t&&(l=void 0),o.name=t,o.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},o.methodFactory=n||h,o.getLevel=function(){return i},o.setLevel=function(s,r){if("string"==typeof s&&void 0!==o.levels[s.toUpperCase()]&&(s=o.levels[s.toUpperCase()]),!("number"==typeof s&&s>=0&&s<=o.levels.SILENT))throw"log.setLevel() called with invalid level: "+s;if(i=s,!1!==r&&u(s),a.call(o,s,t),typeof console===e&&s<o.levels.SILENT)return"No console available for logging"},o.setDefaultLevel=function(t){c()||o.setLevel(t,!1)},o.enableAll=function(t){o.setLevel(o.levels.TRACE,t)},o.disableAll=function(t){o.setLevel(o.levels.SILENT,t)};var d=c();null==d&&(d=null==s?"WARN":s),o.setLevel(d,!1)}var c=new u,d={};c.getLogger=function(t){if("symbol"!=typeof t&&"string"!=typeof t||""===t)throw new TypeError("You must supply a name when creating a logger.");var e=d[t];return e||(e=d[t]=new u(t,c.getLevel(),c.methodFactory)),e};var p=typeof window!==e?window.log:void 0;return c.noConflict=function(){return typeof window!==e&&window.log===c&&(window.log=p),c},c.getLoggers=function(){return d},c.default=c,c},void 0===(n="function"==typeof r?r.call(e,s,e,t):r)||(t.exports=n)}()},"./node_modules/normalize-wheel/index.js":(t,e,s)=>{t.exports=s("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),s={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=s},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,s,r,n,i,o,a,l,h,u,c,d,p,f,m,g=!1;function v(){if(!g){g=!0;var t=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),_=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(d=/\b(iPhone|iP[ao]d)/.exec(t),p=/\b(iP[ao]d)/.exec(t),u=/Android/i.exec(t),f=/FBAN\/\w+;/i.exec(t),m=/Mobile/i.exec(t),c=!!/Win64/.exec(t),v){(e=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(t);o=y?parseFloat(y[1])+4:e,s=v[2]?parseFloat(v[2]):NaN,r=v[3]?parseFloat(v[3]):NaN,(n=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(t),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else e=s=r=i=n=NaN;if(_){if(_[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!_[2],h=!!_[3]}else a=l=h=!1}}var _={ie:function(){return v()||e},ieCompatibilityMode:function(){return v()||o>e},ie64:function(){return _.ie()&&c},firefox:function(){return v()||s},opera:function(){return v()||r},webkit:function(){return v()||n},safari:function(){return _.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||h},iphone:function(){return v()||d},mobile:function(){return v()||d||p||u||m},nativeApp:function(){return v()||f},android:function(){return v()||u},ipad:function(){return v()||p}};t.exports=_},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,s)=>{"use strict";var r,n=s("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!n.canUseDOM||e&&!("addEventListener"in document))return!1;var s="on"+t,i=s in document;if(!i){var o=document.createElement("div");o.setAttribute(s,"return;"),i="function"==typeof o[s]}return!i&&r&&"wheel"===t&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,s)=>{"use strict";var r=s("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=s("./node_modules/normalize-wheel/src/isEventSupported.js");function i(t){var e=0,s=0,r=0,n=0;return"detail"in t&&(s=t.detail),"wheelDelta"in t&&(s=-t.wheelDelta/120),"wheelDeltaY"in t&&(s=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=s,s=0),r=10*e,n=10*s,"deltaY"in t&&(n=t.deltaY),"deltaX"in t&&(r=t.deltaX),(r||n)&&t.deltaMode&&(1==t.deltaMode?(r*=40,n*=40):(r*=800,n*=800)),r&&!e&&(e=r<1?-1:1),n&&!s&&(s=n<1?-1:1),{spinX:e,spinY:s,pixelX:r,pixelY:n}}i.getEventType=function(){return r.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},t.exports=i},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Camera:()=>h});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),i=s("./node_modules/ogl/src/math/Vec3.js");const o=new n.Mat4,a=new i.Vec3,l=new i.Vec3;class h extends r.Transform{constructor(t,{near:e=.1,far:s=100,fov:r=45,aspect:o=1,left:a,right:l,bottom:h,top:u,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:s,fov:r,aspect:o,left:a,right:l,bottom:h,top:u,zoom:c}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:r=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:r}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:r,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:r=this.right,bottom:n=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:r,bottom:n,top:i,zoom:o}),s/=o,r/=o,n/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:s,right:r,bottom:n,top:i,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(o.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=a;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=l;for(let r=0;r<6;r++){const n=this.frustum[r];if(s.copy(n).dot(t)+n.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Geometry:()=>l});var r=s("./node_modules/ogl/src/math/Vec3.js");const n=new r.Vec3;let i=1,o=1,a=!1;class l{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=o++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.buffer||(e.buffer=this.gl.createBuffer(),this.updateAttribute(e)),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),this.gl.bufferData(t.target,t.data,this.gl.STATIC_DRAW),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let n=1;35674===s&&(n=2),35675===s&&(n=3),35676===s&&(n=4);const i=r.size/n,o=1===n?0:n*n*n,a=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,i,r.type,r.normalized,r.stride+o,r.offset+e*a),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.offset||0,n=t.stride||t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const i=this.bounds.min,o=this.bounds.max,a=this.bounds.center,l=this.bounds.scale;i.set(1/0),o.set(-1/0);for(let t=s,r=e.length;t<r;t+=n){const s=e[t],r=e[t+1],n=e[t+2];i.x=Math.min(s,i.x),i.y=Math.min(r,i.y),i.z=Math.min(n,i.z),o.x=Math.max(s,o.x),o.y=Math.max(r,o.y),o.z=Math.max(n,o.z)}l.sub(o,i),a.add(i,o).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.offset||0,r=t.stride||t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=s,o=e.length;t<o;t+=r)n.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mesh:()=>a});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/math/Mat3.js"),i=s("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends r.Transform{constructor(t,{geometry:e,program:s,mode:r=t.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=o++,this.geometry=e,this.program=s,this.mode=r,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Program:()=>i});let r=1;const n={};class i{constructor(t,{vertex:e,fragment:s,uniforms:n={},transparent:i=!1,cullFace:o=t.BACK,frontFace:l=t.CCW,depthTest:h=!0,depthWrite:u=!0,depthFunc:c=t.LESS}={}){t.canvas||console.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=r++,e||console.warn("vertex shader not supplied"),s||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=h,this.depthWrite=u,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=t.createShader(t.VERTEX_SHADER);t.shaderSource(d,e),t.compileShader(d),""!==t.getShaderInfoLog(d)&&console.warn(`${t.getShaderInfoLog(d)}\nVertex Shader\n${a(e)}`);const p=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(p,s),t.compileShader(p),""!==t.getShaderInfoLog(p)&&console.warn(`${t.getShaderInfoLog(p)}\nFragment Shader\n${a(s)}`),this.program=t.createProgram(),t.attachShader(this.program,d),t.attachShader(this.program,p),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(d),t.deleteShader(p),this.uniformLocations=new Map;let f=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<f;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const r=s.name.match(/(\w+)/g);s.uniformName=r[0],3===r.length?(s.isStructArray=!0,s.structIndex=Number(r[1]),s.structProperty=r[2]):2===r.length&&isNaN(Number(r[1]))&&(s.isStruct=!0,s.structProperty=r[1])}this.attributeLocations=new Map;const m=[],g=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<g;e++){const s=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,s.name);m[r]=s.name,this.attributeLocations.set(s,r)}this.attributeOrder=m.join("")}setBlendFunc(t,e,s,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let r=s.uniformName,n=this.uniforms[r];if(s.isStruct&&(n=n[s.structProperty],r+=`.${s.structProperty}`),s.isStructArray&&(n=n[s.structIndex][s.structProperty],r+=`[${s.structIndex}].${s.structProperty}`),!n)return h(`Active uniform ${r} has not been supplied`);if(n&&void 0===n.value)return h(`${r} uniform is missing a value parameter`);if(n.value.texture)return e+=1,n.value.update(e),o(this.gl,s.type,t,e);if(n.value.length&&n.value[0].texture){const r=[];return n.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),o(this.gl,s.type,t,r)}o(this.gl,s.type,t,n.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(t,e,s,r){r=r.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const r=e*s;let i=n[r];i||(n[r]=i=new Float32Array(r));for(let r=0;r<e;r++)i.set(t[r],r*s);return i}(r):r;const i=t.renderer.state.uniformLocations.get(s);if(r.length)if(void 0===i||i.length!==r.length)t.renderer.state.uniformLocations.set(s,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,r=t.length;s<r;s++)if(t[s]!==e[s])return!1;return!0}(i,r))return;i.set?i.set(r):function(t,e){for(let s=0,r=t.length;s<r;s++)t[s]=e[s]}(i,r),t.renderer.state.uniformLocations.set(s,i)}else{if(i===r)return;t.renderer.state.uniformLocations.set(s,r)}switch(e){case 5126:return r.length?t.uniform1fv(s,r):t.uniform1f(s,r);case 35664:return t.uniform2fv(s,r);case 35665:return t.uniform3fv(s,r);case 35666:return t.uniform4fv(s,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(s,r):t.uniform1i(s,r);case 35671:case 35667:return t.uniform2iv(s,r);case 35672:case 35668:return t.uniform3iv(s,r);case 35673:case 35669:return t.uniform4iv(s,r);case 35674:return t.uniformMatrix2fv(s,!1,r);case 35675:return t.uniformMatrix3fv(s,!1,r);case 35676:return t.uniformMatrix4fv(s,!1,r)}}function a(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function h(t){l>100||(console.warn(t),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Renderer:()=>i});const r=new(s("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:r=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:h=!1,preserveDrawingBuffer:u=!1,powerPreference:c="default",autoClear:d=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:h,preserveDrawingBuffer:u,powerPreference:c};this.dpr=r,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=h,this.autoClear=d,this.id=n++,2===p&&(this.gl=t.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",f)||t.getContext("experimental-webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.gl.viewport(0,0,t,e))}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,r){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===r||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=r,void 0!==s?this.gl.blendFuncSeparate(t,e,s,r):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:n}){let i=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||i.push(t))})),n){const t=[],s=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?s.push(i):n.push(i):t.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&e&&(i.worldMatrix.getTranslation(r),r.applyMatrix4(e.projectionViewMatrix),i.zDepth=r.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),n.sort(this.sortUI),i=t.concat(s,n)}return i}render({scene:t,camera:e,target:s=null,update:r=!0,sort:n=!0,frustumCull:i=!0,clear:o}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),r&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:i,sort:n}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Texture:()=>o});const r=new Uint8Array(4);function n(t){return 0==(t&t-1)}let i=1;class o{constructor(t,{image:e,target:s=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:n=t.RGBA,internalFormat:o=n,wrapS:a=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:h=!0,minFilter:u=(h?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:c=t.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:f=s==t.TEXTURE_2D,anisotropy:m=0,level:g=0,width:v,height:_=v}={}){this.gl=t,this.id=i++,this.image=e,this.target=s,this.type=r,this.format=n,this.internalFormat=o,this.minFilter=u,this.magFilter=c,this.wrapS=a,this.wrapT=l,this.generateMipmaps=h,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=_,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Transform:()=>a});var r=s("./node_modules/ogl/src/math/Vec3.js"),n=s("./node_modules/ogl/src/math/Quat.js"),i=s("./node_modules/ogl/src/math/Mat4.js"),o=s("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new r.Vec3,this.quaternion=new n.Quat,this.scale=new r.Vec3(1),this.rotation=new o.Euler,this.up=new r.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Plane:()=>n});var r=s("./node_modules/ogl/src/core/Geometry.js");class n extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:i=1,attributes:o={}}={}){const a=r,l=i,h=(a+1)*(l+1),u=a*l*6,c=new Float32Array(3*h),d=new Float32Array(3*h),p=new Float32Array(2*h),f=h>65536?new Uint32Array(u):new Uint16Array(u);n.buildPlane(c,d,p,f,e,s,0,a,l),Object.assign(o,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:f}}),super(t,o)}static buildPlane(t,e,s,r,n,i,o,a,l,h=0,u=1,c=2,d=1,p=-1,f=0,m=0){const g=f,v=n/a,_=i/l;for(let y=0;y<=l;y++){let b=y*_-i/2;for(let i=0;i<=a;i++,f++){let _=i*v-n/2;if(t[3*f+h]=_*d,t[3*f+u]=b*p,t[3*f+c]=o/2,e[3*f+h]=0,e[3*f+u]=0,e[3*f+c]=o>=0?1:-1,s[2*f]=i/a,s[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;r[6*m]=w,r[6*m+1]=x,r[6*m+2]=E,r[6*m+3]=x,r[6*m+4]=j,r[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/extras/Raycast.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Raycast:()=>w});var r=s("./node_modules/ogl/src/math/Vec2.js"),n=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/ogl/src/math/Mat4.js");const o=new r.Vec2,a=new r.Vec2,l=new r.Vec2,h=new n.Vec3,u=new n.Vec3,c=new n.Vec3,d=new n.Vec3,p=new n.Vec3,f=new n.Vec3,m=new n.Vec3,g=new n.Vec3,v=new n.Vec3,_=new n.Vec3,y=new n.Vec3,b=new i.Mat4;class w{constructor(){this.origin=new n.Vec3,this.direction=new n.Vec3}castMouse(t,e=[0,0]){if("orthographic"===t.type){const{left:s,right:r,bottom:n,top:i,zoom:o}=t,a=s/o+(r-s)/o*(.5*e[0]+.5),l=n/o+(i-n)/o*(.5*e[1]+.5);this.origin.set(a,l,0),this.origin.applyMatrix4(t.worldMatrix),this.direction.x=-t.worldMatrix[8],this.direction.y=-t.worldMatrix[9],this.direction.z=-t.worldMatrix[10]}else t.worldMatrix.getTranslation(this.origin),this.direction.set(e[0],e[1],.5),t.unproject(this.direction),this.direction.sub(this.origin).normalize()}intersectBounds(t,{maxDistance:e,output:s=[]}={}){Array.isArray(t)||(t=[t]);const r=b,i=h,o=u,a=s;return a.length=0,t.forEach((t=>{t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere();const s=t.geometry.bounds;let l;if(r.inverse(t.worldMatrix),e&&(o.copy(this.direction).scaleRotateMatrix4(r),l=e*o.len()),i.copy(this.origin).applyMatrix4(r),o.copy(this.direction).transformDirection(r),e&&i.distance(s.center)-s.radius>l)return;let h=0;if("sphere"===t.geometry.raycast){if(i.distance(s.center)>s.radius&&(h=this.intersectSphere(s,i,o),!h))return}else if((i.x<s.min.x||i.x>s.max.x||i.y<s.min.y||i.y>s.max.y||i.z<s.min.z||i.z>s.max.z)&&(h=this.intersectBox(s,i,o),!h))return;e&&h>l||(t.hit||(t.hit={localPoint:new n.Vec3,point:new n.Vec3}),t.hit.localPoint.copy(o).multiply(h).add(i),t.hit.point.copy(t.hit.localPoint).applyMatrix4(t.worldMatrix),t.hit.distance=t.hit.point.distance(this.origin),a.push(t))})),a.sort(((t,e)=>t.hit.distance-e.hit.distance)),a}intersectMeshes(t,{cullFace:e=!0,maxDistance:s,includeUV:i=!0,includeNormal:v=!0,output:_=[]}={}){const y=this.intersectBounds(t,{maxDistance:s,output:_});if(!y.length)return y;const w=b,x=h,j=u,E=c,T=d,A=p,C=f,S=m,M=g,O=o,L=a,P=l;for(let t=y.length-1;t>=0;t--){const o=y[t];let a;w.inverse(o.worldMatrix),s&&(j.copy(this.direction).scaleRotateMatrix4(w),a=s*j.len()),x.copy(this.origin).applyMatrix4(w),j.copy(this.direction).transformDirection(w);let l,h,u,c=0;const d=o.geometry,p=d.attributes,f=p.index,m=Math.max(0,d.drawRange.start),g=Math.min(f?f.count:p.position.count,d.drawRange.start+d.drawRange.count);for(let t=m;t<g;t+=3){const r=f?f.data[t]:t,n=f?f.data[t+1]:t+1,i=f?f.data[t+2]:t+2;E.fromArray(p.position.data,3*r),T.fromArray(p.position.data,3*n),A.fromArray(p.position.data,3*i);const o=this.intersectTriangle(E,T,A,e,x,j,S);o&&(s&&o>a||(!c||o<c)&&(c=o,l=r,h=n,u=i,C.copy(S)))}c||y.splice(t,1),o.hit.localPoint.copy(j).multiply(c).add(x),o.hit.point.copy(o.hit.localPoint).applyMatrix4(o.worldMatrix),o.hit.distance=o.hit.point.distance(this.origin),o.hit.faceNormal||(o.hit.localFaceNormal=new n.Vec3,o.hit.faceNormal=new n.Vec3,o.hit.uv=new r.Vec2,o.hit.localNormal=new n.Vec3,o.hit.normal=new n.Vec3),o.hit.localFaceNormal.copy(C),o.hit.faceNormal.copy(o.hit.localFaceNormal).transformDirection(o.worldMatrix),(i||v)&&(E.fromArray(p.position.data,3*l),T.fromArray(p.position.data,3*h),A.fromArray(p.position.data,3*u),this.getBarycoord(o.hit.localPoint,E,T,A,M)),i&&p.uv&&(O.fromArray(p.uv.data,2*l),L.fromArray(p.uv.data,2*h),P.fromArray(p.uv.data,2*u),o.hit.uv.set(O.x*M.x+L.x*M.y+P.x*M.z,O.y*M.x+L.y*M.y+P.y*M.z)),v&&p.normal&&(E.fromArray(p.normal.data,3*l),T.fromArray(p.normal.data,3*h),A.fromArray(p.normal.data,3*u),o.hit.localNormal.set(E.x*M.x+T.x*M.y+A.x*M.z,E.y*M.x+T.y*M.y+A.y*M.z,E.z*M.x+T.z*M.y+A.z*M.z),o.hit.normal.copy(o.hit.localNormal).transformDirection(o.worldMatrix))}return y.sort(((t,e)=>t.hit.distance-e.hit.distance)),y}intersectSphere(t,e=this.origin,s=this.direction){const r=c;r.sub(t.center,e);const n=r.dot(s),i=r.dot(r)-n*n,o=t.radius*t.radius;if(i>o)return 0;const a=Math.sqrt(o-i),l=n-a,h=n+a;return l<0&&h<0?0:l<0?h:l}intersectBox(t,e=this.origin,s=this.direction){let r,n,i,o,a,l;const h=1/s.x,u=1/s.y,c=1/s.z,d=t.min,p=t.max;return r=((h>=0?d.x:p.x)-e.x)*h,n=((h>=0?p.x:d.x)-e.x)*h,i=((u>=0?d.y:p.y)-e.y)*u,o=((u>=0?p.y:d.y)-e.y)*u,r>o||i>n?0:(i>r&&(r=i),o<n&&(n=o),a=((c>=0?d.z:p.z)-e.z)*c,l=((c>=0?p.z:d.z)-e.z)*c,r>l||a>n?0:(a>r&&(r=a),l<n&&(n=l),n<0?0:r>=0?r:n))}intersectTriangle(t,e,s,r=!0,n=this.origin,i=this.direction,o=m){const a=g,l=v,h=_;a.sub(e,t),l.sub(s,t),o.cross(a,l);let u,c=i.dot(o);if(!c)return 0;if(c>0){if(r)return 0;u=1}else u=-1,c=-c;h.sub(n,t);let d=u*i.dot(l.cross(h,l));if(d<0)return 0;let p=u*i.dot(a.cross(h));if(p<0)return 0;if(d+p>c)return 0;let f=-u*h.dot(o);return f<0?0:f/c}getBarycoord(t,e,s,r,n=g){const i=v,o=_,a=y;i.sub(r,e),o.sub(s,e),a.sub(t,e);const l=i.dot(i),h=i.dot(o),u=i.dot(a),c=o.dot(o),d=o.dot(a),p=l*c-h*h;if(0===p)return n.set(-2,-1,-1);const f=1/p,m=(c*u-h*d)*f,b=(l*d-h*u)*f;return n.set(1-m-b,b,m)}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Euler:()=>i});var r=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(t=0,e=t,s=t,r="YXZ"){return super(t,e,s),this.order=r,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return r.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return n.fromQuaternion(t),this.fromRotationMatrix(n,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat3:()=>n});var r=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(t=1,e=0,s=0,r=0,n=1,i=0,o=0,a=0,l=1){return super(t,e,s,r,n,i,o,a,l),this}set(t,e,s,n,i,o,a,l,h){return t.length?this.copy(t):(r.set(this,t,e,s,n,i,o,a,l,h),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat4:()=>n});var r=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(t=1,e=0,s=0,r=0,n=0,i=1,o=0,a=0,l=0,h=0,u=1,c=0,d=0,p=0,f=0,m=1){return super(t,e,s,r,n,i,o,a,l,h,u,c,d,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,n,i,o,a,l,h,u,c,d,p,f,m,g){return t.length?this.copy(t):(r.set(this,t,e,s,n,i,o,a,l,h,u,c,d,p,f,m,g),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e,s=this){return r.rotate(this,s,t,e),this}scale(t,e=this){return r.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:n}={}){return r.perspective(this,t,e,s,n),this}fromOrthogonal({left:t,right:e,bottom:s,top:n,near:i,far:o}){return r.ortho(this,t,e,s,n,i,o),this}fromQuaternion(t){return r.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return r.invert(this,t),this}compose(t,e,s){return r.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return r.getRotation(t,this),this}getTranslation(t){return r.getTranslation(t,this),this}getScaling(t){return r.getScaling(t,this),this}getMaxScaleOnAxis(){return r.getMaxScaleOnAxis(this)}lookAt(t,e,s){return r.targetTo(this,t,e,s),this}determinant(){return r.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Quat:()=>n});var r=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(t=0,e=0,s=0,r=1){return super(t,e,s,r),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return r.identity(this),this.onChange(),this}set(t,e,s,n){return t.length?this.copy(t):(r.set(this,t,e,s,n),this.onChange(),this)}rotateX(t){return r.rotateX(this,this,t),this.onChange(),this}rotateY(t){return r.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return r.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return r.invert(this,t),this.onChange(),this}conjugate(t=this){return r.conjugate(this,t),this.onChange(),this}copy(t){return r.copy(this,t),this.onChange(),this}normalize(t=this){return r.normalize(this,t),this.onChange(),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this.onChange(),this}dot(t){return r.dot(this,t)}fromMatrix3(t){return r.fromMat3(this,t),this.onChange(),this}fromEuler(t){return r.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return r.setAxisAngle(this,t,e),this}slerp(t,e){return r.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec2.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Vec2:()=>n});var r=s("./node_modules/ogl/src/math/functions/Vec2Func.js");class n extends Array{constructor(t=0,e=t){return super(t,e),this}get x(){return this[0]}get y(){return this[1]}set x(t){this[0]=t}set y(t){this[1]=t}set(t,e=t){return t.length?this.copy(t):(r.set(this,t,e),this)}copy(t){return r.copy(this,t),this}add(t,e){return e?r.add(this,t,e):r.add(this,this,t),this}sub(t,e){return e?r.subtract(this,t,e):r.subtract(this,this,t),this}multiply(t){return t.length?r.multiply(this,this,t):r.scale(this,this,t),this}divide(t){return t.length?r.divide(this,this,t):r.scale(this,this,1/t),this}inverse(t=this){return r.inverse(this,t),this}len(){return r.length(this)}distance(t){return t?r.distance(this,t):r.length(this)}squaredLen(){return this.squaredDistance()}squaredDistance(t){return t?r.squaredDistance(this,t):r.squaredLength(this)}negate(t=this){return r.negate(this,t),this}cross(t,e){return e?r.cross(t,e):r.cross(this,t)}scale(t){return r.scale(this,this,t),this}normalize(){return r.normalize(this,this),this}dot(t){return r.dot(this,t)}equals(t){return r.exactEquals(this,t)}applyMatrix3(t){return r.transformMat3(this,this,t),this}applyMatrix4(t){return r.transformMat4(this,this,t),this}lerp(t,e){r.lerp(this,this,t,e)}clone(){return new n(this[0],this[1])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Vec3:()=>n});var r=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(r.set(this,t,e,s),this)}copy(t){return r.copy(this,t),this}add(t,e){return e?r.add(this,t,e):r.add(this,this,t),this}sub(t,e){return e?r.subtract(this,t,e):r.subtract(this,this,t),this}multiply(t){return t.length?r.multiply(this,this,t):r.scale(this,this,t),this}divide(t){return t.length?r.divide(this,this,t):r.scale(this,this,1/t),this}inverse(t=this){return r.inverse(this,t),this}len(){return r.length(this)}distance(t){return t?r.distance(this,t):r.length(this)}squaredLen(){return r.squaredLength(this)}squaredDistance(t){return t?r.squaredDistance(this,t):r.squaredLength(this)}negate(t=this){return r.negate(this,t),this}cross(t,e){return e?r.cross(this,t,e):r.cross(this,this,t),this}scale(t){return r.scale(this,this,t),this}normalize(){return r.normalize(this,this),this}dot(t){return r.dot(this,t)}equals(t){return r.exactEquals(this,t)}applyMatrix4(t){return r.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return r.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return r.transformQuat(this,this,t),this}angle(t){return r.angle(this,t)}lerp(t,e){return r.lerp(this,this,t,e),this}clone(){return new n(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],r=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*r,this[1]=t[1]*e+t[5]*s+t[9]*r,this[2]=t[2]*e+t[6]*s+t[10]*r,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{"use strict";function r(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>r})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>v,copy:()=>i,determinant:()=>u,fromMat4:()=>r,fromQuat:()=>n,identity:()=>a,invert:()=>h,multiply:()=>c,multiplyScalar:()=>y,normalFromMat4:()=>m,projection:()=>g,rotate:()=>p,scale:()=>f,set:()=>o,subtract:()=>_,translate:()=>d,transpose:()=>l});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function n(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=s+s,a=r+r,l=n+n,h=s*o,u=r*o,c=r*a,d=n*o,p=n*a,f=n*l,m=i*o,g=i*a,v=i*l;return t[0]=1-c-f,t[3]=u-v,t[6]=d+g,t[1]=u+v,t[4]=1-h-f,t[7]=p-m,t[2]=d-g,t[5]=p+m,t[8]=1-h-c,t}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function o(t,e,s,r,n,i,o,a,l,h){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t[4]=i,t[5]=o,t[6]=a,t[7]=l,t[8]=h,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let s=e[1],r=e[2],n=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=r,t[7]=n}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function h(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],h=e[7],u=e[8],c=u*o-a*h,d=-u*i+a*l,p=h*i-o*l,f=s*c+r*d+n*p;return f?(f=1/f,t[0]=c*f,t[1]=(-u*r+n*h)*f,t[2]=(a*r-n*o)*f,t[3]=d*f,t[4]=(u*s-n*l)*f,t[5]=(-a*s+n*i)*f,t[6]=p*f,t[7]=(-h*s+r*l)*f,t[8]=(o*s-r*i)*f,t):null}function u(t){let e=t[0],s=t[1],r=t[2],n=t[3],i=t[4],o=t[5],a=t[6],l=t[7],h=t[8];return e*(h*i-o*l)+s*(-h*n+o*a)+r*(l*n-i*a)}function c(t,e,s){let r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],h=e[6],u=e[7],c=e[8],d=s[0],p=s[1],f=s[2],m=s[3],g=s[4],v=s[5],_=s[6],y=s[7],b=s[8];return t[0]=d*r+p*o+f*h,t[1]=d*n+p*a+f*u,t[2]=d*i+p*l+f*c,t[3]=m*r+g*o+v*h,t[4]=m*n+g*a+v*u,t[5]=m*i+g*l+v*c,t[6]=_*r+y*o+b*h,t[7]=_*n+y*a+b*u,t[8]=_*i+y*l+b*c,t}function d(t,e,s){let r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],h=e[6],u=e[7],c=e[8],d=s[0],p=s[1];return t[0]=r,t[1]=n,t[2]=i,t[3]=o,t[4]=a,t[5]=l,t[6]=d*r+p*o+h,t[7]=d*n+p*a+u,t[8]=d*i+p*l+c,t}function p(t,e,s){let r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],h=e[6],u=e[7],c=e[8],d=Math.sin(s),p=Math.cos(s);return t[0]=p*r+d*o,t[1]=p*n+d*a,t[2]=p*i+d*l,t[3]=p*o-d*r,t[4]=p*a-d*n,t[5]=p*l-d*i,t[6]=h,t[7]=u,t[8]=c,t}function f(t,e,s){let r=s[0],n=s[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function m(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],h=e[7],u=e[8],c=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],v=e[15],_=s*a-r*o,y=s*l-n*o,b=s*h-i*o,w=r*l-n*a,x=r*h-i*a,j=n*h-i*l,E=u*m-c*f,T=u*g-d*f,A=u*v-p*f,C=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*C+w*A-x*T+j*E;return O?(O=1/O,t[0]=(a*M-l*S+h*C)*O,t[1]=(l*A-o*M-h*T)*O,t[2]=(o*S-a*A+h*E)*O,t[3]=(n*S-r*M-i*C)*O,t[4]=(s*M-n*A+i*T)*O,t[5]=(r*A-s*S-i*E)*O,t[6]=(m*j-g*x+v*w)*O,t[7]=(g*b-f*j-v*y)*O,t[8]=(f*x-m*b+v*_)*O,t):null}function g(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function v(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function _(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function y(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>j,copy:()=>n,determinant:()=>h,fromQuat:()=>y,fromRotationTranslationScale:()=>_,getMaxScaleOnAxis:()=>g,getRotation:()=>v,getScaling:()=>m,getTranslation:()=>f,identity:()=>o,invert:()=>l,multiply:()=>u,multiplyScalar:()=>T,ortho:()=>w,perspective:()=>b,rotate:()=>p,scale:()=>d,set:()=>i,subtract:()=>E,targetTo:()=>x,translate:()=>c,transpose:()=>a});const r=1e-6;function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function i(t,e,s,r,n,i,o,a,l,h,u,c,d,p,f,m,g){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t[4]=i,t[5]=o,t[6]=a,t[7]=l,t[8]=h,t[9]=u,t[10]=c,t[11]=d,t[12]=p,t[13]=f,t[14]=m,t[15]=g,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],r=e[2],n=e[3],i=e[6],o=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=i,t[11]=e[14],t[12]=n,t[13]=o,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function l(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],l=e[6],h=e[7],u=e[8],c=e[9],d=e[10],p=e[11],f=e[12],m=e[13],g=e[14],v=e[15],_=s*a-r*o,y=s*l-n*o,b=s*h-i*o,w=r*l-n*a,x=r*h-i*a,j=n*h-i*l,E=u*m-c*f,T=u*g-d*f,A=u*v-p*f,C=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*C+w*A-x*T+j*E;return O?(O=1/O,t[0]=(a*M-l*S+h*C)*O,t[1]=(n*S-r*M-i*C)*O,t[2]=(m*j-g*x+v*w)*O,t[3]=(d*x-c*j-p*w)*O,t[4]=(l*A-o*M-h*T)*O,t[5]=(s*M-n*A+i*T)*O,t[6]=(g*b-f*j-v*y)*O,t[7]=(u*j-d*b+p*y)*O,t[8]=(o*S-a*A+h*E)*O,t[9]=(r*A-s*S-i*E)*O,t[10]=(f*x-m*b+v*_)*O,t[11]=(c*b-u*x-p*_)*O,t[12]=(a*T-o*C-l*E)*O,t[13]=(s*C-r*T+n*E)*O,t[14]=(m*y-f*w-g*_)*O,t[15]=(u*w-c*y+d*_)*O,t):null}function h(t){let e=t[0],s=t[1],r=t[2],n=t[3],i=t[4],o=t[5],a=t[6],l=t[7],h=t[8],u=t[9],c=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15];return(e*o-s*i)*(c*g-d*m)-(e*a-r*i)*(u*g-d*f)+(e*l-n*i)*(u*m-c*f)+(s*a-r*o)*(h*g-d*p)-(s*l-n*o)*(h*m-c*p)+(r*l-n*a)*(h*f-u*p)}function u(t,e,s){let r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],h=e[6],u=e[7],c=e[8],d=e[9],p=e[10],f=e[11],m=e[12],g=e[13],v=e[14],_=e[15],y=s[0],b=s[1],w=s[2],x=s[3];return t[0]=y*r+b*a+w*c+x*m,t[1]=y*n+b*l+w*d+x*g,t[2]=y*i+b*h+w*p+x*v,t[3]=y*o+b*u+w*f+x*_,y=s[4],b=s[5],w=s[6],x=s[7],t[4]=y*r+b*a+w*c+x*m,t[5]=y*n+b*l+w*d+x*g,t[6]=y*i+b*h+w*p+x*v,t[7]=y*o+b*u+w*f+x*_,y=s[8],b=s[9],w=s[10],x=s[11],t[8]=y*r+b*a+w*c+x*m,t[9]=y*n+b*l+w*d+x*g,t[10]=y*i+b*h+w*p+x*v,t[11]=y*o+b*u+w*f+x*_,y=s[12],b=s[13],w=s[14],x=s[15],t[12]=y*r+b*a+w*c+x*m,t[13]=y*n+b*l+w*d+x*g,t[14]=y*i+b*h+w*p+x*v,t[15]=y*o+b*u+w*f+x*_,t}function c(t,e,s){let r,n,i,o,a,l,h,u,c,d,p,f,m=s[0],g=s[1],v=s[2];return e===t?(t[12]=e[0]*m+e[4]*g+e[8]*v+e[12],t[13]=e[1]*m+e[5]*g+e[9]*v+e[13],t[14]=e[2]*m+e[6]*g+e[10]*v+e[14],t[15]=e[3]*m+e[7]*g+e[11]*v+e[15]):(r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],l=e[5],h=e[6],u=e[7],c=e[8],d=e[9],p=e[10],f=e[11],t[0]=r,t[1]=n,t[2]=i,t[3]=o,t[4]=a,t[5]=l,t[6]=h,t[7]=u,t[8]=c,t[9]=d,t[10]=p,t[11]=f,t[12]=r*m+a*g+c*v+e[12],t[13]=n*m+l*g+d*v+e[13],t[14]=i*m+h*g+p*v+e[14],t[15]=o*m+u*g+f*v+e[15]),t}function d(t,e,s){let r=s[0],n=s[1],i=s[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function p(t,e,s,n){let i,o,a,l,h,u,c,d,p,f,m,g,v,_,y,b,w,x,j,E,T,A,C,S,M=n[0],O=n[1],L=n[2],P=Math.hypot(M,O,L);return Math.abs(P)<r?null:(P=1/P,M*=P,O*=P,L*=P,i=Math.sin(s),o=Math.cos(s),a=1-o,l=e[0],h=e[1],u=e[2],c=e[3],d=e[4],p=e[5],f=e[6],m=e[7],g=e[8],v=e[9],_=e[10],y=e[11],b=M*M*a+o,w=O*M*a+L*i,x=L*M*a-O*i,j=M*O*a-L*i,E=O*O*a+o,T=L*O*a+M*i,A=M*L*a+O*i,C=O*L*a-M*i,S=L*L*a+o,t[0]=l*b+d*w+g*x,t[1]=h*b+p*w+v*x,t[2]=u*b+f*w+_*x,t[3]=c*b+m*w+y*x,t[4]=l*j+d*E+g*T,t[5]=h*j+p*E+v*T,t[6]=u*j+f*E+_*T,t[7]=c*j+m*E+y*T,t[8]=l*A+d*C+g*S,t[9]=h*A+p*C+v*S,t[10]=u*A+f*C+_*S,t[11]=c*A+m*C+y*S,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function f(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let s=e[0],r=e[1],n=e[2],i=e[4],o=e[5],a=e[6],l=e[8],h=e[9],u=e[10];return t[0]=Math.hypot(s,r,n),t[1]=Math.hypot(i,o,a),t[2]=Math.hypot(l,h,u),t}function g(t){let e=t[0],s=t[1],r=t[2],n=t[4],i=t[5],o=t[6],a=t[8],l=t[9],h=t[10];const u=e*e+s*s+r*r,c=n*n+i*i+o*o,d=a*a+l*l+h*h;return Math.sqrt(Math.max(u,c,d))}const v=function(){const t=[0,0,0];return function(e,s){let r=t;m(r,s);let n=1/r[0],i=1/r[1],o=1/r[2],a=s[0]*n,l=s[1]*i,h=s[2]*o,u=s[4]*n,c=s[5]*i,d=s[6]*o,p=s[8]*n,f=s[9]*i,g=s[10]*o,v=a+c+g,_=0;return v>0?(_=2*Math.sqrt(v+1),e[3]=.25*_,e[0]=(d-f)/_,e[1]=(p-h)/_,e[2]=(l-u)/_):a>c&&a>g?(_=2*Math.sqrt(1+a-c-g),e[3]=(d-f)/_,e[0]=.25*_,e[1]=(l+u)/_,e[2]=(p+h)/_):c>g?(_=2*Math.sqrt(1+c-a-g),e[3]=(p-h)/_,e[0]=(l+u)/_,e[1]=.25*_,e[2]=(d+f)/_):(_=2*Math.sqrt(1+g-a-c),e[3]=(l-u)/_,e[0]=(p+h)/_,e[1]=(d+f)/_,e[2]=.25*_),e}}();function _(t,e,s,r){let n=e[0],i=e[1],o=e[2],a=e[3],l=n+n,h=i+i,u=o+o,c=n*l,d=n*h,p=n*u,f=i*h,m=i*u,g=o*u,v=a*l,_=a*h,y=a*u,b=r[0],w=r[1],x=r[2];return t[0]=(1-(f+g))*b,t[1]=(d+y)*b,t[2]=(p-_)*b,t[3]=0,t[4]=(d-y)*w,t[5]=(1-(c+g))*w,t[6]=(m+v)*w,t[7]=0,t[8]=(p+_)*x,t[9]=(m-v)*x,t[10]=(1-(c+f))*x,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function y(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=s+s,a=r+r,l=n+n,h=s*o,u=r*o,c=r*a,d=n*o,p=n*a,f=n*l,m=i*o,g=i*a,v=i*l;return t[0]=1-c-f,t[1]=u+v,t[2]=d-g,t[3]=0,t[4]=u-v,t[5]=1-h-f,t[6]=p+m,t[7]=0,t[8]=d+g,t[9]=p-m,t[10]=1-h-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function b(t,e,s,r,n){let i=1/Math.tan(e/2),o=1/(r-n);return t[0]=i/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(n+r)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*n*r*o,t[15]=0,t}function w(t,e,s,r,n,i,o){let a=1/(e-s),l=1/(r-n),h=1/(i-o);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*l,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+s)*a,t[13]=(n+r)*l,t[14]=(o+i)*h,t[15]=1,t}function x(t,e,s,r){let n=e[0],i=e[1],o=e[2],a=r[0],l=r[1],h=r[2],u=n-s[0],c=i-s[1],d=o-s[2],p=u*u+c*c+d*d;0===p?d=1:(p=1/Math.sqrt(p),u*=p,c*=p,d*=p);let f=l*d-h*c,m=h*u-a*d,g=a*c-l*u;return p=f*f+m*m+g*g,0===p&&(h?a+=1e-6:l?h+=1e-6:l+=1e-6,f=l*d-h*c,m=h*u-a*d,g=a*c-l*u,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,t[0]=f,t[1]=m,t[2]=g,t[3]=0,t[4]=c*g-d*m,t[5]=d*f-u*g,t[6]=u*m-c*f,t[7]=0,t[8]=u,t[9]=c,t[10]=d,t[11]=0,t[12]=n,t[13]=i,t[14]=o,t[15]=1,t}function j(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function E(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function T(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>v,conjugate:()=>d,copy:()=>m,dot:()=>y,fromEuler:()=>f,fromMat3:()=>p,identity:()=>n,invert:()=>c,length:()=>w,lerp:()=>b,multiply:()=>o,normalize:()=>x,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>h,scale:()=>_,set:()=>g,setAxisAngle:()=>i,slerp:()=>u});var r=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function i(t,e,s){s*=.5;let r=Math.sin(s);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(s),t}function o(t,e,s){let r=e[0],n=e[1],i=e[2],o=e[3],a=s[0],l=s[1],h=s[2],u=s[3];return t[0]=r*u+o*a+n*h-i*l,t[1]=n*u+o*l+i*a-r*h,t[2]=i*u+o*h+r*l-n*a,t[3]=o*u-r*a-n*l-i*h,t}function a(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(s),l=Math.cos(s);return t[0]=r*l+o*a,t[1]=n*l+i*a,t[2]=i*l-n*a,t[3]=o*l-r*a,t}function l(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(s),l=Math.cos(s);return t[0]=r*l-i*a,t[1]=n*l+o*a,t[2]=i*l+r*a,t[3]=o*l-n*a,t}function h(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sin(s),l=Math.cos(s);return t[0]=r*l+n*a,t[1]=n*l-r*a,t[2]=i*l+o*a,t[3]=o*l-i*a,t}function u(t,e,s,r){let n,i,o,a,l,h=e[0],u=e[1],c=e[2],d=e[3],p=s[0],f=s[1],m=s[2],g=s[3];return i=h*p+u*f+c*m+d*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(n=Math.acos(i),o=Math.sin(n),a=Math.sin((1-r)*n)/o,l=Math.sin(r*n)/o):(a=1-r,l=r),t[0]=a*h+l*p,t[1]=a*u+l*f,t[2]=a*c+l*m,t[3]=a*d+l*g,t}function c(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=s*s+r*r+n*n+i*i,a=o?1/o:0;return t[0]=-s*a,t[1]=-r*a,t[2]=-n*a,t[3]=i*a,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let s,r=e[0]+e[4]+e[8];if(r>0)s=Math.sqrt(r+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);let n=(r+1)%3,i=(r+2)%3;s=Math.sqrt(e[3*r+r]-e[3*n+n]-e[3*i+i]+1),t[r]=.5*s,s=.5/s,t[3]=(e[3*n+i]-e[3*i+n])*s,t[n]=(e[3*n+r]+e[3*r+n])*s,t[i]=(e[3*i+r]+e[3*r+i])*s}return t}function f(t,e,s="YXZ"){let r=Math.sin(.5*e[0]),n=Math.cos(.5*e[0]),i=Math.sin(.5*e[1]),o=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),l=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=r*o*l+n*i*a,t[1]=n*i*l-r*o*a,t[2]=n*o*a+r*i*l,t[3]=n*o*l-r*i*a):"YXZ"===s?(t[0]=r*o*l+n*i*a,t[1]=n*i*l-r*o*a,t[2]=n*o*a-r*i*l,t[3]=n*o*l+r*i*a):"ZXY"===s?(t[0]=r*o*l-n*i*a,t[1]=n*i*l+r*o*a,t[2]=n*o*a+r*i*l,t[3]=n*o*l-r*i*a):"ZYX"===s?(t[0]=r*o*l-n*i*a,t[1]=n*i*l+r*o*a,t[2]=n*o*a-r*i*l,t[3]=n*o*l+r*i*a):"YZX"===s?(t[0]=r*o*l+n*i*a,t[1]=n*i*l+r*o*a,t[2]=n*o*a-r*i*l,t[3]=n*o*l-r*i*a):"XZY"===s&&(t[0]=r*o*l-n*i*a,t[1]=n*i*l-r*o*a,t[2]=n*o*a+r*i*l,t[3]=n*o*l+r*i*a),t}const m=r.copy,g=r.set,v=r.add,_=r.scale,y=r.dot,b=r.lerp,w=r.length,x=r.normalize},"./node_modules/ogl/src/math/functions/Vec2Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>i,copy:()=>r,cross:()=>_,distance:()=>u,divide:()=>l,dot:()=>v,exactEquals:()=>E,inverse:()=>m,length:()=>d,lerp:()=>y,multiply:()=>a,negate:()=>f,normalize:()=>g,scale:()=>h,set:()=>n,squaredDistance:()=>c,squaredLength:()=>p,subtract:()=>o,transformMat2:()=>b,transformMat2d:()=>w,transformMat3:()=>x,transformMat4:()=>j});function r(t,e){return t[0]=e[0],t[1]=e[1],t}function n(t,e,s){return t[0]=e,t[1]=s,t}function i(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t}function o(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t}function a(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t}function h(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t}function u(t,e){var s=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(s*s+r*r)}function c(t,e){var s=e[0]-t[0],r=e[1]-t[1];return s*s+r*r}function d(t){var e=t[0],s=t[1];return Math.sqrt(e*e+s*s)}function p(t){var e=t[0],s=t[1];return e*e+s*s}function f(t,e){return t[0]=-e[0],t[1]=-e[1],t}function m(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function g(t,e){var s=e[0],r=e[1],n=s*s+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t}function v(t,e){return t[0]*e[0]+t[1]*e[1]}function _(t,e){return t[0]*e[1]-t[1]*e[0]}function y(t,e,s,r){var n=e[0],i=e[1];return t[0]=n+r*(s[0]-n),t[1]=i+r*(s[1]-i),t}function b(t,e,s){var r=e[0],n=e[1];return t[0]=s[0]*r+s[2]*n,t[1]=s[1]*r+s[3]*n,t}function w(t,e,s){var r=e[0],n=e[1];return t[0]=s[0]*r+s[2]*n+s[4],t[1]=s[1]*r+s[3]*n+s[5],t}function x(t,e,s){var r=e[0],n=e[1];return t[0]=s[0]*r+s[3]*n+s[6],t[1]=s[1]*r+s[4]*n+s[7],t}function j(t,e,s){let r=e[0],n=e[1];return t[0]=s[0]*r+s[4]*n+s[12],t[1]=s[1]*r+s[5]*n+s[13],t}function E(t,e){return t[0]===e[0]&&t[1]===e[1]}},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>o,angle:()=>E,copy:()=>n,cross:()=>_,distance:()=>c,divide:()=>h,dot:()=>v,exactEquals:()=>T,inverse:()=>m,length:()=>r,lerp:()=>y,multiply:()=>l,negate:()=>f,normalize:()=>g,scale:()=>u,scaleRotateMat4:()=>w,set:()=>i,squaredDistance:()=>d,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>x,transformMat4:()=>b,transformQuat:()=>j});function r(t){let e=t[0],s=t[1],r=t[2];return Math.sqrt(e*e+s*s+r*r)}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function i(t,e,s,r){return t[0]=e,t[1]=s,t[2]=r,t}function o(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function a(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function l(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function h(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function c(t,e){let s=e[0]-t[0],r=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(s*s+r*r+n*n)}function d(t,e){let s=e[0]-t[0],r=e[1]-t[1],n=e[2]-t[2];return s*s+r*r+n*n}function p(t){let e=t[0],s=t[1],r=t[2];return e*e+s*s+r*r}function f(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function m(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function g(t,e){let s=e[0],r=e[1],n=e[2],i=s*s+r*r+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function v(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function _(t,e,s){let r=e[0],n=e[1],i=e[2],o=s[0],a=s[1],l=s[2];return t[0]=n*l-i*a,t[1]=i*o-r*l,t[2]=r*a-n*o,t}function y(t,e,s,r){let n=e[0],i=e[1],o=e[2];return t[0]=n+r*(s[0]-n),t[1]=i+r*(s[1]-i),t[2]=o+r*(s[2]-o),t}function b(t,e,s){let r=e[0],n=e[1],i=e[2],o=s[3]*r+s[7]*n+s[11]*i+s[15];return o=o||1,t[0]=(s[0]*r+s[4]*n+s[8]*i+s[12])/o,t[1]=(s[1]*r+s[5]*n+s[9]*i+s[13])/o,t[2]=(s[2]*r+s[6]*n+s[10]*i+s[14])/o,t}function w(t,e,s){let r=e[0],n=e[1],i=e[2],o=s[3]*r+s[7]*n+s[11]*i+s[15];return o=o||1,t[0]=(s[0]*r+s[4]*n+s[8]*i)/o,t[1]=(s[1]*r+s[5]*n+s[9]*i)/o,t[2]=(s[2]*r+s[6]*n+s[10]*i)/o,t}function x(t,e,s){let r=e[0],n=e[1],i=e[2];return t[0]=r*s[0]+n*s[3]+i*s[6],t[1]=r*s[1]+n*s[4]+i*s[7],t[2]=r*s[2]+n*s[5]+i*s[8],t}function j(t,e,s){let r=e[0],n=e[1],i=e[2],o=s[0],a=s[1],l=s[2],h=a*i-l*n,u=l*r-o*i,c=o*n-a*r,d=a*c-l*u,p=l*h-o*c,f=o*u-a*h,m=2*s[3];return h*=m,u*=m,c*=m,d*=2,p*=2,f*=2,t[0]=r+h+d,t[1]=n+u+p,t[2]=i+c+f,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(s,r){n(t,s),n(e,r),g(t,t),g(e,e);let i=v(t,e);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function T(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>i,copy:()=>r,dot:()=>h,length:()=>a,lerp:()=>u,normalize:()=>l,scale:()=>o,set:()=>n});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function n(t,e,s,r,n){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t}function i(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function o(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function a(t){let e=t[0],s=t[1],r=t[2],n=t[3];return Math.sqrt(e*e+s*s+r*r+n*n)}function l(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],o=s*s+r*r+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=s*o,t[1]=r*o,t[2]=n*o,t[3]=i*o,t}function h(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,r){let n=e[0],i=e[1],o=e[2],a=e[3];return t[0]=n+r*(s[0]-n),t[1]=i+r*(s[1]-i),t[2]=o+r*(s[2]-o),t[3]=a+r*(s[3]-a),t}},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},s=["O","ms","Moz","Webkit"],r=/([A-Z])/g,n={};function i(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var r=t.charAt(0).toUpperCase()+t.slice(1),n=s.length;n--;){var i=s[n]+r;if(void 0!==e[i])return i}return t}t.exports=function(t){return t in n?n[t]:n[t]=i(t)},t.exports.dash=function(t){return t=i(t),r.test(t)&&(t="-"+t.replace(r,"-$1"),r.lastIndex=0),t.toLowerCase()}},"./node_modules/querystring/decode.js":t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,s,r,n){s=s||"&",r=r||"=";var i={};if("string"!=typeof t||0===t.length)return i;var o=/\+/g;t=t.split(s);var a=1e3;n&&"number"==typeof n.maxKeys&&(a=n.maxKeys);var l=t.length;a>0&&l>a&&(l=a);for(var h=0;h<l;++h){var u,c,d,p,f=t[h].replace(o,"%20"),m=f.indexOf(r);m>=0?(u=f.substr(0,m),c=f.substr(m+1)):(u=f,c=""),d=decodeURIComponent(u),p=decodeURIComponent(c),e(i,d)?Array.isArray(i[d])?i[d].push(p):i[d]=[i[d],p]:i[d]=p}return i}},"./node_modules/querystring/encode.js":t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,s,r,n){return s=s||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(n){var i=encodeURIComponent(e(n))+r;return Array.isArray(t[n])?t[n].map((function(t){return i+encodeURIComponent(e(t))})).join(s):i+encodeURIComponent(e(t[n]))})).join(s):n?encodeURIComponent(e(n))+r+encodeURIComponent(e(t)):""}},"./node_modules/querystring/index.js":(t,e,s)=>{"use strict";e.decode=e.parse=s("./node_modules/querystring/decode.js"),e.encode=e.stringify=s("./node_modules/querystring/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":(t,e,s)=>{var r;t.exports=function(){function t(e,s,r){function n(o,a){if(!s[o]){if(!e[o]){if(i)return i(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var h=s[o]={exports:{}};e[o][0].call(h.exports,(function(t){return n(e[o][1][t]||t)}),h,h.exports,t,e,s,r)}return s[o].exports}for(var i=void 0,o=0;o<r.length;o++)n(r[o]);return n}return t}()({1:[function(t,e,r){(function(s){"use strict";var r=t("./transport-list");e.exports=t("./main")(r),"_sockjs_onload"in s&&setTimeout(s._sockjs_onload,1)}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./event");function i(){n.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}r(i,n),e.exports=i},{"./event":4,inherits:57}],3:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./eventtarget");function i(){n.call(this)}r(i,n),i.prototype.removeAllListeners=function(t){t?delete this._listeners[t]:this._listeners={}},i.prototype.once=function(t,e){var s=this,r=!1;function n(){s.removeListener(t,n),r||(r=!0,e.apply(this,arguments))}this.on(t,n)},i.prototype.emit=function(){var t=arguments[0],e=this._listeners[t];if(e){for(var s=arguments.length,r=new Array(s-1),n=1;n<s;n++)r[n-1]=arguments[n];for(var i=0;i<e.length;i++)e[i].apply(this,r)}},i.prototype.on=i.prototype.addListener=n.prototype.addEventListener,i.prototype.removeListener=n.prototype.removeEventListener,e.exports.EventEmitter=i},{"./eventtarget":5,inherits:57}],4:[function(t,e,s){"use strict";function r(t){this.type=t}r.prototype.initEvent=function(t,e,s){return this.type=t,this.bubbles=e,this.cancelable=s,this.timeStamp=+new Date,this},r.prototype.stopPropagation=function(){},r.prototype.preventDefault=function(){},r.CAPTURING_PHASE=1,r.AT_TARGET=2,r.BUBBLING_PHASE=3,e.exports=r},{}],5:[function(t,e,s){"use strict";function r(){this._listeners={}}r.prototype.addEventListener=function(t,e){t in this._listeners||(this._listeners[t]=[]);var s=this._listeners[t];-1===s.indexOf(e)&&(s=s.concat([e])),this._listeners[t]=s},r.prototype.removeEventListener=function(t,e){var s=this._listeners[t];if(s){var r=s.indexOf(e);-1===r||(s.length>1?this._listeners[t]=s.slice(0,r).concat(s.slice(r+1)):delete this._listeners[t])}},r.prototype.dispatchEvent=function(){var t=arguments[0],e=t.type,s=1===arguments.length?[t]:Array.apply(null,arguments);if(this["on"+e]&&this["on"+e].apply(this,s),e in this._listeners)for(var r=this._listeners[e],n=0;n<r.length;n++)r[n].apply(this,s)},e.exports=r},{}],6:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./event");function i(t){n.call(this),this.initEvent("message",!1,!1),this.data=t}r(i,n),e.exports=i},{"./event":4,inherits:57}],7:[function(t,e,s){"use strict";var r=t("json3"),n=t("./utils/iframe");function i(t){this._transport=t,t.on("message",this._transportMessage.bind(this)),t.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(t,e){n.postMessage("c",r.stringify([t,e]))},i.prototype._transportMessage=function(t){n.postMessage("t",t)},i.prototype._send=function(t){this._transport.send(t)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},e.exports=i},{"./utils/iframe":47,json3:58}],8:[function(t,e,s){(function(s){"use strict";var r=t("./utils/url"),n=t("./utils/event"),i=t("json3"),o=t("./facade"),a=t("./info-iframe-receiver"),l=t("./utils/iframe"),h=t("./location"),u=function(){};"production"!==s.env.NODE_ENV&&(u=t("debug")("sockjs-client:iframe-bootstrap")),e.exports=function(t,e){var s,c={};e.forEach((function(t){t.facadeTransport&&(c[t.facadeTransport.transportName]=t.facadeTransport)})),c[a.transportName]=a,t.bootstrap_iframe=function(){var e;l.currentWindowId=h.hash.slice(1);var a=function(n){if(n.source===parent&&(void 0===s&&(s=n.origin),n.origin===s)){var a;try{a=i.parse(n.data)}catch(t){return void u("bad json",n.data)}if(a.windowId===l.currentWindowId)switch(a.type){case"s":var d;try{d=i.parse(a.data)}catch(t){u("bad json",a.data);break}var p=d[0],f=d[1],m=d[2],g=d[3];if(u(p,f,m,g),p!==t.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+t.version+'".');if(!r.isOriginEqual(m,h.href)||!r.isOriginEqual(g,h.href))throw new Error("Can't connect to different domain from within an iframe. ("+h.href+", "+m+", "+g+")");e=new o(new c[f](m,g));break;case"m":e._send(a.data);break;case"c":e&&e._close(),e=null}}};n.attachEvent("message",a),l.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(t,e,s){(function(s){"use strict";var r=t("events").EventEmitter,n=t("inherits"),i=t("json3"),o=t("./utils/object"),a=function(){};function l(t,e){r.call(this);var s=this,n=+new Date;this.xo=new e("GET",t),this.xo.once("finish",(function(t,e){var r,l;if(200===t){if(l=+new Date-n,e)try{r=i.parse(e)}catch(t){a("bad json",e)}o.isObject(r)||(r={})}s.emit("finish",r,l),s.removeAllListeners()}))}"production"!==s.env.NODE_ENV&&(a=t("debug")("sockjs-client:info-ajax")),n(l,r),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},e.exports=l}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(t,e,s){"use strict";var r=t("inherits"),n=t("events").EventEmitter,i=t("json3"),o=t("./transport/sender/xhr-local"),a=t("./info-ajax");function l(t){var e=this;n.call(this),this.ir=new a(t,o),this.ir.once("finish",(function(t,s){e.ir=null,e.emit("message",i.stringify([t,s]))}))}r(l,n),l.transportName="iframe-info-receiver",l.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},e.exports=l},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(t,e,r){(function(s,r){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("json3"),a=t("./utils/event"),l=t("./transport/iframe"),h=t("./info-iframe-receiver"),u=function(){};function c(t,e){var s=this;n.call(this);var i=function(){var r=s.ifr=new l(h.transportName,e,t);r.once("message",(function(t){if(t){var e;try{e=o.parse(t)}catch(e){return u("bad json",t),s.emit("finish"),void s.close()}var r=e[0],n=e[1];s.emit("finish",r,n)}s.close()})),r.once("close",(function(){s.emit("finish"),s.close()}))};r.document.body?i():a.attachEvent("load",i)}"production"!==s.env.NODE_ENV&&(u=t("debug")("sockjs-client:info-iframe")),i(c,n),c.enabled=function(){return l.enabled()},c.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},e.exports=c}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(t,e,s){(function(s){"use strict";var r=t("events").EventEmitter,n=t("inherits"),i=t("./utils/url"),o=t("./transport/sender/xdr"),a=t("./transport/sender/xhr-cors"),l=t("./transport/sender/xhr-local"),h=t("./transport/sender/xhr-fake"),u=t("./info-iframe"),c=t("./info-ajax"),d=function(){};function p(t,e){d(t);var s=this;r.call(this),setTimeout((function(){s.doXhr(t,e)}),0)}"production"!==s.env.NODE_ENV&&(d=t("debug")("sockjs-client:info-receiver")),n(p,r),p._getReceiver=function(t,e,s){return s.sameOrigin?new c(e,l):a.enabled?new c(e,a):o.enabled&&s.sameScheme?new c(e,o):u.enabled()?new u(t,e):new c(e,h)},p.prototype.doXhr=function(t,e){var s=this,r=i.addPath(t,"/info");d("doXhr",r),this.xo=p._getReceiver(t,r,e),this.timeoutRef=setTimeout((function(){d("timeout"),s._cleanup(!1),s.emit("finish")}),p.timeout),this.xo.once("finish",(function(t,e){d("finish",t,e),s._cleanup(!0),s.emit("finish",t,e)}))},p.prototype._cleanup=function(t){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!t&&this.xo&&this.xo.close(),this.xo=null},p.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},p.timeout=8e3,e.exports=p}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(t,e,r){(function(t){"use strict";e.exports=t.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(t,e,r){(function(s,r){"use strict";t("./shims");var n,i=t("url-parse"),o=t("inherits"),a=t("json3"),l=t("./utils/random"),h=t("./utils/escape"),u=t("./utils/url"),c=t("./utils/event"),d=t("./utils/transport"),p=t("./utils/object"),f=t("./utils/browser"),m=t("./utils/log"),g=t("./event/event"),v=t("./event/eventtarget"),_=t("./location"),y=t("./event/close"),b=t("./event/trans-message"),w=t("./info-receiver"),x=function(){};function j(t,e,s){if(!(this instanceof j))return new j(t,e,s);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");v.call(this),this.readyState=j.CONNECTING,this.extensions="",this.protocol="",(s=s||{}).protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=s.transports,this._transportOptions=s.transportOptions||{},this._timeout=s.timeout||0;var r=s.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return l.string(r)}}this._server=s.server||l.numberString(1e3);var n=new i(t);if(!n.host||!n.protocol)throw new SyntaxError("The URL '"+t+"' is invalid");if(n.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==n.protocol&&"https:"!==n.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+n.protocol+"' is not allowed.");var o="https:"===n.protocol;if("https:"===_.protocol&&!o&&!u.isLoopbackAddr(n.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");e?Array.isArray(e)||(e=[e]):e=[];var a=e.sort();a.forEach((function(t,e){if(!t)throw new SyntaxError("The protocols entry '"+t+"' is invalid.");if(e<a.length-1&&t===a[e+1])throw new SyntaxError("The protocols entry '"+t+"' is duplicated.")}));var h=u.getOrigin(_.href);this._origin=h?h.toLowerCase():null,n.set("pathname",n.pathname.replace(/\/+$/,"")),this.url=n.href,x("using url",this.url),this._urlInfo={nullOrigin:!f.hasDomain(),sameOrigin:u.isOriginEqual(this.url,_.href),sameScheme:u.isSchemeEqual(this.url,_.href)},this._ir=new w(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function E(t){return 1e3===t||t>=3e3&&t<=4999}"production"!==s.env.NODE_ENV&&(x=t("debug")("sockjs-client:main")),o(j,v),j.prototype.close=function(t,e){if(t&&!E(t))throw new Error("InvalidAccessError: Invalid code");if(e&&e.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==j.CLOSING&&this.readyState!==j.CLOSED){var s=!0;this._close(t||1e3,e||"Normal closure",s)}},j.prototype.send=function(t){if("string"!=typeof t&&(t=""+t),this.readyState===j.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===j.OPEN&&this._transport.send(h.quote(t))},j.version=t("./version"),j.CONNECTING=0,j.OPEN=1,j.CLOSING=2,j.CLOSED=3,j.prototype._receiveInfo=function(t,e){if(x("_receiveInfo",e),this._ir=null,t){this._rto=this.countRTO(e),this._transUrl=t.base_url?t.base_url:this.url,t=p.extend(t,this._urlInfo),x("info",t);var s=n.filterToEnabled(this._transportsWhitelist,t);this._transports=s.main,x(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},j.prototype._connect=function(){for(var t=this._transports.shift();t;t=this._transports.shift()){if(x("attempt",t.transportName),t.needBody&&(!r.document.body||void 0!==r.document.readyState&&"complete"!==r.document.readyState&&"interactive"!==r.document.readyState))return x("waiting for body"),this._transports.unshift(t),void c.attachEvent("load",this._connect.bind(this));var e=Math.max(this._timeout,this._rto*t.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),e),x("using timeout",e);var s=u.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),n=this._transportOptions[t.transportName];x("transport url",s);var i=new t(s,this._transUrl,n);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=t.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},j.prototype._transportTimeout=function(){x("_transportTimeout"),this.readyState===j.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},j.prototype._transportMessage=function(t){x("_transportMessage",t);var e,s=this,r=t.slice(0,1),n=t.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void x("heartbeat",this.transport)}if(n)try{e=a.parse(n)}catch(t){x("bad json",n)}if(void 0!==e)switch(r){case"a":Array.isArray(e)&&e.forEach((function(t){x("message",s.transport,t),s.dispatchEvent(new b(t))}));break;case"m":x("message",this.transport,e),this.dispatchEvent(new b(e));break;case"c":Array.isArray(e)&&2===e.length&&this._close(e[0],e[1],!0)}else x("empty payload",n)},j.prototype._transportClose=function(t,e){x("_transportClose",this.transport,t,e),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),E(t)||2e3===t||this.readyState!==j.CONNECTING?this._close(t,e):this._connect()},j.prototype._open=function(){x("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===j.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=j.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),x("connected",this.transport)):this._close(1006,"Server lost session")},j.prototype._close=function(t,e,s){x("_close",this.transport,t,e,s,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===j.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=j.CLOSING,setTimeout(function(){this.readyState=j.CLOSED,r&&this.dispatchEvent(new g("error"));var n=new y("close");n.wasClean=s||!1,n.code=t||1e3,n.reason=e,this.dispatchEvent(n),this.onmessage=this.onclose=this.onerror=null,x("disconnected")}.bind(this),0)},j.prototype.countRTO=function(t){return t>100?4*t:300+t},e.exports=function(e){return n=d(e),t("./iframe-bootstrap")(j,e),j}}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(t,e,s){"use strict";var r,n=Array.prototype,i=Object.prototype,o=Function.prototype,a=String.prototype,l=n.slice,h=i.toString,u=function(t){return"[object Function]"===i.toString.call(t)},c=function(t){return"[object Array]"===h.call(t)},d=function(t){return"[object String]"===h.call(t)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(t){return!1}}();r=p?function(t,e,s,r){!r&&e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:s})}:function(t,e,s,r){!r&&e in t||(t[e]=s)};var f=function(t,e,s){for(var n in e)i.hasOwnProperty.call(e,n)&&r(t,n,e[n],s)},m=function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return Object(t)};function g(t){var e=+t;return e!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e}function v(t){return t>>>0}function _(){}f(o,{bind:function(t){var e=this;if(!u(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var s=l.call(arguments,1),r=function(){if(this instanceof a){var r=e.apply(this,s.concat(l.call(arguments)));return Object(r)===r?r:this}return e.apply(t,s.concat(l.call(arguments)))},n=Math.max(0,e.length-s.length),i=[],o=0;o<n;o++)i.push("$"+o);var a=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this, arguments); }")(r);return e.prototype&&(_.prototype=e.prototype,a.prototype=new _,_.prototype=null),a}}),f(Array,{isArray:c});var y,b,w,x=Object("a"),j="a"!==x[0]||!(0 in x);f(n,{forEach:function(t){var e=m(this),s=j&&d(this)?this.split(""):e,r=arguments[1],n=-1,i=s.length>>>0;if(!u(t))throw new TypeError;for(;++n<i;)n in s&&t.call(r,s[n],n,e)}},(y=n.forEach,b=!0,w=!0,y&&(y.call("foo",(function(t,e,s){"object"!=typeof s&&(b=!1)})),y.call([1],(function(){w="string"==typeof this}),"x")),!(y&&b&&w)));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(n,{indexOf:function(t){var e=j&&d(this)?this.split(""):m(this),s=e.length>>>0;if(!s)return-1;var r=0;for(arguments.length>1&&(r=g(arguments[1])),r=r>=0?r:Math.max(0,s+r);r<s;r++)if(r in e&&e[r]===t)return r;return-1}},E);var T,A=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(T=void 0===/()??/.exec("")[1],a.split=function(t,e){var s=this;if(void 0===t&&0===e)return[];if("[object RegExp]"!==h.call(t))return A.call(this,t,e);var r,i,o,a,l=[],u=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.extended?"x":"")+(t.sticky?"y":""),c=0;for(t=new RegExp(t.source,u+"g"),s+="",T||(r=new RegExp("^"+t.source+"$(?!\\s)",u)),e=void 0===e?-1>>>0:v(e);(i=t.exec(s))&&!((o=i.index+i[0].length)>c&&(l.push(s.slice(c,i.index)),!T&&i.length>1&&i[0].replace(r,(function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(i[t]=void 0)})),i.length>1&&i.index<s.length&&n.push.apply(l,i.slice(1)),a=i[0].length,c=o,l.length>=e));)t.lastIndex===i.index&&t.lastIndex++;return c===s.length?!a&&t.test("")||l.push(""):l.push(s.slice(c)),l.length>e?l.slice(0,e):l}):"0".split(void 0,0).length&&(a.split=function(t,e){return void 0===t&&0===e?[]:A.call(this,t,e)});var C=a.substr,S="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(t,e){return C.call(this,t<0&&(t=this.length+t)<0?0:t,e)}},S)},{}],16:[function(t,e,s){"use strict";e.exports=[t("./transport/websocket"),t("./transport/xhr-streaming"),t("./transport/xdr-streaming"),t("./transport/eventsource"),t("./transport/lib/iframe-wrap")(t("./transport/eventsource")),t("./transport/htmlfile"),t("./transport/lib/iframe-wrap")(t("./transport/htmlfile")),t("./transport/xhr-polling"),t("./transport/xdr-polling"),t("./transport/lib/iframe-wrap")(t("./transport/xhr-polling")),t("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(t,e,r){(function(s,r){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("../../utils/event"),a=t("../../utils/url"),l=r.XMLHttpRequest,h=function(){};function u(t,e,s,r){h(t,e);var i=this;n.call(this),setTimeout((function(){i._start(t,e,s,r)}),0)}"production"!==s.env.NODE_ENV&&(h=t("debug")("sockjs-client:browser:xhr")),i(u,n),u.prototype._start=function(t,e,s,r){var n=this;try{this.xhr=new l}catch(t){}if(!this.xhr)return h("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();e=a.addQuery(e,"t="+ +new Date),this.unloadRef=o.unloadAdd((function(){h("unload cleanup"),n._cleanup(!0)}));try{this.xhr.open(t,e,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){h("xhr timeout"),n.emit("finish",0,""),n._cleanup(!1)})}catch(t){return h("exception",t),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!u.supportsCORS||(h("withCredentials"),this.xhr.withCredentials=!0),r&&r.headers)for(var i in r.headers)this.xhr.setRequestHeader(i,r.headers[i]);this.xhr.onreadystatechange=function(){if(n.xhr){var t,e,s=n.xhr;switch(h("readyState",s.readyState),s.readyState){case 3:try{e=s.status,t=s.responseText}catch(t){}h("status",e),1223===e&&(e=204),200===e&&t&&t.length>0&&(h("chunk"),n.emit("chunk",e,t));break;case 4:e=s.status,h("status",e),1223===e&&(e=204),12005!==e&&12029!==e||(e=0),h("finish",e,s.responseText),n.emit("finish",e,s.responseText),n._cleanup(!1)}}};try{n.xhr.send(s)}catch(t){n.emit("finish",0,""),n._cleanup(!1)}},u.prototype._cleanup=function(t){if(h("cleanup"),this.xhr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),t)try{this.xhr.abort()}catch(t){}this.unloadRef=this.xhr=null}},u.prototype.close=function(){h("close"),this._cleanup(!0)},u.enabled=!!l;var c=["Active"].concat("Object").join("X");!u.enabled&&c in r&&(h("overriding xmlhttprequest"),l=function(){try{return new r[c]("Microsoft.XMLHTTP")}catch(t){return null}},u.enabled=!!new l);var d=!1;try{d="withCredentials"in new l}catch(t){}u.supportsCORS=d,e.exports=u}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(t,e,r){(function(t){e.exports=t.EventSource}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(t,e,r){(function(t){"use strict";var s=t.WebSocket||t.MozWebSocket;e.exports=s?function(t){return new s(t)}:void 0}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/eventsource"),o=t("./sender/xhr-cors"),a=t("eventsource");function l(t){if(!l.enabled())throw new Error("Transport created when disabled");n.call(this,t,"/eventsource",i,o)}r(l,n),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./receiver/htmlfile"),i=t("./sender/xhr-local"),o=t("./lib/ajax-based");function a(t){if(!n.enabled)throw new Error("Transport created when disabled");o.call(this,t,"/htmlfile",n,i)}r(a,o),a.enabled=function(t){return n.enabled&&t.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,e.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("json3"),i=t("events").EventEmitter,o=t("../version"),a=t("../utils/url"),l=t("../utils/iframe"),h=t("../utils/event"),u=t("../utils/random"),c=function(){};function d(t,e,s){if(!d.enabled())throw new Error("Transport created when disabled");i.call(this);var r=this;this.origin=a.getOrigin(s),this.baseUrl=s,this.transUrl=e,this.transport=t,this.windowId=u.string(8);var n=a.addPath(s,"/iframe.html")+"#"+this.windowId;c(t,e,n),this.iframeObj=l.createIframe(n,(function(t){c("err callback"),r.emit("close",1006,"Unable to load an iframe ("+t+")"),r.close()})),this.onmessageCallback=this._message.bind(this),h.attachEvent("message",this.onmessageCallback)}"production"!==s.env.NODE_ENV&&(c=t("debug")("sockjs-client:transport:iframe")),r(d,i),d.prototype.close=function(){if(c("close"),this.removeAllListeners(),this.iframeObj){h.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(t){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(t){if(c("message",t.data),a.isOriginEqual(t.origin,this.origin)){var e;try{e=n.parse(t.data)}catch(e){return void c("bad json",t.data)}if(e.windowId===this.windowId)switch(e.type){case"s":this.iframeObj.loaded(),this.postMessage("s",n.stringify([o,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",e.data);break;case"c":var s;try{s=n.parse(e.data)}catch(t){return void c("bad json",e.data)}this.emit("close",s[0],s[1]),this.close()}else c("mismatched window id",e.windowId,this.windowId)}else c("not same origin",t.origin,this.origin)},d.prototype.postMessage=function(t,e){c("postMessage",t,e),this.iframeObj.post(n.stringify({windowId:this.windowId,type:t,data:e||""}),this.origin)},d.prototype.send=function(t){c("send",t),this.postMessage("m",t)},d.enabled=function(){return l.iframeEnabled},d.transportName="iframe",d.roundTrips=2,e.exports=d}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(t,e,r){(function(s){"use strict";var r=t("inherits"),n=t("./lib/sender-receiver"),i=t("./receiver/jsonp"),o=t("./sender/jsonp");function a(t){if(!a.enabled())throw new Error("Transport created when disabled");n.call(this,t,"/jsonp",o,i)}r(a,n),a.enabled=function(){return!!s.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,e.exports=a}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("../../utils/url"),i=t("./sender-receiver"),o=function(){};function a(t){return function(e,s,r){o("create ajax sender",e,s);var i={};"string"==typeof s&&(i.headers={"Content-type":"text/plain"});var a=n.addPath(e,"/xhr_send"),l=new t("POST",a,s,i);return l.once("finish",(function(t){if(o("finish",t),l=null,200!==t&&204!==t)return r(new Error("http status "+t));r()})),function(){o("abort"),l.close(),l=null;var t=new Error("Aborted");t.code=1e3,r(t)}}}function l(t,e,s,r){i.call(this,t,e,a(r),s,r)}"production"!==s.env.NODE_ENV&&(o=t("debug")("sockjs-client:ajax-based")),r(l,i),e.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e){i(t),n.call(this),this.sendBuffer=[],this.sender=e,this.url=t}"production"!==s.env.NODE_ENV&&(i=t("debug")("sockjs-client:buffered-sender")),r(o,n),o.prototype.send=function(t){i("send",t),this.sendBuffer.push(t),this.sendStop||this.sendSchedule()},o.prototype.sendScheduleWait=function(){i("sendScheduleWait");var t,e=this;this.sendStop=function(){i("sendStop"),e.sendStop=null,clearTimeout(t)},t=setTimeout((function(){i("timeout"),e.sendStop=null,e.sendSchedule()}),25)},o.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var t=this;if(this.sendBuffer.length>0){var e="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,e,(function(e){t.sendStop=null,e?(i("error",e),t.emit("close",e.code||1006,"Sending error: "+e),t.close()):t.sendScheduleWait()})),this.sendBuffer=[]}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(t,e,r){(function(s){"use strict";var r=t("inherits"),n=t("../iframe"),i=t("../../utils/object");e.exports=function(t){function e(e,s){n.call(this,t.transportName,e,s)}return r(e,n),e.enabled=function(e,r){if(!s.document)return!1;var o=i.extend({},r);return o.sameOrigin=!0,t.enabled(o)&&n.enabled()},e.transportName="iframe-"+t.transportName,e.needBody=!0,e.roundTrips=n.roundTrips+t.roundTrips-1,e.facadeTransport=t,e}}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e,s){i(e),n.call(this),this.Receiver=t,this.receiveUrl=e,this.AjaxObject=s,this._scheduleReceiver()}"production"!==s.env.NODE_ENV&&(i=t("debug")("sockjs-client:polling")),r(o,n),o.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var t=this,e=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);e.on("message",(function(e){i("message",e),t.emit("message",e)})),e.once("close",(function(s,r){i("close",s,r,t.pollIsClosing),t.poll=e=null,t.pollIsClosing||("network"===r?t._scheduleReceiver():(t.emit("close",s||1006,r),t.removeAllListeners()))}))},o.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("../../utils/url"),i=t("./buffered-sender"),o=t("./polling"),a=function(){};function l(t,e,s,r,l){var h=n.addPath(t,e);a(h);var u=this;i.call(this,t,s),this.poll=new o(r,h,l),this.poll.on("message",(function(t){a("poll message",t),u.emit("message",t)})),this.poll.once("close",(function(t,e){a("poll close",t,e),u.poll=null,u.emit("close",t,e),u.close()}))}"production"!==s.env.NODE_ENV&&(a=t("debug")("sockjs-client:sender-receiver")),r(l,i),l.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},e.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("events").EventEmitter,i=t("eventsource"),o=function(){};function a(t){o(t),n.call(this);var e=this,s=this.es=new i(t);s.onmessage=function(t){o("message",t.data),e.emit("message",decodeURI(t.data))},s.onerror=function(t){o("error",s.readyState,t);var r=2!==s.readyState?"network":"permanent";e._cleanup(),e._close(r)}}"production"!==s.env.NODE_ENV&&(o=t("debug")("sockjs-client:receiver:eventsource")),r(a,n),a.prototype.abort=function(){o("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){o("cleanup");var t=this.es;t&&(t.onmessage=t.onerror=null,t.close(),this.es=null)},a.prototype._close=function(t){o("close",t);var e=this;setTimeout((function(){e.emit("close",null,t),e.removeAllListeners()}),200)},e.exports=a}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(t,e,r){(function(s,r){"use strict";var n=t("inherits"),i=t("../../utils/iframe"),o=t("../../utils/url"),a=t("events").EventEmitter,l=t("../../utils/random"),h=function(){};function u(t){h(t),a.call(this);var e=this;i.polluteGlobalNamespace(),this.id="a"+l.string(6),t=o.addQuery(t,"c="+decodeURIComponent(i.WPrefix+"."+this.id)),h("using htmlfile",u.htmlfileEnabled);var s=u.htmlfileEnabled?i.createHtmlfile:i.createIframe;r[i.WPrefix][this.id]={start:function(){h("start"),e.iframeObj.loaded()},message:function(t){h("message",t),e.emit("message",t)},stop:function(){h("stop"),e._cleanup(),e._close("network")}},this.iframeObj=s(t,(function(){h("callback"),e._cleanup(),e._close("permanent")}))}"production"!==s.env.NODE_ENV&&(h=t("debug")("sockjs-client:receiver:htmlfile")),n(u,a),u.prototype.abort=function(){h("abort"),this._cleanup(),this._close("user")},u.prototype._cleanup=function(){h("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete r[i.WPrefix][this.id]},u.prototype._close=function(t){h("_close",t),this.emit("close",null,t),this.removeAllListeners()},u.htmlfileEnabled=!1;var c=["Active"].concat("Object").join("X");if(c in r)try{u.htmlfileEnabled=!!new r[c]("htmlfile")}catch(t){}u.enabled=u.htmlfileEnabled||i.iframeEnabled,e.exports=u}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(t,e,r){(function(s,r){"use strict";var n=t("../../utils/iframe"),i=t("../../utils/random"),o=t("../../utils/browser"),a=t("../../utils/url"),l=t("inherits"),h=t("events").EventEmitter,u=function(){};function c(t){u(t);var e=this;h.call(this),n.polluteGlobalNamespace(),this.id="a"+i.string(6);var s=a.addQuery(t,"c="+encodeURIComponent(n.WPrefix+"."+this.id));r[n.WPrefix][this.id]=this._callback.bind(this),this._createScript(s),this.timeoutId=setTimeout((function(){u("timeout"),e._abort(new Error("JSONP script loaded abnormally (timeout)"))}),c.timeout)}"production"!==s.env.NODE_ENV&&(u=t("debug")("sockjs-client:receiver:jsonp")),l(c,h),c.prototype.abort=function(){if(u("abort"),r[n.WPrefix][this.id]){var t=new Error("JSONP user aborted read");t.code=1e3,this._abort(t)}},c.timeout=35e3,c.scriptErrorTimeout=1e3,c.prototype._callback=function(t){u("_callback",t),this._cleanup(),this.aborting||(t&&(u("message",t),this.emit("message",t)),this.emit("close",null,"network"),this.removeAllListeners())},c.prototype._abort=function(t){u("_abort",t),this._cleanup(),this.aborting=!0,this.emit("close",t.code,t.message),this.removeAllListeners()},c.prototype._cleanup=function(){if(u("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var t=this.script;t.parentNode.removeChild(t),t.onreadystatechange=t.onerror=t.onload=t.onclick=null,this.script=null}delete r[n.WPrefix][this.id]},c.prototype._scriptError=function(){u("_scriptError");var t=this;this.errorTimer||(this.errorTimer=setTimeout((function(){t.loadedOkay||t._abort(new Error("JSONP script loaded abnormally (onerror)"))}),c.scriptErrorTimeout))},c.prototype._createScript=function(t){u("_createScript",t);var e,s=this,n=this.script=r.document.createElement("script");if(n.id="a"+i.string(8),n.src=t,n.type="text/javascript",n.charset="UTF-8",n.onerror=this._scriptError.bind(this),n.onload=function(){u("onload"),s._abort(new Error("JSONP script loaded abnormally (onload)"))},n.onreadystatechange=function(){if(u("onreadystatechange",n.readyState),/loaded|closed/.test(n.readyState)){if(n&&n.htmlFor&&n.onclick){s.loadedOkay=!0;try{n.onclick()}catch(t){}}n&&s._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===n.async&&r.document.attachEvent)if(o.isOpera())(e=this.script2=r.document.createElement("script")).text="try{var a = document.getElementById('"+n.id+"'); if(a)a.onerror();}catch(x){};",n.async=e.async=!1;else{try{n.htmlFor=n.id,n.event="onclick"}catch(t){}n.async=!0}void 0!==n.async&&(n.async=!0);var a=r.document.getElementsByTagName("head")[0];a.insertBefore(n,a.firstChild),e&&a.insertBefore(e,a.firstChild)},e.exports=c}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(t,e,s){(function(s){"use strict";var r=t("inherits"),n=t("events").EventEmitter,i=function(){};function o(t,e){i(t),n.call(this);var s=this;this.bufferPosition=0,this.xo=new e("POST",t,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(t,e){i("finish",t,e),s._chunkHandler(t,e),s.xo=null;var r=200===t?"network":"permanent";i("close",r),s.emit("close",null,r),s._cleanup()}))}"production"!==s.env.NODE_ENV&&(i=t("debug")("sockjs-client:receiver:xhr")),r(o,n),o.prototype._chunkHandler=function(t,e){if(i("_chunkHandler",t),200===t&&e)for(var s=-1;;this.bufferPosition+=s+1){var r=e.slice(this.bufferPosition);if(-1===(s=r.indexOf("\n")))break;var n=r.slice(0,s);n&&(i("message",n),this.emit("message",n))}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},e.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(t,e,r){(function(s,r){"use strict";var n,i,o=t("../../utils/random"),a=t("../../utils/url"),l=function(){};function h(t){l("createIframe",t);try{return r.document.createElement('<iframe name="'+t+'">')}catch(s){var e=r.document.createElement("iframe");return e.name=t,e}}function u(){l("createForm"),(n=r.document.createElement("form")).style.display="none",n.style.position="absolute",n.method="POST",n.enctype="application/x-www-form-urlencoded",n.acceptCharset="UTF-8",(i=r.document.createElement("textarea")).name="d",n.appendChild(i),r.document.body.appendChild(n)}"production"!==s.env.NODE_ENV&&(l=t("debug")("sockjs-client:sender:jsonp")),e.exports=function(t,e,s){l(t,e),n||u();var r="a"+o.string(8);n.target=r,n.action=a.addQuery(a.addPath(t,"/jsonp_send"),"i="+r);var c=h(r);c.id=r,c.style.display="none",n.appendChild(c);try{i.value=e}catch(t){}n.submit();var d=function(t){l("completed",r,t),c.onerror&&(c.onreadystatechange=c.onerror=c.onload=null,setTimeout((function(){l("cleaning up",r),c.parentNode.removeChild(c),c=null}),500),i.value="",s(t))};return c.onerror=function(){l("onerror",r),d()},c.onload=function(){l("onload",r),d()},c.onreadystatechange=function(t){l("onreadystatechange",r,c.readyState,t),"complete"===c.readyState&&d()},function(){l("aborted",r),d(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(t,e,r){(function(s,r){"use strict";var n=t("events").EventEmitter,i=t("inherits"),o=t("../../utils/event"),a=t("../../utils/browser"),l=t("../../utils/url"),h=function(){};function u(t,e,s){h(t,e);var r=this;n.call(this),setTimeout((function(){r._start(t,e,s)}),0)}"production"!==s.env.NODE_ENV&&(h=t("debug")("sockjs-client:sender:xdr")),i(u,n),u.prototype._start=function(t,e,s){h("_start");var n=this,i=new r.XDomainRequest;e=l.addQuery(e,"t="+ +new Date),i.onerror=function(){h("onerror"),n._error()},i.ontimeout=function(){h("ontimeout"),n._error()},i.onprogress=function(){h("progress",i.responseText),n.emit("chunk",200,i.responseText)},i.onload=function(){h("load"),n.emit("finish",200,i.responseText),n._cleanup(!1)},this.xdr=i,this.unloadRef=o.unloadAdd((function(){n._cleanup(!0)}));try{this.xdr.open(t,e),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(s)}catch(t){this._error()}},u.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},u.prototype._cleanup=function(t){if(h("cleanup",t),this.xdr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,t)try{this.xdr.abort()}catch(t){}this.unloadRef=this.xdr=null}},u.prototype.close=function(){h("close"),this._cleanup(!0)},u.enabled=!(!r.XDomainRequest||!a.hasDomain()),e.exports=u}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(t,e,s){"use strict";var r=t("inherits"),n=t("../driver/xhr");function i(t,e,s,r){n.call(this,t,e,s,r)}r(i,n),i.enabled=n.enabled&&n.supportsCORS,e.exports=i},{"../driver/xhr":17,inherits:57}],36:[function(t,e,s){"use strict";var r=t("events").EventEmitter;function n(){var t=this;r.call(this),this.to=setTimeout((function(){t.emit("finish",200,"{}")}),n.timeout)}t("inherits")(n,r),n.prototype.close=function(){clearTimeout(this.to)},n.timeout=2e3,e.exports=n},{events:3,inherits:57}],37:[function(t,e,s){"use strict";var r=t("inherits"),n=t("../driver/xhr");function i(t,e,s){n.call(this,t,e,s,{noCredentials:!0})}r(i,n),i.enabled=n.enabled,e.exports=i},{"../driver/xhr":17,inherits:57}],38:[function(t,e,s){(function(s){"use strict";var r=t("../utils/event"),n=t("../utils/url"),i=t("inherits"),o=t("events").EventEmitter,a=t("./driver/websocket"),l=function(){};function h(t,e,s){if(!h.enabled())throw new Error("Transport created when disabled");o.call(this),l("constructor",t);var i=this,u=n.addPath(t,"/websocket");u="https"===u.slice(0,5)?"wss"+u.slice(5):"ws"+u.slice(4),this.url=u,this.ws=new a(this.url,[],s),this.ws.onmessage=function(t){l("message event",t.data),i.emit("message",t.data)},this.unloadRef=r.unloadAdd((function(){l("unload"),i.ws.close()})),this.ws.onclose=function(t){l("close event",t.code,t.reason),i.emit("close",t.code,t.reason),i._cleanup()},this.ws.onerror=function(t){l("error event",t),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}"production"!==s.env.NODE_ENV&&(l=t("debug")("sockjs-client:websocket")),i(h,o),h.prototype.send=function(t){var e="["+t+"]";l("send",e),this.ws.send(e)},h.prototype.close=function(){l("close");var t=this.ws;this._cleanup(),t&&t.close()},h.prototype._cleanup=function(){l("_cleanup");var t=this.ws;t&&(t.onmessage=t.onclose=t.onerror=null),r.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},h.enabled=function(){return l("enabled"),!!a},h.transportName="websocket",h.roundTrips=2,e.exports=h}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./lib/ajax-based"),i=t("./xdr-streaming"),o=t("./receiver/xhr"),a=t("./sender/xdr");function l(t){if(!a.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr",o,a)}r(l,n),l.enabled=i.enabled,l.transportName="xdr-polling",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xdr");function a(t){if(!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr_streaming",i,o)}r(a,n),a.enabled=function(t){return!t.cookie_needed&&!t.nullOrigin&&o.enabled&&t.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,e.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(t,e,s){"use strict";var r=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xhr-cors"),a=t("./sender/xhr-local");function l(t){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr",i,o)}r(l,n),l.enabled=function(t){return!t.nullOrigin&&(!(!a.enabled||!t.sameOrigin)||o.enabled)},l.transportName="xhr-polling",l.roundTrips=2,e.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(t,e,r){(function(s){"use strict";var r=t("inherits"),n=t("./lib/ajax-based"),i=t("./receiver/xhr"),o=t("./sender/xhr-cors"),a=t("./sender/xhr-local"),l=t("../utils/browser");function h(t){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");n.call(this,t,"/xhr_streaming",i,o)}r(h,n),h.enabled=function(t){return!t.nullOrigin&&!l.isOpera()&&o.enabled},h.transportName="xhr-streaming",h.roundTrips=2,h.needBody=!!s.document,e.exports=h}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(t,e,r){(function(t){"use strict";t.crypto&&t.crypto.getRandomValues?e.exports.randomBytes=function(e){var s=new Uint8Array(e);return t.crypto.getRandomValues(s),s}:e.exports.randomBytes=function(t){for(var e=new Array(t),s=0;s<t;s++)e[s]=Math.floor(256*Math.random());return e}}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(t,e,r){(function(t){"use strict";e.exports={isOpera:function(){return t.navigator&&/opera/i.test(t.navigator.userAgent)},isKonqueror:function(){return t.navigator&&/konqueror/i.test(t.navigator.userAgent)},hasDomain:function(){if(!t.document)return!0;try{return!!t.document.domain}catch(t){return!1}}}}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(t,e,s){"use strict";var r,n=t("json3"),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,o=function(t){var e,s={},r=[];for(e=0;e<65536;e++)r.push(String.fromCharCode(e));return t.lastIndex=0,r.join("").replace(t,(function(t){return s[t]="\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4),""})),t.lastIndex=0,s};e.exports={quote:function(t){var e=n.stringify(t);return i.lastIndex=0,i.test(e)?(r||(r=o(i)),e.replace(i,(function(t){return r[t]}))):e}}},{json3:58}],46:[function(t,e,r){(function(s){"use strict";var r=t("./random"),n={},i=!1,o=s.chrome&&s.chrome.app&&s.chrome.app.runtime;e.exports={attachEvent:function(t,e){void 0!==s.addEventListener?s.addEventListener(t,e,!1):s.document&&s.attachEvent&&(s.document.attachEvent("on"+t,e),s.attachEvent("on"+t,e))},detachEvent:function(t,e){void 0!==s.addEventListener?s.removeEventListener(t,e,!1):s.document&&s.detachEvent&&(s.document.detachEvent("on"+t,e),s.detachEvent("on"+t,e))},unloadAdd:function(t){if(o)return null;var e=r.string(8);return n[e]=t,i&&setTimeout(this.triggerUnloadCallbacks,0),e},unloadDel:function(t){t in n&&delete n[t]},triggerUnloadCallbacks:function(){for(var t in n)n[t](),delete n[t]}};var a=function(){i||(i=!0,e.exports.triggerUnloadCallbacks())};o||e.exports.attachEvent("unload",a)}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(t,e,r){(function(s,r){"use strict";var n=t("./event"),i=t("json3"),o=t("./browser"),a=function(){};"production"!==s.env.NODE_ENV&&(a=t("debug")("sockjs-client:utils:iframe")),e.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){e.exports.WPrefix in r||(r[e.exports.WPrefix]={})},postMessage:function(t,s){r.parent!==r?r.parent.postMessage(i.stringify({windowId:e.exports.currentWindowId,type:t,data:s||""}),"*"):a("Cannot postMessage, no parent window.",t,s)},createIframe:function(t,e){var s,i,o=r.document.createElement("iframe"),l=function(){a("unattach"),clearTimeout(s);try{o.onload=null}catch(t){}o.onerror=null},h=function(){a("cleanup"),o&&(l(),setTimeout((function(){o&&o.parentNode.removeChild(o),o=null}),0),n.unloadDel(i))},u=function(t){a("onerror",t),o&&(h(),e(t))},c=function(t,e){a("post",t,e),setTimeout((function(){try{o&&o.contentWindow&&o.contentWindow.postMessage(t,e)}catch(t){}}),0)};return o.src=t,o.style.display="none",o.style.position="absolute",o.onerror=function(){u("onerror")},o.onload=function(){a("onload"),clearTimeout(s),s=setTimeout((function(){u("onload timeout")}),2e3)},r.document.body.appendChild(o),s=setTimeout((function(){u("timeout")}),15e3),i=n.unloadAdd(h),{post:c,cleanup:h,loaded:l}},createHtmlfile:function(t,s){var i,o,l,h=["Active"].concat("Object").join("X"),u=new r[h]("htmlfile"),c=function(){clearTimeout(i),l.onerror=null},d=function(){u&&(c(),n.unloadDel(o),l.parentNode.removeChild(l),l=u=null,CollectGarbage())},p=function(t){a("onerror",t),u&&(d(),s(t))},f=function(t,e){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(t,e)}),0)}catch(t){}};u.open(),u.write('<html><script>document.domain="'+r.document.domain+'";<\/script></html>'),u.close(),u.parentWindow[e.exports.WPrefix]=r[e.exports.WPrefix];var m=u.createElement("div");return u.body.appendChild(m),l=u.createElement("iframe"),m.appendChild(l),l.src=t,l.onerror=function(){p("onerror")},i=setTimeout((function(){p("timeout")}),15e3),o=n.unloadAdd(d),{post:f,cleanup:d,loaded:c}}},e.exports.iframeEnabled=!1,r.document&&(e.exports.iframeEnabled=("function"==typeof r.postMessage||"object"==typeof r.postMessage)&&!o.isKonqueror())}).call(this,{env:{}},void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(t,e,r){(function(t){"use strict";var s={};["log","debug","warn"].forEach((function(e){var r;try{r=t.console&&t.console[e]&&t.console[e].apply}catch(t){}s[e]=r?function(){return t.console[e].apply(t.console,arguments)}:"log"===e?function(){}:s.log})),e.exports=s}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(t,e,s){"use strict";e.exports={isObject:function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},extend:function(t){if(!this.isObject(t))return t;for(var e,s,r=1,n=arguments.length;r<n;r++)for(s in e=arguments[r])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}}},{}],50:[function(t,e,s){"use strict";var r=t("crypto"),n="abcdefghijklmnopqrstuvwxyz012345";e.exports={string:function(t){for(var e=n.length,s=r.randomBytes(t),i=[],o=0;o<t;o++)i.push(n.substr(s[o]%e,1));return i.join("")},number:function(t){return Math.floor(Math.random()*t)},numberString:function(t){var e=(""+(t-1)).length;return(new Array(e+1).join("0")+this.number(t)).slice(-e)}}},{crypto:43}],51:[function(t,e,s){(function(s){"use strict";var r=function(){};"production"!==s.env.NODE_ENV&&(r=t("debug")("sockjs-client:utils:transport")),e.exports=function(t){return{filterToEnabled:function(e,s){var n={main:[],facade:[]};return e?"string"==typeof e&&(e=[e]):e=[],t.forEach((function(t){t&&("websocket"!==t.transportName||!1!==s.websocket?e.length&&-1===e.indexOf(t.transportName)?r("not in whitelist",t.transportName):t.enabled(s)?(r("enabled",t.transportName),n.main.push(t),t.facadeTransport&&n.facade.push(t.facadeTransport)):r("disabled",t.transportName):r("disabled from server","websocket"))})),n}}}}).call(this,{env:{}})},{debug:55}],52:[function(t,e,s){(function(s){"use strict";var r=t("url-parse"),n=function(){};"production"!==s.env.NODE_ENV&&(n=t("debug")("sockjs-client:utils:url")),e.exports={getOrigin:function(t){if(!t)return null;var e=new r(t);if("file:"===e.protocol)return null;var s=e.port;return s||(s="https:"===e.protocol?"443":"80"),e.protocol+"//"+e.hostname+":"+s},isOriginEqual:function(t,e){var s=this.getOrigin(t)===this.getOrigin(e);return n("same",t,e,s),s},isSchemeEqual:function(t,e){return t.split(":")[0]===e.split(":")[0]},addPath:function(t,e){var s=t.split("?");return s[0]+e+(s[1]?"?"+s[1]:"")},addQuery:function(t,e){return t+(-1===t.indexOf("?")?"?"+e:"&"+e)},isLoopbackAddr:function(t){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t)||/^\[::1\]$/.test(t)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(t,e,s){e.exports="1.5.1"},{}],54:[function(t,e,s){var r=1e3,n=60*r,i=60*n,o=24*i,a=7*o,l=365.25*o;function h(t){if(!((t=String(t)).length>100)){var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(e){var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*l;case"weeks":case"week":case"w":return s*a;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}function u(t){var e=Math.abs(t);return e>=o?Math.round(t/o)+"d":e>=i?Math.round(t/i)+"h":e>=n?Math.round(t/n)+"m":e>=r?Math.round(t/r)+"s":t+"ms"}function c(t){var e=Math.abs(t);return e>=o?d(t,e,o,"day"):e>=i?d(t,e,i,"hour"):e>=n?d(t,e,n,"minute"):e>=r?d(t,e,r,"second"):t+" ms"}function d(t,e,s,r){var n=e>=1.5*s;return Math.round(t/s)+" "+r+(n?"s":"")}e.exports=function(t,e){e=e||{};var s=typeof t;if("string"===s&&t.length>0)return h(t);if("number"===s&&isFinite(t))return e.long?c(t):u(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},{}],55:[function(t,e,s){(function(r){"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function o(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),this.useColors){var s="color: "+this.color;t.splice(1,0,s,"color: inherit");var r=0,n=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(r++,"%c"===t&&(n=r))})),t.splice(n,0,s)}}function a(){var t;return"object"===("undefined"==typeof console?"undefined":n(console))&&console.log&&(t=console).log.apply(t,arguments)}function l(t){try{t?s.storage.setItem("debug",t):s.storage.removeItem("debug")}catch(t){}}function h(){var t;try{t=s.storage.getItem("debug")}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}function u(){try{return localStorage}catch(t){}}s.log=a,s.formatArgs=o,s.save=l,s.load=h,s.useColors=i,s.storage=u(),s.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=t("./common")(s),e.exports.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,{env:{}})},{"./common":56}],56:[function(t,e,s){"use strict";function r(e){function s(t){for(var e=0,s=0;s<t.length;s++)e=(e<<5)-e+t.charCodeAt(s),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){var e;function o(){if(o.enabled){for(var t=arguments.length,s=new Array(t),n=0;n<t;n++)s[n]=arguments[n];var i=o,a=Number(new Date),l=a-(e||a);i.diff=l,i.prev=e,i.curr=a,e=a,s[0]=r.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var h=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(t,e){if("%%"===t)return t;h++;var n=r.formatters[e];if("function"==typeof n){var o=s[h];t=n.call(i,o),s.splice(h,1),h--}return t})),r.formatArgs.call(i,s),(i.log||r.log).apply(i,s)}}return o.namespace=t,o.enabled=r.enabled(t),o.useColors=r.useColors(),o.color=s(t),o.destroy=n,o.extend=i,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function n(){var t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){return r(this.namespace+(void 0===e?":":e)+t)}function o(t){var e;r.save(t),r.names=[],r.skips=[];var s=("string"==typeof t?t:"").split(/[\s,]+/),n=s.length;for(e=0;e<n;e++)s[e]&&("-"===(t=s[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){var i=r.instances[e];i.enabled=r.enabled(i.namespace)}}function a(){r.enable("")}function l(t){if("*"===t[t.length-1])return!0;var e,s;for(e=0,s=r.skips.length;e<s;e++)if(r.skips[e].test(t))return!1;for(e=0,s=r.names.length;e<s;e++)if(r.names[e].test(t))return!0;return!1}function h(t){return t instanceof Error?t.stack||t.message:t}return r.debug=r,r.default=r,r.coerce=h,r.disable=a,r.enable=o,r.enabled=l,r.humanize=t("ms"),Object.keys(e).forEach((function(t){r[t]=e[t]})),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=s,r.enable(r.load()),r}e.exports=r},{ms:54}],57:[function(t,e,s){"function"==typeof Object.create?e.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(t,e){if(e){t.super_=e;var s=function(){};s.prototype=e.prototype,t.prototype=new s,t.prototype.constructor=t}}},{}],58:[function(t,e,n){(function(t){(function(){var s="function"==typeof r&&r.amd,i={function:!0,object:!0},o=i[typeof n]&&n&&!n.nodeType&&n,a=i[typeof window]&&window||this,l=o&&i[typeof e]&&e&&!e.nodeType&&"object"==typeof t&&t;function h(t,e){t||(t=a.Object()),e||(e=a.Object());var s=t.Number||a.Number,r=t.String||a.String,n=t.Object||a.Object,o=t.Date||a.Date,l=t.SyntaxError||a.SyntaxError,u=t.TypeError||a.TypeError,c=t.Math||a.Math,d=t.JSON||a.JSON;"object"==typeof d&&d&&(e.stringify=d.stringify,e.parse=d.parse);var p,f=n.prototype,m=f.toString,g=f.hasOwnProperty;function v(t,e){try{t()}catch(t){e&&e()}}var _=new o(-0xc782b5b800cec);function y(t){if(null!=y[t])return y[t];var n;if("bug-string-char-index"==t)n="a"!="a"[0];else if("json"==t)n=y("json-stringify")&&y("date-serialization")&&y("json-parse");else if("date-serialization"==t){if(n=y("json-stringify")&&_){var i=e.stringify;v((function(){n='"-271821-04-20T00:00:00.000Z"'==i(new o(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==i(new o(864e13))&&'"-000001-01-01T00:00:00.000Z"'==i(new o(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==i(new o(-1))}))}}else{var a,l='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var h="function"==typeof(i=e.stringify);h&&((a=function(){return 1}).toJSON=a,v((function(){h="0"===i(0)&&"0"===i(new s)&&'""'==i(new r)&&i(m)===p&&i(p)===p&&i()===p&&"1"===i(a)&&"[1]"==i([a])&&"[null]"==i([p])&&"null"==i(null)&&"[null,null,null]"==i([p,m,null])&&i({a:[a,!0,!1,null,"\0\b\n\f\r\t"]})==l&&"1"===i(null,a)&&"[\n 1,\n 2\n]"==i([1,2],null,1)}),(function(){h=!1}))),n=h}if("json-parse"==t){var u,c=e.parse;"function"==typeof c&&v((function(){0!==c("0")||c(!1)||(a=c(l),(u=5==a.a.length&&1===a.a[0])&&(v((function(){u=!c('"\t"')})),u&&v((function(){u=1!==c("01")})),u&&v((function(){u=1!==c("1.")}))))}),(function(){u=!1})),n=u}}return y[t]=!!n}if(v((function(){_=-109252==_.getUTCFullYear()&&0===_.getUTCMonth()&&1===_.getUTCDate()&&10==_.getUTCHours()&&37==_.getUTCMinutes()&&6==_.getUTCSeconds()&&708==_.getUTCMilliseconds()})),y["bug-string-char-index"]=y["date-serialization"]=y.json=y["json-stringify"]=y["json-parse"]=null,!y("json")){var b="[object Function]",w="[object Date]",x="[object Number]",j="[object String]",E="[object Array]",T="[object Boolean]",A=y("bug-string-char-index"),C=function(t,e){var s,r,n,o=0;for(n in(s=function(){this.valueOf=0}).prototype.valueOf=0,r=new s)g.call(r,n)&&o++;return s=r=null,o?C=function(t,e){var s,r,n=m.call(t)==b;for(s in t)n&&"prototype"==s||!g.call(t,s)||(r="constructor"===s)||e(s);(r||g.call(t,s="constructor"))&&e(s)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],C=function(t,e){var s,n,o=m.call(t)==b,a=!o&&"function"!=typeof t.constructor&&i[typeof t.hasOwnProperty]&&t.hasOwnProperty||g;for(s in t)o&&"prototype"==s||!a.call(t,s)||e(s);for(n=r.length;s=r[--n];)a.call(t,s)&&e(s)}),C(t,e)};if(!y("json-stringify")&&!y("date-serialization")){var S={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},M="000000",O=function(t,e){return(M+(e||0)).slice(-t)},L=function(t){var e,s,r,n,i,o,a,l,h;if(_)e=function(t){s=t.getUTCFullYear(),r=t.getUTCMonth(),n=t.getUTCDate(),o=t.getUTCHours(),a=t.getUTCMinutes(),l=t.getUTCSeconds(),h=t.getUTCMilliseconds()};else{var u=c.floor,d=[0,31,59,90,120,151,181,212,243,273,304,334],p=function(t,e){return d[e]+365*(t-1970)+u((t-1969+(e=+(e>1)))/4)-u((t-1901+e)/100)+u((t-1601+e)/400)};e=function(t){for(n=u(t/864e5),s=u(n/365.2425)+1970-1;p(s+1,0)<=n;s++);for(r=u((n-p(s,0))/30.42);p(s,r+1)<=n;r++);n=1+n-p(s,r),o=u((i=(t%864e5+864e5)%864e5)/36e5)%24,a=u(i/6e4)%60,l=u(i/1e3)%60,h=i%1e3}}return L=function(t){return t>-1/0&&t<1/0?(e(t),t=(s<=0||s>=1e4?(s<0?"-":"+")+O(6,s<0?-s:s):O(4,s))+"-"+O(2,r+1)+"-"+O(2,n)+"T"+O(2,o)+":"+O(2,a)+":"+O(2,l)+"."+O(3,h)+"Z",s=r=n=o=a=l=h=null):t=null,t},L(t)};if(y("json-stringify")&&!y("date-serialization")){function P(t){return L(this)}var k=e.stringify;e.stringify=function(t,e,s){var r=o.prototype.toJSON;o.prototype.toJSON=P;var n=k(t,e,s);return o.prototype.toJSON=r,n}}else{var R="\\u00",D=function(t){var e=t.charCodeAt(0),s=S[e];return s||R+O(2,e.toString(16))},q=/[\x00-\x1f\x22\x5c]/g,F=function(t){return q.lastIndex=0,'"'+(q.test(t)?t.replace(q,D):t)+'"'},N=function(t,e,s,r,n,i,a){var l,h,c,d,f,g,_,y,b;if(v((function(){l=e[t]})),"object"==typeof l&&l&&(l.getUTCFullYear&&m.call(l)==w&&l.toJSON===o.prototype.toJSON?l=L(l):"function"==typeof l.toJSON&&(l=l.toJSON(t))),s&&(l=s.call(e,t,l)),l==p)return l===p?l:"null";switch("object"==(h=typeof l)&&(c=m.call(l)),c||h){case"boolean":case T:return""+l;case"number":case x:return l>-1/0&&l<1/0?""+l:"null";case"string":case j:return F(""+l)}if("object"==typeof l){for(_=a.length;_--;)if(a[_]===l)throw u();if(a.push(l),d=[],y=i,i+=n,c==E){for(g=0,_=l.length;g<_;g++)f=N(g,l,s,r,n,i,a),d.push(f===p?"null":f);b=d.length?n?"[\n"+i+d.join(",\n"+i)+"\n"+y+"]":"["+d.join(",")+"]":"[]"}else C(r||l,(function(t){var e=N(t,l,s,r,n,i,a);e!==p&&d.push(F(t)+":"+(n?" ":"")+e)})),b=d.length?n?"{\n"+i+d.join(",\n"+i)+"\n"+y+"}":"{"+d.join(",")+"}":"{}";return a.pop(),b}};e.stringify=function(t,e,s){var r,n,o,a;if(i[typeof e]&&e)if((a=m.call(e))==b)n=e;else if(a==E){o={};for(var l,h=0,u=e.length;h<u;)l=e[h++],"[object String]"!=(a=m.call(l))&&"[object Number]"!=a||(o[l]=1)}if(s)if((a=m.call(s))==x){if((s-=s%1)>0)for(s>10&&(s=10),r="";r.length<s;)r+=" "}else a==j&&(r=s.length<=10?s:s.slice(0,10));return N("",((l={})[""]=t,l),n,o,r,"",[])}}}if(!y("json-parse")){var I,z,U=r.fromCharCode,B={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},V=function(){throw I=z=null,l()},G=function(){for(var t,e,s,r,n,i=z,o=i.length;I<o;)switch(n=i.charCodeAt(I)){case 9:case 10:case 13:case 32:I++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=A?i.charAt(I):i[I],I++,t;case 34:for(t="@",I++;I<o;)if((n=i.charCodeAt(I))<32)V();else if(92==n)switch(n=i.charCodeAt(++I)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=B[n],I++;break;case 117:for(e=++I,s=I+4;I<s;I++)(n=i.charCodeAt(I))>=48&&n<=57||n>=97&&n<=102||n>=65&&n<=70||V();t+=U("0x"+i.slice(e,I));break;default:V()}else{if(34==n)break;for(n=i.charCodeAt(I),e=I;n>=32&&92!=n&&34!=n;)n=i.charCodeAt(++I);t+=i.slice(e,I)}if(34==i.charCodeAt(I))return I++,t;V();default:if(e=I,45==n&&(r=!0,n=i.charCodeAt(++I)),n>=48&&n<=57){for(48==n&&(n=i.charCodeAt(I+1))>=48&&n<=57&&V(),r=!1;I<o&&(n=i.charCodeAt(I))>=48&&n<=57;I++);if(46==i.charCodeAt(I)){for(s=++I;s<o&&!((n=i.charCodeAt(s))<48||n>57);s++);s==I&&V(),I=s}if(101==(n=i.charCodeAt(I))||69==n){for(43!=(n=i.charCodeAt(++I))&&45!=n||I++,s=I;s<o&&!((n=i.charCodeAt(s))<48||n>57);s++);s==I&&V(),I=s}return+i.slice(e,I)}r&&V();var a=i.slice(I,I+4);if("true"==a)return I+=4,!0;if("fals"==a&&101==i.charCodeAt(I+4))return I+=5,!1;if("null"==a)return I+=4,null;V()}return"$"},W=function(t){var e,s;if("$"==t&&V(),"string"==typeof t){if("@"==(A?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];"]"!=(t=G());)s?","==t?"]"==(t=G())&&V():V():s=!0,","==t&&V(),e.push(W(t));return e}if("{"==t){for(e={};"}"!=(t=G());)s?","==t?"}"==(t=G())&&V():V():s=!0,","!=t&&"string"==typeof t&&"@"==(A?t.charAt(0):t[0])&&":"==G()||V(),e[t.slice(1)]=W(G());return e}V()}return t},H=function(t,e,s){var r=Y(t,e,s);r===p?delete t[e]:t[e]=r},Y=function(t,e,s){var r,n=t[e];if("object"==typeof n&&n)if(m.call(n)==E)for(r=n.length;r--;)H(m,C,n,r,s);else C(n,(function(t){H(n,t,s)}));return s.call(t,e,n)};e.parse=function(t,e){var s,r;return I=0,z=""+t,s=W(G()),"$"!=G()&&V(),I=z=null,e&&m.call(e)==b?Y(((r={})[""]=s,r),"",e):s}}}return e.runInContext=h,e}if(!l||l.global!==l&&l.window!==l&&l.self!==l||(a=l),o&&!s)h(a,o);else{var u=a.JSON,c=a.JSON3,d=!1,p=h(a,a.JSON3={noConflict:function(){return d||(d=!0,a.JSON=u,a.JSON3=c,u=c=null),p}});a.JSON={parse:p.parse,stringify:p.stringify}}s&&r((function(){return p}))}).call(this)}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(t,e,s){"use strict";var r,n=Object.prototype.hasOwnProperty;function i(t){try{return decodeURIComponent(t.replace(/\+/g," "))}catch(t){return null}}function o(t){for(var e,s=/([^=?&]+)=?([^&]*)/g,r={};e=s.exec(t);){var n=i(e[1]),o=i(e[2]);null===n||null===o||n in r||(r[n]=o)}return r}function a(t,e){e=e||"";var s,i,o=[];for(i in"string"!=typeof e&&(e="?"),t)if(n.call(t,i)){if((s=t[i])||null!==s&&s!==r&&!isNaN(s)||(s=""),i=encodeURIComponent(i),s=encodeURIComponent(s),null===i||null===s)continue;o.push(i+"="+s)}return o.length?e+o.join("&"):""}s.stringify=a,s.parse=o},{}],60:[function(t,e,s){"use strict";e.exports=function(t,e){if(e=e.split(":")[0],!(t=+t))return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},{}],61:[function(t,e,r){(function(s){"use strict";var r=t("requires-port"),n=t("querystringify"),i=/^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/,o=/^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i,a=new RegExp("^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+");function l(t){return(t||"").toString().replace(a,"")}var h=[["#","hash"],["?","query"],function(t){return t.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],u={hash:1,query:1};function c(t){var e,r=("undefined"!=typeof window?window:void 0!==s?s:"undefined"!=typeof self?self:{}).location||{},n={},o=typeof(t=t||r);if("blob:"===t.protocol)n=new f(unescape(t.pathname),{});else if("string"===o)for(e in n=new f(t,{}),u)delete n[e];else if("object"===o){for(e in t)e in u||(n[e]=t[e]);void 0===n.slashes&&(n.slashes=i.test(t.href))}return n}function d(t){t=l(t);var e=o.exec(t);return{protocol:e[1]?e[1].toLowerCase():"",slashes:!!(e[2]&&e[2].length>=2),rest:e[2]&&1===e[2].length?"/"+e[3]:e[3]}}function p(t,e){if(""===t)return e;for(var s=(e||"/").split("/").slice(0,-1).concat(t.split("/")),r=s.length,n=s[r-1],i=!1,o=0;r--;)"."===s[r]?s.splice(r,1):".."===s[r]?(s.splice(r,1),o++):o&&(0===r&&(i=!0),s.splice(r,1),o--);return i&&s.unshift(""),"."!==n&&".."!==n||s.push(""),s.join("/")}function f(t,e,s){if(t=l(t),!(this instanceof f))return new f(t,e,s);var i,o,a,u,m,g,v=h.slice(),_=typeof e,y=this,b=0;for("object"!==_&&"string"!==_&&(s=e,e=null),s&&"function"!=typeof s&&(s=n.parse),e=c(e),i=!(o=d(t||"")).protocol&&!o.slashes,y.slashes=o.slashes||i&&e.slashes,y.protocol=o.protocol||e.protocol||"",t=o.rest,o.slashes||(v[3]=[/(.*)/,"pathname"]);b<v.length;b++)"function"!=typeof(u=v[b])?(a=u[0],g=u[1],a!=a?y[g]=t:"string"==typeof a?~(m=t.indexOf(a))&&("number"==typeof u[2]?(y[g]=t.slice(0,m),t=t.slice(m+u[2])):(y[g]=t.slice(m),t=t.slice(0,m))):(m=a.exec(t))&&(y[g]=m[1],t=t.slice(0,m.index)),y[g]=y[g]||i&&u[3]&&e[g]||"",u[4]&&(y[g]=y[g].toLowerCase())):t=u(t);s&&(y.query=s(y.query)),i&&e.slashes&&"/"!==y.pathname.charAt(0)&&(""!==y.pathname||""!==e.pathname)&&(y.pathname=p(y.pathname,e.pathname)),"/"!==y.pathname.charAt(0)&&y.hostname&&(y.pathname="/"+y.pathname),r(y.port,y.protocol)||(y.host=y.hostname,y.port=""),y.username=y.password="",y.auth&&(u=y.auth.split(":"),y.username=u[0]||"",y.password=u[1]||""),y.origin=y.protocol&&y.host&&"file:"!==y.protocol?y.protocol+"//"+y.host:"null",y.href=y.toString()}function m(t,e,s){var i=this;switch(t){case"query":"string"==typeof e&&e.length&&(e=(s||n.parse)(e)),i[t]=e;break;case"port":i[t]=e,r(e,i.protocol)?e&&(i.host=i.hostname+":"+e):(i.host=i.hostname,i[t]="");break;case"hostname":i[t]=e,i.port&&(e+=":"+i.port),i.host=e;break;case"host":i[t]=e,/:\d+$/.test(e)?(e=e.split(":"),i.port=e.pop(),i.hostname=e.join(":")):(i.hostname=e,i.port="");break;case"protocol":i.protocol=e.toLowerCase(),i.slashes=!s;break;case"pathname":case"hash":if(e){var o="pathname"===t?"/":"#";i[t]=e.charAt(0)!==o?o+e:e}else i[t]=e;break;default:i[t]=e}for(var a=0;a<h.length;a++){var l=h[a];l[4]&&(i[l[1]]=i[l[1]].toLowerCase())}return i.origin=i.protocol&&i.host&&"file:"!==i.protocol?i.protocol+"//"+i.host:"null",i.href=i.toString(),i}function g(t){t&&"function"==typeof t||(t=n.stringify);var e,s=this,r=s.protocol;r&&":"!==r.charAt(r.length-1)&&(r+=":");var i=r+(s.slashes?"//":"");return s.username&&(i+=s.username,s.password&&(i+=":"+s.password),i+="@"),i+=s.host+s.pathname,(e="object"==typeof s.query?t(s.query):s.query)&&(i+="?"!==e.charAt(0)?"?"+e:e),s.hash&&(i+=s.hash),i}f.prototype={set:m,toString:g},f.extractProtocol=d,f.location=c,f.trimLeft=l,f.qs=n,e.exports=f}).call(this,void 0!==s.g?s.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:59,"requires-port":60}]},{},[1])(1)},"./node_modules/strip-ansi/index.js":(t,e,s)=>{"use strict";var r=s("./node_modules/ansi-regex/index.js")();t.exports=function(t){return"string"==typeof t?t.replace(r,""):t}},"./node_modules/url/node_modules/punycode/punycode.js":function(t,e,s){var r;t=s.nmd(t),function(n){e&&e.nodeType,t&&t.nodeType;var i="object"==typeof s.g&&s.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,h=1,u=26,c=38,d=700,p=72,f=128,m="-",g=/^xn--/,v=/[^\x20-\x7E]/,_=/[\x2E\u3002\uFF0E\uFF61]/g,y={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},b=l-h,w=Math.floor,x=String.fromCharCode;function j(t){throw RangeError(y[t])}function E(t,e){for(var s=t.length,r=[];s--;)r[s]=e(t[s]);return r}function T(t,e){var s=t.split("@"),r="";return s.length>1&&(r=s[0]+"@",t=s[1]),r+E((t=t.replace(_,".")).split("."),e).join(".")}function A(t){for(var e,s,r=[],n=0,i=t.length;n<i;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<i?56320==(64512&(s=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&s)+65536):(r.push(e),n--):r.push(e);return r}function C(t){return E(t,(function(t){var e="";return t>65535&&(e+=x((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=x(t)})).join("")}function S(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function M(t,e,s){var r=0;for(t=s?w(t/d):t>>1,t+=w(t/e);t>b*u>>1;r+=l)t=w(t/b);return w(r+(b+1)*t/(t+c))}function O(t){var e,s,r,n,i,o,c,d,g,v,_,y=[],b=t.length,x=0,E=f,T=p;for((s=t.lastIndexOf(m))<0&&(s=0),r=0;r<s;++r)t.charCodeAt(r)>=128&&j("not-basic"),y.push(t.charCodeAt(r));for(n=s>0?s+1:0;n<b;){for(i=x,o=1,c=l;n>=b&&j("invalid-input"),((d=(_=t.charCodeAt(n++))-48<10?_-22:_-65<26?_-65:_-97<26?_-97:l)>=l||d>w((a-x)/o))&&j("overflow"),x+=d*o,!(d<(g=c<=T?h:c>=T+u?u:c-T));c+=l)o>w(a/(v=l-g))&&j("overflow"),o*=v;T=M(x-i,e=y.length+1,0==i),w(x/e)>a-E&&j("overflow"),E+=w(x/e),x%=e,y.splice(x++,0,E)}return C(y)}function L(t){var e,s,r,n,i,o,c,d,g,v,_,y,b,E,T,C=[];for(y=(t=A(t)).length,e=f,s=0,i=p,o=0;o<y;++o)(_=t[o])<128&&C.push(x(_));for(r=n=C.length,n&&C.push(m);r<y;){for(c=a,o=0;o<y;++o)(_=t[o])>=e&&_<c&&(c=_);for(c-e>w((a-s)/(b=r+1))&&j("overflow"),s+=(c-e)*b,e=c,o=0;o<y;++o)if((_=t[o])<e&&++s>a&&j("overflow"),_==e){for(d=s,g=l;!(d<(v=g<=i?h:g>=i+u?u:g-i));g+=l)T=d-v,E=l-v,C.push(x(S(v+T%E,0))),d=w(T/E);C.push(x(S(d,0))),i=M(s,b,r==n),s=0,++r}++s,++e}return C.join("")}o={version:"1.3.2",ucs2:{decode:A,encode:C},decode:O,encode:L,toASCII:function(t){return T(t,(function(t){return v.test(t)?"xn--"+L(t):t}))},toUnicode:function(t){return T(t,(function(t){return g.test(t)?O(t.slice(4).toLowerCase()):t}))}},void 0===(r=function(){return o}.call(e,s,e,t))||(t.exports=r)}()},"./node_modules/url/url.js":(t,e,s)=>{"use strict";var r=s("./node_modules/url/node_modules/punycode/punycode.js"),n=s("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=y,e.resolve=function(t,e){return y(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?y(t,!1,!0).resolveObject(e):e},e.format=function(t){n.isString(t)&&(t=y(t));return t instanceof i?t.format():i.prototype.format.call(t)},e.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,h=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(h),c=["%","/","?",";","#"].concat(u),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=s("./node_modules/querystring/index.js");function y(t,e,s){if(t&&n.isObject(t)&&t instanceof i)return t;var r=new i;return r.parse(t,e,s),r}i.prototype.parse=function(t,e,s){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var i=t.indexOf("?"),a=-1!==i&&i<t.indexOf("#")?"?":"#",h=t.split(a);h[0]=h[0].replace(/\\/g,"/");var y=t=h.join(a);if(y=y.trim(),!s&&1===t.split("#").length){var b=l.exec(y);if(b)return this.path=y,this.href=y,this.pathname=b[1],b[2]?(this.search=b[2],this.query=e?_.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=o.exec(y);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,y=y.substr(w.length)}if(s||w||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var j="//"===y.substr(0,2);!j||w&&g[w]||(y=y.substr(2),this.slashes=!0)}if(!g[w]&&(j||w&&!v[w])){for(var E,T,A=-1,C=0;C<d.length;C++){-1!==(S=y.indexOf(d[C]))&&(-1===A||S<A)&&(A=S)}-1!==(T=-1===A?y.lastIndexOf("@"):y.lastIndexOf("@",A))&&(E=y.slice(0,T),y=y.slice(T+1),this.auth=decodeURIComponent(E)),A=-1;for(C=0;C<c.length;C++){var S;-1!==(S=y.indexOf(c[C]))&&(-1===A||S<A)&&(A=S)}-1===A&&(A=y.length),this.host=y.slice(0,A),y=y.slice(A),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var O=this.hostname.split(/\./),L=(C=0,O.length);C<L;C++){var P=O[C];if(P&&!P.match(p)){for(var k="",R=0,D=P.length;R<D;R++)P.charCodeAt(R)>127?k+="x":k+=P[R];if(!k.match(p)){var q=O.slice(0,C),F=O.slice(C+1),N=P.match(f);N&&(q.push(N[1]),F.unshift(N[2])),F.length&&(y="/"+F.join(".")+y),this.hostname=q.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=r.toASCII(this.hostname));var I=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+I,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[x])for(C=0,L=u.length;C<L;C++){var U=u[C];if(-1!==y.indexOf(U)){var B=encodeURIComponent(U);B===U&&(B=escape(U)),y=y.split(U).join(B)}}var V=y.indexOf("#");-1!==V&&(this.hash=y.substr(V),y=y.slice(0,V));var G=y.indexOf("?");if(-1!==G?(this.search=y.substr(G),this.query=y.substr(G+1),e&&(this.query=_.parse(this.query)),y=y.slice(0,G)):e&&(this.search="",this.query={}),y&&(this.pathname=y),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){I=this.pathname||"";var W=this.search||"";this.path=I+W}return this.href=this.format(),this},i.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",s=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=t+this.host:this.hostname&&(i=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(o=_.stringify(this.query));var a=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||v[e])&&!1!==i?(i="//"+(i||""),s&&"/"!==s.charAt(0)&&(s="/"+s)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),e+i+(s=s.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+r},i.prototype.resolve=function(t){return this.resolveObject(y(t,!1,!0)).format()},i.prototype.resolveObject=function(t){if(n.isString(t)){var e=new i;e.parse(t,!1,!0),t=e}for(var s=new i,r=Object.keys(this),o=0;o<r.length;o++){var a=r[o];s[a]=this[a]}if(s.hash=t.hash,""===t.href)return s.href=s.format(),s;if(t.slashes&&!t.protocol){for(var l=Object.keys(t),h=0;h<l.length;h++){var u=l[h];"protocol"!==u&&(s[u]=t[u])}return v[s.protocol]&&s.hostname&&!s.pathname&&(s.path=s.pathname="/"),s.href=s.format(),s}if(t.protocol&&t.protocol!==s.protocol){if(!v[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var p=c[d];s[p]=t[p]}return s.href=s.format(),s}if(s.protocol=t.protocol,t.host||g[t.protocol])s.pathname=t.pathname;else{for(var f=(t.pathname||"").split("/");f.length&&!(t.host=f.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),s.pathname=f.join("/")}if(s.search=t.search,s.query=t.query,s.host=t.host||"",s.auth=t.auth,s.hostname=t.hostname||t.host,s.port=t.port,s.pathname||s.search){var m=s.pathname||"",_=s.search||"";s.path=m+_}return s.slashes=s.slashes||t.slashes,s.href=s.format(),s}var y=s.pathname&&"/"===s.pathname.charAt(0),b=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=b||y||s.host&&t.pathname,x=w,j=s.pathname&&s.pathname.split("/")||[],E=(f=t.pathname&&t.pathname.split("/")||[],s.protocol&&!v[s.protocol]);if(E&&(s.hostname="",s.port=null,s.host&&(""===j[0]?j[0]=s.host:j.unshift(s.host)),s.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===f[0]?f[0]=t.host:f.unshift(t.host)),t.host=null),w=w&&(""===f[0]||""===j[0])),b)s.host=t.host||""===t.host?t.host:s.host,s.hostname=t.hostname||""===t.hostname?t.hostname:s.hostname,s.search=t.search,s.query=t.query,j=f;else if(f.length)j||(j=[]),j.pop(),j=j.concat(f),s.search=t.search,s.query=t.query;else if(!n.isNullOrUndefined(t.search)){if(E)s.hostname=s.host=j.shift(),(M=!!(s.host&&s.host.indexOf("@")>0)&&s.host.split("@"))&&(s.auth=M.shift(),s.host=s.hostname=M.shift());return s.search=t.search,s.query=t.query,n.isNull(s.pathname)&&n.isNull(s.search)||(s.path=(s.pathname?s.pathname:"")+(s.search?s.search:"")),s.href=s.format(),s}if(!j.length)return s.pathname=null,s.search?s.path="/"+s.search:s.path=null,s.href=s.format(),s;for(var T=j.slice(-1)[0],A=(s.host||t.host||j.length>1)&&("."===T||".."===T)||""===T,C=0,S=j.length;S>=0;S--)"."===(T=j[S])?j.splice(S,1):".."===T?(j.splice(S,1),C++):C&&(j.splice(S,1),C--);if(!w&&!x)for(;C--;C)j.unshift("..");!w||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),A&&"/"!==j.join("/").substr(-1)&&j.push("");var M,O=""===j[0]||j[0]&&"/"===j[0].charAt(0);E&&(s.hostname=s.host=O?"":j.length?j.shift():"",(M=!!(s.host&&s.host.indexOf("@")>0)&&s.host.split("@"))&&(s.auth=M.shift(),s.host=s.hostname=M.shift()));return(w=w||s.host&&j.length)&&!O&&j.unshift(""),j.length?s.pathname=j.join("/"):(s.pathname=null,s.path=null),n.isNull(s.pathname)&&n.isNull(s.search)||(s.path=(s.pathname?s.pathname:"")+(s.search?s.search:"")),s.auth=t.auth||s.auth,s.slashes=s.slashes||t.slashes,s.href=s.format(),s},i.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},"./node_modules/url/util.js":t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":t=>{"use strict";function e(t,e){for(var s=0;s<e.length;s++){var r=e[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var s,r,n;return s=t,n=[{key:"getClientPath",value:function(t){throw new Error("Client needs implementation")}}],(r=null)&&e(s.prototype,r),n&&e(s,n),t}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(t,e,s)=>{"use strict";function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function n(t,e){for(var s=0;s<e.length;s++){var r=e[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){return i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},i(t,e)}function o(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var s,n=a(t);if(e){var i=a(this).constructor;s=Reflect.construct(n,arguments,i)}else s=n.apply(this,arguments);return function(t,e){if(e&&("object"===r(e)||"function"==typeof e))return e;return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,s)}}function a(t){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},a(t)}var l=s("./node_modules/sockjs-client/dist/sockjs.js"),h=s("./node_modules/webpack-dev-server/client/clients/BaseClient.js");t.exports=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(h,t);var e,s,r,a=o(h);function h(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,h),(e=a.call(this)).sock=new l(t),e.sock.onerror=function(t){},e}return e=h,r=[{key:"getClientPath",value:function(t){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(s=[{key:"onOpen",value:function(t){this.sock.onopen=t}},{key:"onClose",value:function(t){this.sock.onclose=t}},{key:"onMessage",value:function(t){this.sock.onmessage=function(e){t(e.data)}}}])&&n(e.prototype,s),r&&n(e,r),h}(h)},"./node_modules/webpack-dev-server/client/overlay.js":(t,e,s)=>{"use strict";var r=s("./node_modules/ansi-html-community/index.js"),n=new(0,s("./node_modules/html-entities/lib/index.js").AllHtmlEntities),i={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},o=null,a=null,l=null;function h(t){var e,s;a?t(a):(l=t,o||(e=function(){var t,e;(e=(t=o).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",e.style.position="fixed",e.style.boxSizing="border-box",e.style.left=0,e.style.top=0,e.style.right=0,e.style.bottom=0,e.style.width="100vw",e.style.height="100vh",e.style.backgroundColor="rgba(0, 0, 0, 0.85)",e.style.color="#E8E8E8",e.style.fontFamily="Menlo, Consolas, monospace",e.style.fontSize="large",e.style.padding="2rem",e.style.lineHeight="1.2",e.style.whiteSpace="pre-wrap",e.style.overflow="auto",t.contentDocument.body.appendChild(e),l(a=e)},(s=document.createElement("iframe")).id="webpack-dev-server-client-overlay",s.src="about:blank",s.style.position="fixed",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.border="none",s.style.zIndex=9999999999,s.onload=e,o=s,document.body.appendChild(o)))}r.setColors(i),t.exports={clear:function(){a&&(document.body.removeChild(o),a=null,o=null,l=null)},showMessage:function(t){h((function(e){e.innerHTML='<span style="color: #'.concat(i.red,'">Failed to compile.</span><br><br>').concat(r(n.encode(t[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(t,e,s)=>{"use strict";var r=s("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),n=void 0!==r?r:s("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=0,o=null,a=function(t,e){(o=new n(t)).onOpen((function(){i=0})),o.onClose((function(){if(0===i&&e.close(),o=null,i<=10){var s=1e3*Math.pow(2,i)+100*Math.random();i+=1,setTimeout((function(){a(t,e)}),s)}})),o.onMessage((function(t){var s=JSON.parse(t);e[s.type]&&e[s.type](s.data)}))};t.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(t,e,s)=>{"use strict";var r=s("./node_modules/url/url.js"),n=s("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");t.exports=function(t,e){var s;if("string"==typeof t&&""!==t)s=r.parse(t.substr(1).replace("&","?"),!0);else{var i=n();s=r.parse(i||"/",!0,!0)}return function(t,e){var s=t.auth,n=t.query,i=t.hostname,o=t.protocol,a=t.port;a&&"0"!==a||(a=e.port);"0.0.0.0"!==i&&"::"!==i||!e.hostname||0!==e.protocol.indexOf("http")||(i=e.hostname);!i||"127.0.0.1"===i||"https:"!==e.protocol&&"0.0.0.0"!==t.hostname||(o=e.protocol);var l=n.sockHost||i,h=n.sockPath||"/sockjs-node",u=n.sockPort||a;"location"===u&&(u=e.port);return r.format({protocol:o,auth:s,hostname:l,port:u,pathname:h})}(s,e="string"==typeof e&&""!==e?r.parse(e):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":t=>{"use strict";t.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var t=document.scripts||[],e=t[t.length-1];if(e)return e.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(t,e,s)=>{"use strict";var r=s("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),n="info";r.setDefaultLevel(n),t.exports={log:r,setLogLevel:function(t){switch(t){case n:case"warn":case"error":case"debug":case"trace":r.setLevel(t);break;case"warning":r.setLevel("warn");break;case"none":case"silent":r.disableAll();break;default:r.error("[WDS] Unknown clientLogLevel '".concat(t,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(t,e,s)=>{"use strict";var r=s("./node_modules/webpack-dev-server/client/utils/log.js").log;t.exports=function(t,e){var n=t.hotReload,i=t.hot,o=t.liveReload,a=e.isUnloading,l=e.currentHash;if(!a&&n)if(i)r.info("[WDS] App hot update..."),s("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(o)var h=self,u=self.setInterval((function(){("about:"!==h.location.protocol||(h=h.parent).parent===h)&&c(h,u)}));function c(t,e){clearInterval(e),r.info("[WDS] App updated. Reloading..."),t.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":t=>{"use strict";t.exports=function(t,e){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(t),data:e},"*")}},"./node_modules/webpack/hot/emitter.js":(t,e,s)=>{var r=s("./node_modules/events/events.js");t.exports=new r},"./node_modules/webpack/hot/log.js":t=>{var e="info";function s(){}function r(t){return"info"===e&&"info"===t||["info","warning"].indexOf(e)>=0&&"warning"===t||["info","warning","error"].indexOf(e)>=0&&"error"===t}function n(t){return function(e,s){r(e)&&t(s)}}t.exports=function(t,e){r(t)&&("info"===t?console.log(e):"warning"===t?console.warn(e):"error"===t&&console.error(e))};var i=console.group||s,o=console.groupCollapsed||s,a=console.groupEnd||s;t.exports.group=n(i),t.exports.groupCollapsed=n(o),t.exports.groupEnd=n(a),t.exports.setLogLevel=function(t){e=t},t.exports.formatError=function(t){var e=t.message,s=t.stack;return s?s.indexOf(e)<0?e+"\n"+s:s:e}},"./styles/styles.css":(t,e,s)=>{"use strict";s.r(e)},"./app/shaders/collections-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/collections-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  vPosition = newPosition;\n\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/home-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a *= uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying float speed;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  newPosition.z += (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0)) * uSpeed;\n\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./node_modules/webpack/hot sync ^\\.\\/log$":(t,e,s)=>{var r={"./log":"./node_modules/webpack/hot/log.js"};function n(t){var e=i(t);return s(e)}function i(t){if(!s.o(r,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return r[t]}n.keys=function(){return Object.keys(r)},n.resolve=i,t.exports=n,n.id="./node_modules/webpack/hot sync ^\\.\\/log$"}},e={};function s(r){var n=e[r];if(void 0!==n)return n.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.loaded=!0,i.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";s.r({});var t=s("./node_modules/normalize-wheel/index.js"),e=s.n(t),r=s("./node_modules/lodash/each.js"),n=s.n(r),i=s("./app/components/Canvas/index.js"),o=s("./app/components/Navigation.js"),a=s("./app/components/Preloader.js"),l=s("./app/components/Transition.js"),h=s("./app/pages/About/index.js"),u=s("./app/pages/Collections/index.js"),c=(s("./app/pages/Details/index.js"),s("./app/pages/Home/index.js"));s("./styles/styles.css");new class{constructor(){this.template=window.location.pathname,this.createCanvas(),this.createPreloader(),this.createTransition(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new o.default({template:this.template})}createPreloader(){this.preloader=new a.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new i.default({template:this.template})}createTransition(){this.transition=new l.default}createPages(){this.about=new h.default,this.collections=new u.default,this.home=new c.default,this.pages={"/":this.home,"/about":this.about,"/collections":this.collections},this.page=this.pages[this.template]}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:t,push:e=!0}){t=t.replace(window.location.origin,"");const s=this.pages[t];await this.transition.show({color:s.element.getAttribute("data-color")}),e&&window.history.pushState({},"",t),this.template=window.location.pathname,this.page.hide(),this.navigation.onChange(this.template),this.canvas.onChange(this.template),this.page=s,this.page.show(),this.onResize(),this.transition.hide()}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t),this.page&&this.page.onTouchDown&&this.page.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t),this.page&&this.page.onTouchDown&&this.page.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t),this.page&&this.page.onTouchDown&&this.page.onTouchUp(t)}onWheel(t){const s=e()(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(s),this.page&&this.page.onWheel&&this.page.onWheel(s)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");n()(t,(t=>{const e=t.href.indexOf(window.location.origin)>-1,s=-1===t.href.indexOf("mailto"),r=-1===t.href.indexOf("tel");e?(t.onclick=e=>{e.preventDefault(),this.onChange({url:t.href})},t.onmouseenter=e=>this.onLinkMouseEnter(t),t.onmouseleave=e=>this.onLinkMouseLeave(t)):s&&r&&(t.rel="noopener",t.target="_blank")}))}}})(),(()=>{"use strict";var t=s("./node_modules/strip-ansi/index.js"),e=s("./node_modules/webpack-dev-server/client/socket.js"),r=s("./node_modules/webpack-dev-server/client/overlay.js"),n=s("./node_modules/webpack-dev-server/client/utils/log.js"),i=n.log,o=n.setLogLevel,a=s("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=s("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=s("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),u={isUnloading:!1,currentHash:""},c={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},d=h("?http://localhost:8080");if(self.addEventListener("beforeunload",(function(){u.isUnloading=!0})),"undefined"!=typeof window){var p=window.location.search.toLowerCase();c.hotReload=-1===p.indexOf("hotreload=false")}e(d,{hot:function(){c.hot=!0,i.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){c.liveReload=!0,i.info("[WDS] Live Reloading enabled.")},invalid:function(){i.info("[WDS] App updated. Recompiling..."),(c.useWarningOverlay||c.useErrorOverlay)&&r.clear(),a("Invalid")},hash:function(t){u.currentHash=t},"still-ok":function(){i.info("[WDS] Nothing changed."),(c.useWarningOverlay||c.useErrorOverlay)&&r.clear(),a("StillOk")},"log-level":function(t){var e=s("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==e.keys().indexOf("./log")&&e("./log").setLogLevel(t),o(t)},overlay:function(t){"undefined"!=typeof document&&("boolean"==typeof t?(c.useWarningOverlay=!1,c.useErrorOverlay=t):t&&(c.useWarningOverlay=t.warnings,c.useErrorOverlay=t.errors))},progress:function(t){"undefined"!=typeof document&&(c.useProgress=t)},"progress-update":function(t){c.useProgress&&i.info("[WDS] ".concat(t.percent,"% - ").concat(t.msg,".")),a("Progress",t)},ok:function(){if(a("Ok"),(c.useWarningOverlay||c.useErrorOverlay)&&r.clear(),c.initial)return c.initial=!1;l(c,u)},"content-changed":function(){i.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(e){i.warn("[WDS] Warnings while compiling.");var s=e.map((function(e){return t(e)}));a("Warnings",s);for(var n=0;n<s.length;n++)i.warn(s[n]);if(c.useWarningOverlay&&r.showMessage(e),c.initial)return c.initial=!1;l(c,u)},errors:function(e){i.error("[WDS] Errors while compiling. Reload prevented.");var s=e.map((function(e){return t(e)}));a("Errors",s);for(var n=0;n<s.length;n++)i.error(s[n]);c.useErrorOverlay&&r.showMessage(e),c.initial=!1},error:function(t){i.error(t)},close:function(){i.error("[WDS] Disconnected!"),a("Close")}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,